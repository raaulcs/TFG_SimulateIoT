[comment encoding = UTF-8 /]
[module generate('http://www.example.org/iOTMetaModel')]


[comment ----------DEVICE----------------------------------------------------------------------------------------------/]
  
[template public generateDeviceBroker(anEnvironment : Environment)]
[comment @main/]
[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
	[file ('/' + device.name + device.id + '/src/main/java/Gestores/Broker.java', false, 'UTF-8')]
package Gestores;

import java.util.List;

public class Broker{
	String url;
	List<Topic> Ltopic;
	
	public Broker(String url, List<Topic> ltopic) {
		super();
		this.url = url;
		Ltopic = ltopic; 
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public List<Topic> getLtopic() {
		return Ltopic;
	}

	public void setLtopic(List<Topic> ltopic) {
		Ltopic = ltopic;
	}
}
	[/file]
[/for]
[/template]





[template public generateDeviceGestorDeConexiones(anEnvironment : Environment)]
[comment @main/]
[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
	[file ('/' + device.name + device.id + '/src/main/java/Gestores/GestorDeConexiones.java', false, 'UTF-8')]
package Gestores;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions; 
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttSecurityException;

public class GestorDeConexiones {
	private String IDcliente;
	private List<Broker> Lbroker;
	private List<MqttClient> Lclient;
	
	public GestorDeConexiones(String IDcliente, List<Broker> Lbroker) {
		this.IDcliente = IDcliente;
		this.Lbroker = Lbroker;
		Lclient = new ArrayList<MqttClient>();

	}
	
	public void Iniciar (){
		MqttClient myClient = null;
		MqttConnectOptions connOpt;
		
		connOpt = new MqttConnectOptions();
		connOpt.setCleanSession(true);
		connOpt.setKeepAliveInterval(30);

		for(int i=0; i<Lbroker.size(); i++) {
			while(!connectClient(myClient, i, connOpt)) {
				try {
					TimeUnit.SECONDS.sleep(3);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
						
			for(int j=0; j<Lbroker.get(i).getLtopic().size(); j++) {
				if(Lbroker.get(i).getLtopic().get(j).isSuscribir()) {
					try {
						Lclient.get(i).subscribe(Lbroker.get(i).getLtopic().get(j).getNombre(), 0);
					} catch (MqttException e) {
						e.printStackTrace();
					}
				}
			}
		}
	}
	
	public String getIDcliente() {
		return IDcliente;
	}

	public void setIDcliente(String iDcliente) {
		IDcliente = iDcliente;
	}

	public List<Broker> getLbroker() {
		return Lbroker;
	}

	public void setLbroker(List<Broker> lbroker) {
		Lbroker = lbroker;
	}

	public List<MqttClient> getLclient() {
		return Lclient;
	}

	public void setLclient(List<MqttClient> lclient) {
		Lclient = lclient;
	}
	
	public MqttClient getClientByTopicName(String topicName) {
		MqttClient client = null;
		boolean find=false;
		
		for(int i=0; i<Lbroker.size() && !find; i++) {
			for(int j=0; j<Lbroker.get(i).getLtopic().size() && !find; j++) {
				if(Lbroker.get(i).getLtopic().get(j).getNombre().equals(topicName)) {
					for(int k=0; k<Lclient.size() && !find; k++) {
						if(Lclient.get(k).getServerURI().equals(Lbroker.get(i).getUrl())) {
							find=true;
							client = Lclient.get(k);
						}
					}
				}
			}
		}
		
		return client;
	}
	
	public boolean connectClient(MqttClient myClient, int clientIndex, MqttConnectOptions connOpt) {
		boolean connected = false;
		try {
			myClient = new MqttClient(Lbroker.get(clientIndex).getUrl(), this.IDcliente);
			myClient.connect(connOpt);
			Lclient.add(myClient);
			System.out.println("Connected to " + Lbroker.get(clientIndex).getUrl());
			connected = true;
		} catch (MqttException e) {
				System.out.println("PROBLEMs connectting to " + Lbroker.get(clientIndex).getUrl() + ", waiting 3 seconds for the next connection attempt");
		}
		return connected;			
	}
	
	public void reconnectClient(MqttClient myClient) {
		
		while (!myClient.isConnected()) {
			try {
				myClient.reconnect();
			} catch (MqttException e) {
				System.out.println("PROBLEMs reconnectting to " + myClient.getServerURI() + ", waiting 3 seconds for the next reconnection attempt");
				try {
					TimeUnit.SECONDS.sleep(3);
				} catch (InterruptedException e2) { 
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
			}
		}
	}
	
	
}
	[/file]
[/for]
[/template]




[template public generateDevicePublisher(anEnvironment : Environment)]
[comment @main/]
[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
	[file ('/' + device.name + device.id + '/src/main/java/Gestores/Publisher.java', false, 'UTF-8')]
package Gestores;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttTopic;

public class Publisher {
	
	public boolean Publish(String pubMessage, String myId, String topic, MqttClient myClient) {
		boolean published = false;
		MqttTopic myTopic = myClient.getTopic(topic);
		int pubQoS = 0;
		MqttMessage message = new MqttMessage(pubMessage.getBytes());
		message.setQos(pubQoS);
		message.setRetained(false);
		// Publish the message
		System.out.println("DEVICE " + myId + " | Publishing data = " + pubMessage + " | To topic " + myTopic);
		MqttDeliveryToken token = null;
		try {
			// publish message to broker
			token = myTopic.publish(message);
	    	// Wait until the message has been delivered to the broker
			token.waitForCompletion();
			published = true;
			//Thread.sleep(100);
		} catch (Exception e) {
			//e.printStackTrace();
			System.out.println("PROBLEMs publishing to " + myClient.getServerURI() + ", attempting to reconnect");
		}
		return published;
	}
}
	[/file]
[/for]
[/template]

 


[template public generateDeviceReceiver(anEnvironment : Environment)]
[comment @main/]
[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
	[file ('/' + device.name + device.id + '/src/main/java/Gestores/Receiver.java', false, 'UTF-8')]
package Gestores;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttMessage;

public class Receiver implements MqttCallback{
	Publisher pub;
	GestorDeConexiones gestorconexiones;
	
	public Receiver(GestorDeConexiones gestorconexiones, Publisher pub) {
		this.gestorconexiones = gestorconexiones;
		this.pub = pub;
		for( int i=0; i<this.gestorconexiones.getLclient().size(); i++) {
			this.gestorconexiones.getLclient().get(i).setCallback(this);
		}
	}

	public void connectionLost(Throwable cause) {
		// TODO Auto-generated method stub
		
	}

	public void messageArrived(String topic, MqttMessage message) throws Exception {
		String dataReceived = new String(message.getPayload());
		System.out.println("DEVICE " +this.gestorconexiones.getIDcliente()+ " | Mensaje recibido: " + dataReceived + "| From topic: "+ topic);

//		if(dataReceived.equals("hola"))
//			pub.Publish("recibido!", topic, gestorconexiones.getClientByTopicName(topic));
	}

	public void deliveryComplete(IMqttDeliveryToken token) {
		// TODO Auto-generated method stub
		
	}

}
	[/file]
[/for]
[/template]




[template public generateDeviceTopic(anEnvironment : Environment)]
[comment @main/]
[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
	[file ('/' + device.name + device.id + '/src/main/java/Gestores/Topic.java', false, 'UTF-8')]
package Gestores;

public class Topic{
	String nombre;
	boolean suscribir;
	boolean publicar;
	
	public Topic(String nombre, boolean suscribir, boolean publicar) {
		super();
		this.nombre = nombre;
		this.suscribir = suscribir;
		this.publicar = publicar;
	}
	
	public String getNombre() {
		return nombre;
	}
	
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	
	public boolean isSuscribir() {
		return suscribir;
	}
	
	public void setSuscribir(boolean suscribir) {
		this.suscribir = suscribir;
	}
	
	public boolean isPublicar() {
		return publicar;
	}
	
	public void setPublicar(boolean publicar) {
		this.publicar = publicar;
	}
	
}
	[/file]
[/for]
[/template]




[template public generateDeviceMain(anEnvironment : Environment)]
[comment @main/]
[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
	[file ('/' + device.name + device.id + '/src/main/java/Gestores/Main.java', false, 'UTF-8')]
package Gestores;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import org.eclipse.paho.client.mqttv3.MqttClient;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import java.io.InputStreamReader;

public class Main {


	public static String getIpOfHost(String hostname, int format){
		BufferedReader reader;
		String ip="";
		boolean encontrado=false;
		int port=0;
		try {
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/tabladirecciones"))));

	    String line;
	    
			for (int i = 0; !encontrado && ((line = reader.readLine()) != null); i++)
			{
			  if(line.toLowerCase().equals(hostname.toLowerCase())) {
				  ip=reader.readLine();
				  encontrado=true;
				  port = i/2;
			  }
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    if(format==1) {
	    	ip = "tcp://"+ip+":"+String.valueOf(1883+port);
	    }else {
	    	if(format==2) {
		    	ip = ip+":"+String.valueOf(27017+port);
		    }
	    }
	        
	    return ip;
	}


	public static List<String> LoadCsv(int messagesAmount, String csvName){
		BufferedReader reader;
		List<String> ldata = new ArrayList<>();

		try {
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/" + csvName + ".csv"))));

			String line;
	    
			for (int i = 0; ((line = reader.readLine()) != null) && i<messagesAmount; i++)
			{
			  ldata.add(line);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	        
	    return ldata;
	}


	public static String getRoute(String hostnames){
		String route = "['['/] ";
		
		hostnames = hostnames.replaceAll("\\s+","");
		String['['/]] lhostnames = hostnames.split(",");
		
		for(int i=0; i < lhostnames.length; i++) {
			if(i!=lhostnames.length-1)
				route = route + "\"" + getIpOfHost(lhostnames['['/]i], 1) +"\", ";
			else
				route = route + "\"" + getIpOfHost(lhostnames['['/]i], 1) +"\" ]";
		}
		
		return route;
	}
	
	
	public static void main(String ['['/] ] args) throws UnknownHostException {
		List<Topic> Ltopic = new ArrayList<Topic>();
		Topic topic;
	[for(topic: Topic | device.publish_on_topic->union(device.suscribe_on_topic)->asOrderedSet())]	
		topic = new Topic("[topic.name/]", [if device.suscribe_on_topic->includes(topic) ] true [/if] [if device.suscribe_on_topic->includes(topic) = false ] false [/if], [if device.publish_on_topic->includes(topic) ] true [/if] [if device.publish_on_topic->includes(topic) = false ] false [/if]);
		Ltopic.add(topic);
	[/for]
		
		List<Broker> Lbroker = new ArrayList<Broker>();
		Broker broker;
	[for(fog : ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if fog.edge_node->filter(Sensor)->includes(device)]
		//FIWARE COMMENT broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883", Ltopic);
		broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[1883+i/]", Ltopic);

		Lbroker.add(broker);
		[/if]
	[/for]
	
		int randId = ThreadLocalRandom.current().nextInt(0, 9999999);
		GestorDeConexiones gestorconexiones = new GestorDeConexiones("[device.name + '_' + device.id/]_"+randId, Lbroker);
		gestorconexiones.Iniciar();
		Publisher publisher = new Publisher();
		Receiver receiver = new Receiver(gestorconexiones, publisher);

///////Para la publicacion de datos

		List<MqttClient> Lclient = gestorconexiones.getLclient();
		//String event;
		int randomNum;
		[if(device.data.datasource->filter(CSVload)->size()>0)] 
		List<String> ldata = new ArrayList<>();
		ldata = LoadCsv([anEnvironment.numberOfMessages/], "[device.data.datasource->filter(LoadFromFile).FileName/]");
		[/if]
		for (int i=0; i<[anEnvironment.numberOfMessages/]; i++) {
			//event = "{\"event\":{\"value\":"+ randomNum +"}}";  
		[for(topic: Topic | device.publish_on_topic)]
			[if(device.additionalconfiguration <> null)]
				[if(device.data.datasource->filter(CSVload)->size()>0)]
			//FIWARE COMMENT publisher.Publish("{ \"value\" : " + ldata.get(i) + ", \"topic\" : \"[device.additionalconfiguration.oclAsType(RedirectionConfiguration).topic.name/]\", \"route\" : ['['/]"  + "\"" + [for (fogroute : ProcessNode | device.additionalconfiguration.oclAsType(RedirectionConfiguration).route_processnode)][if (i<device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.toLower().substituteAll('_', '') + fogroute.id/]:1883"+"\"," + "\"" +[/if][if (i = device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.toLower().substituteAll('_', '') + fogroute.id/]:1883" + "\" ]"[/if][/for]+" }", gestorconexiones.getIDcliente(), "/1234/[device.name+'_'+device.id/]/attrs", Lclient.get(0));	
			if(!publisher.Publish("{ \"value\" : " + ldata.get(i) + ", \"topic\" : \"[device.additionalconfiguration.oclAsType(RedirectionConfiguration).topic.name/]\", \"route\" : ['['/]"  + "\"" + [for (fogroute : ProcessNode | device.additionalconfiguration.oclAsType(RedirectionConfiguration).route_processnode)][if (i<device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.replaceAll('_','').toLowerCase()+fogroute.id/]:[1883+i/]"+"\"," + "\"" +[/if][if (i = device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.replaceAll('_','').toLowerCase()+fogroute.id/]:[1883+i/]" + "\" ]"[/if][/for]+" }", gestorconexiones.getIDcliente(), "/1234/[device.name+'_'+device.id/]/attrs", gestorconexiones.getClientByTopicName("[topic.name/]"))){
				gestorconexiones.reconnectClient(gestorconexiones.getClientByTopicName("[topic.name/]"));
			}
			//FIWARE COMMENT publisher.Publish("{ \"value\" : \"" + ldata.get(i) + "\", \"topic\" : \"[device.additionalconfiguration.oclAsType(RedirectionConfiguration).topic.name/]\", \"route\" : ['['/]"  + "\"" + [for (fogroute : ProcessNode | device.additionalconfiguration.oclAsType(RedirectionConfiguration).route_processnode)][if (i<device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.toLower().substituteAll('_', '') + fogroute.id/]:1883"+"\"," + "\"" +[/if][if (i = device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.toLower().substituteAll('_', '') + fogroute.id/]:1883" + "\" ]"[/if][/for]+" }", gestorconexiones.getIDcliente(), "[topic.name/]", Lclient.get(0));
			if(!publisher.Publish("{ \"value\" : \"" + ldata.get(i) + "\", \"topic\" : \"[device.additionalconfiguration.oclAsType(RedirectionConfiguration).topic.name/]\", \"route\" : ['['/]"  + "\"" + [for (fogroute : ProcessNode | device.additionalconfiguration.oclAsType(RedirectionConfiguration).route_processnode)][if (i<device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.replaceAll('_','').toLowerCase()+fogroute.id/]:[1883+i/]"+"\"," + "\"" +[/if][if (i = device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.replaceAll('_','').toLowerCase()+fogroute.id/]:[1883+i/]" + "\" ]"[/if][/for]+" }", gestorconexiones.getIDcliente(), "[topic.name/]", gestorconexiones.getClientByTopicName("[topic.name/]"))){
				gestorconexiones.reconnectClient(gestorconexiones.getClientByTopicName("[topic.name/]"));
			}
				[/if]
				[if(device.data.datasource->filter(DataGeneration)->filter(Aleatory)->size()>0)]
			randomNum = ThreadLocalRandom.current().nextInt([device.data.datasource->filter(DataGeneration).generationRange.Lower/], [device.data.datasource->filter(DataGeneration).generationRange.Upper/] + 1);			
			//FIWARE COMMENT publisher.Publish("{ \"value\" : " + randomNum + ", \"topic\" : \"[device.additionalconfiguration.oclAsType(RedirectionConfiguration).topic.name/]\", \"route\" : ['['/]"  + "\"" + [for (fogroute : FogNode | device.additionalconfiguration.oclAsType(RedirectionConfiguration).route_processnode.oclAsType(FogNode))][if (i<device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.toLower() + fogroute.id/]:1883"+"\"," + "\"" +[/if][if (i = device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.toLower() + fogroute.id/]:1883" + "\" ]"[/if][/for]+" }", gestorconexiones.getIDcliente(), "/1234/[device.name+'_'+device.id/]/attrs", gestorconexiones.getClientByTopicName("[topic.name/]"));	
			if(!publisher.Publish("{ \"value\" : " + randomNum + ", \"topic\" : \"[device.additionalconfiguration.oclAsType(RedirectionConfiguration).topic.name/]\", \"route\" : ['['/]"  + "\"" + [for (fogroute : FogNode | device.additionalconfiguration.oclAsType(RedirectionConfiguration).route_processnode.oclAsType(FogNode))][if (i<device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]getIpOfHost([fogroute.name.replaceAll('_','').toLowerCase()+fogroute.id/], 1)+"\"," + "\"" +[/if][if (i = device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]getIpOfHost("[fogroute.name.replaceAll('_','').toLowerCase()+fogroute.id/]", 1) + "\" ]"[/if][/for]+" }", gestorconexiones.getIDcliente(), "/1234/[device.name+'_'+device.id/]/attrs", Lclient.get(0))){
				gestorconexiones.reconnectClient(gestorconexiones.getClientByTopicName("[topic.name/]"));
			}	
			//FIWARE COMMENT publisher.Publish("{ \"value\" : \"" + Integer.toString(randomNum) + "\", \"topic\" : \"[device.additionalconfiguration.oclAsType(RedirectionConfiguration).topic.name/]\", \"route\" : ['['/]"  + "\"" + [for (fogroute : FogNode | device.additionalconfiguration.oclAsType(RedirectionConfiguration).route_processnode.oclAsType(FogNode))][if (i<device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.toLower() + fogroute.id/]:1883"+"\"," + "\"" +[/if][if (i = device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]"tcp://mosquitto-[fogroute.name.toLower() + fogroute.id/]:1883" + "\" ]"[/if][/for]+" }", gestorconexiones.getIDcliente(), "[topic.name/]", Lclient.get(0));
			if(!publisher.Publish("{ \"value\" : \"" + Integer.toString(randomNum) + "\", \"topic\" : \"[device.additionalconfiguration.oclAsType(RedirectionConfiguration).topic.name/]\", \"route\" : ['['/]"  + "\"" + [for (fogroute : FogNode | device.additionalconfiguration.oclAsType(RedirectionConfiguration).route_processnode.oclAsType(FogNode))][if (i<device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]getIpOfHost([fogroute.name.replaceAll('_','').toLowerCase()+fogroute.id/], 1)+"\"," + "\"" +[/if][if (i = device.additionalconfiguration->filter(RedirectionConfiguration).route_processnode->size())]getIpOfHost("[fogroute.name.replaceAll('_','').toLowerCase()+fogroute.id/]", 1) + "\" ]"[/if][/for]+" }", gestorconexiones.getIDcliente(), "[topic.name/]", gestorconexiones.getClientByTopicName("[topic.name/]"))){
				gestorconexiones.reconnectClient(gestorconexiones.getClientByTopicName("[topic.name/]"));
			}	
				[/if]
			[/if]
			[if(device.additionalconfiguration = null)]
				[if(device.data.datasource->filter(CSVload)->size()>0)]
			//FIWARE COMMENT publisher.Publish("{ \"value\" : " + ldata.get(i) + "" +" }", gestorconexiones.getIDcliente(), "/1234/[device.name+'_'+device.id/]/attrs", Lclient.get(0));
			if(!publisher.Publish("{ \"value\" : \"" + ldata.get(i) + "\"" +" }", gestorconexiones.getIDcliente(), "[topic.name/]", gestorconexiones.getClientByTopicName("[topic.name/]"))){
				gestorconexiones.reconnectClient(gestorconexiones.getClientByTopicName("[topic.name/]"));
			}
				[/if]
				[if(device.data.datasource->filter(DataGeneration)->filter(Aleatory)->size()>0)] 
			randomNum = ThreadLocalRandom.current().nextInt([device.data.datasource->filter(DataGeneration).generationRange.Lower/], [device.data.datasource->filter(DataGeneration).generationRange.Upper/] + 1);
			//FIWARE COMMENT publisher.Publish("{ \"value\" : " + randomNum + "" +" }", gestorconexiones.getIDcliente(), "/1234/[device.name+'_'+device.id/]/attrs", Lclient.get(0));	
			if(!publisher.Publish("{ \"value\" : \"" + Integer.toString(randomNum) + "\"" +" }", gestorconexiones.getIDcliente(), "[topic.name/]", gestorconexiones.getClientByTopicName("[topic.name/]"))){
				gestorconexiones.reconnectClient(gestorconexiones.getClientByTopicName("[topic.name/]"));
			}	
				[/if]
			[/if] 
		[/for]
			try {
				TimeUnit.MILLISECONDS.sleep((int)(1000/([anEnvironment.simulationSpeed/]*[device.generation_speed/])));
			} catch (InterruptedException e) { 
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
	[/file]
[/for]
[/template]




[template public generateDevicePom(anEnvironment : Environment)]
[comment @main/]
[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
	[file ('/' + device.name + device.id + '/pom.xml', false, 'UTF-8')]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>Gestores</groupId>
  <artifactId>[device.name + device.id/]</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>[device.name + device.id/]</name>
  <url>http://maven.apache.org</url>

  <properties>
    <version.thorntail>2.4.0.Final</version.thorntail>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <failOnMissingWebXml>false</failOnMissingWebXml>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

	<repositories>
	    <repository>
	        <id>Eclipse Paho Repo</id>
	        <url>https://repo.eclipse.org/content/repositories/paho-releases/</url>
	    </repository>
	</repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.eclipse.paho</groupId>
        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
        <version>1.2.0</version>
    </dependency>
  </dependencies>
  
    <build>
      <plugins>
		  <plugin>
		    <groupId>io.thorntail</groupId>
		    <artifactId>thorntail-maven-plugin</artifactId>
		    <configuration>
			  <mainClass>Gestores.Main</mainClass>
			</configuration>
		    <version>${version.thorntail}</version> 
		    <executions>
		      <execution>
		        <goals>
		          <goal>package</goal>
		        </goals>
		      </execution>
		    </executions>
		  </plugin>
		  <plugin>
	      	<groupId>com.spotify</groupId>
	      	<artifactId>docker-maven-plugin</artifactId>
	      	<version>1.2.0</version>
	      	<configuration>
	      	<mainClass>Gestores.Main</mainClass>
	        <imageName>['localhost:5000/sensor-' + device.name.toLowerCase() + device.id.toString().toLowerCase()/]</imageName>
	        <baseImage>openjdk:11.0.11-jre-slim</baseImage>
	        <entryPoint>['['/]"java", "-jar", "/${project.build.finalName}-thorntail.jar"]</entryPoint>
	        <!-- copy the service's jar file from target into the root directory of the image --> 
	        <resources>
	           <resource>
	             <targetPath>/</targetPath>
	             <directory>${project.build.directory}</directory>
	             <include>${project.build.finalName}-thorntail.jar</include>
	           </resource>
	        </resources>
	      </configuration>
	    </plugin>
      </plugins>
  </build>
</project>


	[/file]
[/for]
[/template]

[template public selectArduinoSensorObjectBatch(arduino : ArduinoConfiguration)]
[if arduino.deviceType=ArduinoDeviceType::Thermistor]
TKThermistor therm(I[arduino.input.input/]);      // Creating the object 'therm' (TKThermistor class). Hooked up on I[arduino.input.input/][/if]
[if arduino.deviceType=ArduinoDeviceType::RotatoryPotentiometer]
TKPotentiometer potR(I[arduino.input.input/]);    // Creating the object 'potR' (TKPotentiometer class). Hooked up on I[arduino.input.input/][/if]
[if arduino.deviceType=ArduinoDeviceType::Photoresistor]
TKLightSensor led(I[arduino.input.input/]);       // Creating the object 'led' (TKLightSensor class). Hooked up on I[arduino.input.input/][/if]
[if arduino.deviceType=ArduinoDeviceType::TiltSensor]
TKTiltSensor tilt(I[arduino.input.input/]);      // Creating the object 'tilt' (TKTiltSensor class). Hooked up on I[arduino.input.input/][/if]
[if arduino.deviceType=ArduinoDeviceType::Accelerometer]
TKAccelerometer acc([for (input : Input | arduino.input) separator (', ')]I[input.input/][/for]); // Creating the object 'acc' (TKAccelerometer class). Hooked up on [for (input : Input | arduino.input) separator (' & ')]I[input.input/][/for][/if]
[if arduino.deviceType=ArduinoDeviceType::PushbuttonModule]
TKButton button(I[arduino.input.input/]);         // Creating the object 'button' (TKButton class). Hooked up on I[arduino.input.input/][/if]
[if arduino.deviceType=ArduinoDeviceType::LinearPotentiometer]
TKPotentiometer potL(I[arduino.input.input/]);    // Creating the object 'potL' (TKPotentiometer class). Hooked up on I[arduino.input.input/][/if]
[if arduino.deviceType=ArduinoDeviceType::TouchSensor]
TKTouchSensor touch(I[arduino.input.input/]);     // Creating the object 'touch' (TKTouchSensor class). Hooked up on I[arduino.input.input/][/if]
[if arduino.deviceType=ArduinoDeviceType::JoystickModule]
TKJoystick joystick([for (input : Input | arduino.input) separator (', ')]I[input.input/][/for]); // Creating the object 'joystick' (TKJoystick class). Hooked up on [for (input : Input | arduino.input) separator (' & ')]I[input.input/][/for][/if]
[if arduino.deviceType=ArduinoDeviceType::Gyroscope]
TKGyro gyro([for (input : Input | arduino.input) separator (', ')]I[input.input/][/for], TK_X4);  // Creating the object 'gyro' (TKGyro class). Hooked up on [for (input : Input | arduino.input) separator (' & ')]I[input.input/][/for][/if]
[if arduino.deviceType=ArduinoDeviceType::HallSensor]
TKHallSensor hs(I[arduino.input.input/]);         // Creating the object 'hs' (TKHallSensor class). Hooked up on I[arduino.input.input/][/if]
[/template]

[template public selectArduinoSensorFunctionBatch(arduino : ArduinoConfiguration, device : Sensor)]
[if arduino.deviceType=ArduinoDeviceType::Thermistor]
var = therm.readCelsius();[/if]
[if arduino.deviceType=ArduinoDeviceType::RotatoryPotentiometer]
var = potR.read();[/if]
[if arduino.deviceType=ArduinoDeviceType::Photoresistor]
var = led.read();[/if]
[if arduino.deviceType=ArduinoDeviceType::TiltSensor]
var = tilt.read();[/if]
[if arduino.deviceType=ArduinoDeviceType::Accelerometer]
var = acc.readX() + ", " + acc.readY();
var = var + ", " + acc.readZ();[/if]
[if arduino.deviceType=ArduinoDeviceType::PushbuttonModule]
var = button.read();[/if]
[if arduino.deviceType=ArduinoDeviceType::LinearPotentiometer]
var = potL.read();[/if]
[if arduino.deviceType=ArduinoDeviceType::TouchSensor]
var = touch.read();[/if]
[if arduino.deviceType=ArduinoDeviceType::JoystickModule]
var = joystick.readX() + ", " + joystick.readY();[/if]
[if arduino.deviceType=ArduinoDeviceType::Gyroscope]
var = gyro.readX() + ", " + gyro.readY();[/if]
[if arduino.deviceType=ArduinoDeviceType::HallSensor]
var = hs.read();[/if]
[/template]

[template public generateDeviceIno(anEnvironment : Environment)]
[comment @main/]
[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
	[if device.hil_node_configuration->filter(Arduino) -> size() > 0]
		[file ('/' + device.name + device.id + '/' + device.name + device.id + '.ino', false, 'UTF-8')]
// --------------------------------------------------------------------------------------------------------------------------------

#include <TinkerKit.h>
#include <PubSubClient.h>
#include <YunClient.h>

// --------------------------------------------------------------------------------------------------------------------------------

			[for (fogNode : FogNode | device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
				[if (fogNode.hil_node_configuration->filter(Raspberry)->size() > 0)]
#define MQTT_HOST_[fogNode.name.replaceAll('_','')/][fogNode.id/] "[fogNode.hil_node_configuration->filter(Raspberry).IP/]"
				[/if]
			[if (fogNode.hil_node_configuration->filter(Raspberry)->size() < 1)]
#define MQTT_HOST_[fogNode.name.replaceAll('_','')/][fogNode.id/] "IPv4_WiFi_PC"
				[/if]
			[/for]

			[for (topic : Topic | device.publish_on_topic)]
#define TOPIC_[topic.name.replaceAll('_','')/] "[topic.name/]"
			[/for]

#define SERIAL 9600
			[for (fogNode : FogNode | device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
				[if (fogNode.hil_node_configuration->filter(Raspberry)->size() > 0)]
#define PORT_[fogNode.name.replaceAll('_','')/][fogNode.id/] "Mosquitto_PORT"
				[/if]
			[/for]

// --------------------------------------------------------------------------------------------------------------------------------

void callback(char* topic, byte* payload, unsigned int length) {
  // Handle message arrived
}

// --------------------------------------------------------------------------------------------------------------------------------

YunClient yun;
			[for (fogNode : FogNode | device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
PubSubClient mqtt_[fogNode.name.replaceAll('_','')/][fogNode.id/](MQTT_HOST_[fogNode.name.replaceAll('_','')/][fogNode.id/], PORT_[fogNode.name.replaceAll('_','')/][fogNode.id/], callback, yun);
			[/for]

boolean connected = false;	 // Toggle connected variable to check if MQTT is running
			[for (configuration : ArduinoConfiguration | device.hil_node_configuration->filter(Arduino).arduinoconfiguration)]
[configuration.selectArduinoSensorObjectBatch()/]
			[/for]                  
String var;					 // Auxiliary string variable

// --------------------------------------------------------------------------------------------------------------------------------

void connectMQTT(){
  while(!connected){
	if ([for (fogNode : FogNode | device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)) separator(' and ')]mqtt_[fogNode.name.replaceAll('_','')/][fogNode.id/].connect("sensor[device.id/]_[fogNode.name.replaceAll('_','')/][fogNode.id/]")[/for]) {
      connected = true;
    }
    else {
      // Wait 5000 milliseconds before trying to connect again
	  delay(5000);    
    }
  }
}

void setup() {
  Serial.begin(SERIAL); // Initialize serial communications at 9600 bps
  Bridge.begin();
  connectMQTT();
}

// --------------------------------------------------------------------------------------------------------------------------------

void loop() {
  if ([for (fogNode : FogNode | device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)) separator(' or ')]!mqtt_[fogNode.name.replaceAll('_','')/][fogNode.id/].connected()[/for]) {
    connected = false;
    connectMQTT();
  }
  else {
    // Read the sensor value:
			[if device.publish_on_topic ->size() > 0]
    [device.hil_node_configuration->filter(Arduino).arduinoconfiguration.selectArduinoSensorFunctionBatch(device)/]
	var = "{ \"value\" : \"" + var + "\" }";

	// Publish the sensor value:
				[for (n: Integer | Sequence {1..device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)->size()})]
					[for (topic : Topic | device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)->at(n).create_topic->intersection(device.publish_on_topic)->sortedBy(name))]
	mqtt_[device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)->at(n).name/][device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)->at(n).id/].publish(TOPIC_[topic.name.replaceAll('_','')/],(char*) var.c_str());
					[/for]
				[/for]
			[/if]

    // Wait [(device.generation_speed*1000).round()/] milliseconds before the next loop
    delay([(device.generation_speed*1000).round()/]);
  } 

  			[for (fogNode : FogNode | device.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
  mqtt_[fogNode.name.replaceAll('_','')/][fogNode.id/].loop();
  			[/for]             
}

// --------------------------------------------------------------------------------------------------------------------------------
		[/file]
	[/if]
[/for]
[/template]

[comment ----------END OF DEVICE----------------------------------------------------------------------------------------------/]




[comment ----------ACTUATOR---------------------------------------------------------------------------------------------------/]

[template public generateActuatorBroker(anEnvironment : Environment)]
[comment @main/]
[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
	[file ('/' + actuator.name + actuator.id + '/src/main/java/actuator/Broker.java', false, 'UTF-8')]
package actuator;

import java.util.List;

public class Broker{
	String url;
	List<Topic> Ltopic;
	
	public Broker(String url, List<Topic> ltopic) {
		super();
		this.url = url;
		Ltopic = ltopic;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public List<Topic> getLtopic() {
		return Ltopic;
	}

	public void setLtopic(List<Topic> ltopic) {
		Ltopic = ltopic;
	}

	
}
	[/file]
[/for]
[/template]




[template public generateActuatorGestorDeConexiones(anEnvironment : Environment)]
[comment @main/]
[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
	[file ('/' + actuator.name + actuator.id + '/src/main/java/actuator/GestorDeConexiones.java', false, 'UTF-8')]
package actuator;

import java.util.ArrayList;
import java.util.List;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import java.util.concurrent.TimeUnit;

public class GestorDeConexiones {
	private String IDcliente;
	private List<Broker> Lbroker;
	private List<MqttClient> Lclient;
	
	public GestorDeConexiones(String IDcliente, List<Broker> Lbroker) {
		this.IDcliente = IDcliente;
		this.Lbroker = Lbroker;
		Lclient = new ArrayList<MqttClient>();

	}
	
	public void Iniciar () {
		MqttClient myClient;
		MqttConnectOptions connOpt;
		
		connOpt = new MqttConnectOptions();
		connOpt.setCleanSession(true);
		connOpt.setKeepAliveInterval(30);

		for(int i=0; i<Lbroker.size(); i++) {
			while(!connectClient(i, connOpt)) {
				try {
					TimeUnit.SECONDS.sleep(3);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			for(int j=0; j<Lbroker.get(i).getLtopic().size(); j++) {
				if(Lbroker.get(i).getLtopic().get(j).isSuscribir()) {
					try {
						Lclient.get(i).subscribe(Lbroker.get(i).getLtopic().get(j).getNombre(), 0);
					} catch (MqttException e) {
						e.printStackTrace();
					}
				}
			}
		}

		Thread tconnhealthmonitor = new Thread(new Runnable() {
		    @Override
		    public void run() {
		        connectionHealthMonitor();
		    }
		});  
		tconnhealthmonitor.start();
	}
	
	public String getIDcliente() {
		return IDcliente;
	}

	public void setIDcliente(String iDcliente) {
		IDcliente = iDcliente;
	}

	public List<Broker> getLbroker() {
		return Lbroker;
	}

	public void setLbroker(List<Broker> lbroker) {
		Lbroker = lbroker;
	}

	public List<MqttClient> getLclient() {
		return Lclient;
	}

	public void setLclient(List<MqttClient> lclient) {
		Lclient = lclient;
	}
	
	public MqttClient getClientByTopicName(String topicName) {
		MqttClient client = null;
		boolean find=false;
		
		for(int i=0; i<Lbroker.size() && !find; i++) {
			for(int j=0; j<Lbroker.get(i).getLtopic().size() && !find; j++) {
				if(Lbroker.get(i).getLtopic().get(j).getNombre().equals(topicName)) {
					for(int k=0; k<Lclient.size() && !find; k++) {
						if(Lclient.get(k).getServerURI().equals(Lbroker.get(i).getUrl())) {
							find=true;
							client = Lclient.get(k);
						}
					}
				}
			}
		}
		
		return client;
	}

	public Broker getBrokerByURI(String brokerURI) {
		boolean find = false;
		Broker broker = null;
		for(int i=0; i<Lbroker.size() && !find; i++) {
			if(Lbroker.get(i).getUrl() == brokerURI) {
				find = true;
				broker = Lbroker.get(i);
			}
		}
		return broker;
	}


	public boolean connectClient(int clientIndex, MqttConnectOptions connOpt) {
		boolean connected = false;
		MqttClient myClient;
		
		try {
			myClient = new MqttClient(Lbroker.get(clientIndex).getUrl(), this.IDcliente);
			myClient.connect(connOpt);
			Lclient.add(myClient);
			System.out.println("Connected to " + Lbroker.get(clientIndex).getUrl());
			connected = true;
		} catch (MqttException e) {
				System.out.println("PROBLEMs connectting to " + Lbroker.get(clientIndex).getUrl() + ", waiting 3 seconds for the next connection attempt");
		}
		return connected;			
	}
	
	public void reconnectClient(MqttClient myClient) {
		
		while (!myClient.isConnected()) {
			try {
				myClient.reconnect();
			} catch (MqttException e) {
				System.out.println("PROBLEMs reconnectting to " + myClient.getServerURI() + ", waiting 3 seconds for the next reconnection attempt");
				try {
					TimeUnit.SECONDS.sleep(3);
				} catch (InterruptedException e2) { 
					e2.printStackTrace();
				}
			}
			
			if(myClient.isConnected()) {
				System.out.println("Client reconnected to: " + myClient.getServerURI());
				System.out.println("Resubscribing to topics...");
				Broker broker = getBrokerByURI(myClient.getServerURI());
				for(int i=0; i < broker.getLtopic().size(); i++) {
					if(broker.getLtopic().get(i).isSuscribir()) {
						try {
							myClient.subscribe(broker.getLtopic().get(i).getNombre(), 0);
						} catch (MqttException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
	}
	
	// This method is designed as a thread to monitor the connection health and attempt to reconnect if it is lost.
	public void connectionHealthMonitor() {
		while (true) {
			for (int i = 0; i < this.Lclient.size(); i++) {
				reconnectClient(this.Lclient.get(i));
			}
			try {
				TimeUnit.SECONDS.sleep(3);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
	[/file]
[/for]
[/template]




[template public generateActuatorReceiver(anEnvironment : Environment)]
[comment @main/]
[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
	[file ('/' + actuator.name + actuator.id + '/src/main/java/actuator/Receiver.java', false, 'UTF-8')]
package actuator;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttMessage;

public class Receiver implements MqttCallback{
	GestorDeConexiones gestorconexiones;
	
	public Receiver(GestorDeConexiones gestorconexiones) {
		this.gestorconexiones = gestorconexiones;
		for( int i=0; i<this.gestorconexiones.getLclient().size(); i++) {
			this.gestorconexiones.getLclient().get(i).setCallback(this);
		}
	}

	public void connectionLost(Throwable cause) {
		// TODO Auto-generated method stub
		
	}

	public void messageArrived(String topic, MqttMessage message) throws Exception {
		String dataReceived = new String(message.getPayload());
		System.out.println("ACTUATOR" + this.gestorconexiones.getIDcliente() + " | Receive data: " + dataReceived + " | Doing following action in consequence: actuando!");
	}

	public void deliveryComplete(IMqttDeliveryToken token) {
		// TODO Auto-generated method stub
		
	}
	
}
	[/file]
[/for]
[/template]




[template public generateActuatorTopic(anEnvironment : Environment)]
[comment @main/]
[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
	[file ('/' + actuator.name + actuator.id + '/src/main/java/actuator/Topic.java', false, 'UTF-8')]
package actuator;

public class Topic{
	String nombre;
	boolean suscribir;
	boolean publicar;
	
	public Topic(String nombre, boolean suscribir, boolean publicar) {
		super();
		this.nombre = nombre;
		this.suscribir = suscribir;
		this.publicar = publicar;
	}
	
	public String getNombre() {
		return nombre;
	}
	
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	
	public boolean isSuscribir() {
		return suscribir;
	}
	
	public void setSuscribir(boolean suscribir) {
		this.suscribir = suscribir;
	}
	
	public boolean isPublicar() {
		return publicar;
	}
	
	public void setPublicar(boolean publicar) {
		this.publicar = publicar;
	}
	
}
	[/file]
[/for]
[/template]




[template public generateActuatorMain(anEnvironment : Environment)]
[comment @main/]
[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
	[file ('/' + actuator.name + actuator.id + '/src/main/java/actuator/Main.java', false, 'UTF-8')]

package actuator;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.concurrent.ThreadLocalRandom;


public class Main {


	public static String getIpOfHost(String hostname, int format){
		BufferedReader reader;
		String ip="";
		boolean encontrado=false;
		int port=0;
		try {
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/tabladirecciones"))));

	    String line;
	    
			for (int i = 0; !encontrado && ((line = reader.readLine()) != null); i++)
			{
			  if(line.toLowerCase().equals(hostname.toLowerCase())) {
				  ip=reader.readLine();
				  encontrado=true;
				  port = i/2;
			  }
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    if(format==1) {
	    	ip = "tcp://"+ip+":"+String.valueOf(1883+port);
	    }else {
	    	if(format==2) {
		    	ip = ip+":"+String.valueOf(27017+port);
		    }
	    }
	        
	    return ip;
	}
	
	public static void main(String ['['/] ] args) throws UnknownHostException {
		List<Topic> Ltopic = new ArrayList<Topic>();
		Topic topic;
	[for(topic: Topic | actuator.publish_on_topic->union(actuator.suscribe_on_topic)->asOrderedSet())]	
		topic = new Topic("[topic.name/]", [if actuator.suscribe_on_topic->includes(topic) ] true [/if] [if actuator.suscribe_on_topic->includes(topic) = false ] false [/if], [if actuator.publish_on_topic->includes(topic) ] true [/if] [if actuator.publish_on_topic->includes(topic) = false ] false [/if]);
		Ltopic.add(topic);
	[/for]
		
		List<Broker> Lbroker = new ArrayList<Broker>();
		Broker broker;
	[for(fog : ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if fog.edge_node->filter(Actuator)->includes(actuator)]

		//FIWARE COMMENT broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883", Ltopic);
		broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[1883+i/]", Ltopic);
		Lbroker.add(broker);
		[/if]
	[/for]
	
		int randId = ThreadLocalRandom.current().nextInt(0, 9999999);
		GestorDeConexiones gestorconexiones = new GestorDeConexiones("[actuator.name + '_' + actuator.id/]_"+randId, Lbroker);
		gestorconexiones.Iniciar();
		Receiver receiver = new Receiver(gestorconexiones);
	}
}
	[/file]
[/for]
[/template]




[template public generateActuatorPom(anEnvironment : Environment)]
[comment @main/]
[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
	[file ('/' + actuator.name + actuator.id + '/pom.xml', false, 'UTF-8')]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>actuator</groupId>
  <artifactId>[actuator.name + actuator.id/]</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>[actuator.name + actuator.id/]</name>
  <url>http://maven.apache.org</url>

 <properties>
    <version.thorntail>2.4.0.Final</version.thorntail>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <failOnMissingWebXml>false</failOnMissingWebXml>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

<repositories>
    <repository>
        <id>Eclipse Paho Repo</id>
        <url>https://repo.eclipse.org/content/repositories/paho-releases/</url>
    </repository>
</repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
        <groupId>org.eclipse.paho</groupId>
        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
        <version>1.2.0</version>
    </dependency>
  </dependencies>
  
  <build>
      <plugins>
		  <plugin>
		    <groupId>io.thorntail</groupId>
		    <artifactId>thorntail-maven-plugin</artifactId>
		    <configuration>
			  <mainClass>actuator.Main</mainClass>
			</configuration>
		    <version>${version.thorntail}</version> 
		    <executions>
		      <execution>
		        <goals>
		          <goal>package</goal>
		        </goals>
		      </execution>
		    </executions>
		  </plugin>
		  <plugin>
	      	<groupId>com.spotify</groupId>
	      	<artifactId>docker-maven-plugin</artifactId>
	      	<version>1.2.0</version>
	      	<configuration>
	        <imageName>['localhost:5000/actuator-' + actuator.name.toLowerCase() + actuator.id.toString().toLowerCase()/]</imageName>
	        <baseImage>openjdk:11.0.11-jre-slim</baseImage>
	        <entryPoint>['['/]"java", "-jar", "/${project.build.finalName}-thorntail.jar"]</entryPoint>
	        <!-- copy the service's jar file from target into the root directory of the image --> 
	        <resources>
	           <resource>
	             <targetPath>/</targetPath>
	             <directory>${project.build.directory}</directory>
	             <include>${project.build.finalName}-thorntail.jar</include>
	           </resource>
	        </resources>
	      </configuration>
	    </plugin>
      </plugins>
  </build>
</project>
	[/file]
[/for]
[/template]

[template public selectArduinoActuatorObjectBatch(arduino : ArduinoConfiguration)]
[if arduino.deviceType=ArduinoDeviceType::LED]
TKLed led(O[arduino.output/]);				 // Creating the object 'led' (TKLed class) and giving the value to the desired output[/if]
[if arduino.deviceType=ArduinoDeviceType::HighPowerLED]
TKLed ledHP(O[arduino.output/]);			 // Creating the object 'ledHP' (TKLed class) and giving the value to the desired output[/if]
[if arduino.deviceType=ArduinoDeviceType::Mosfet]
TKMosFet mos(O[arduino.output/]);			 // Creating the object 'mos' (TKMosFet class) and giving the value to the desired output[/if]
[if arduino.deviceType=ArduinoDeviceType::Relay]
TKRelay relay(O[arduino.output/]);			 // Creating the object 'relay' (TKRelay class) and giving the value to the desired output[/if]
[/template]

[template public selectArduinoActuatorFunctionBatch(arduino : ArduinoConfiguration)]
[if arduino.deviceType=ArduinoDeviceType::LED]
led.on();
delay(1000);
led.off();[/if]
[if arduino.deviceType=ArduinoDeviceType::HighPowerLED]
ledHP.on();
delay(1000);
ledHP.off();[/if]
[if arduino.deviceType=ArduinoDeviceType::Mosfet]
mos.write(payload);[/if]
[if arduino.deviceType=ArduinoDeviceType::Relay]
relay.on();
delay(1000);
relay.off();[/if]
[/template]

[template public generateActuatorIno(anEnvironment : Environment)]
[comment @main/]
[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
	[if actuator.hil_node_configuration->filter(Arduino) -> size() > 0]
		[file ('/' + actuator.name + actuator.id + '/' + actuator.name + actuator.id + '.ino', false, 'UTF-8')]
// --------------------------------------------------------------------------------------------------------------------------------

#include <TinkerKit.h>
#include <PubSubClient.h>
#include <YunClient.h>

// --------------------------------------------------------------------------------------------------------------------------------

			[for (fogNode : FogNode | actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
				[if (fogNode.hil_node_configuration->filter(Raspberry)->size() > 0)]
#define MQTT_HOST_[fogNode.name.replaceAll('_','')/][fogNode.id/] "[fogNode.hil_node_configuration->filter(Raspberry).IP/]"
				[/if]
			[if (fogNode.hil_node_configuration->filter(Raspberry)->size() < 1)]
#define MQTT_HOST_[fogNode.name.replaceAll('_','')/][fogNode.id/] "IPv4_WiFi_PC"
				[/if]
			[/for]

			[if actuator.suscribe_on_topic ->size() > 0]
				[for (topic : Topic | actuator.suscribe_on_topic)]
#define TOPIC_[topic.name.replaceAll('_','')/] "[topic.name/]"
				[/for]
			[/if]

#define SERIAL 9600
			[for (fogNode : FogNode | actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
				[if (fogNode.hil_node_configuration->filter(Raspberry)->size() > 0)]
#define PORT_[fogNode.name.replaceAll('_','')/][fogNode.id/] "Mosquitto_PORT"
				[/if]
			[/for]

// --------------------------------------------------------------------------------------------------------------------------------

boolean connected = false;	 // Toggle connected variable to check if MQTT is running
			[for (configuration : ArduinoConfiguration | actuator.hil_node_configuration->filter(Arduino).arduinoconfiguration->sortedBy(output))]
[configuration.selectArduinoActuatorObjectBatch()/]
			[/for]               

// --------------------------------------------------------------------------------------------------------------------------------

void callback(char* topic, byte* payload, unsigned int length) {
  // Handle message arrived (read the actuator value)
  			[for (configuration : ArduinoConfiguration | actuator.hil_node_configuration->filter(Arduino).arduinoconfiguration->sortedBy(output))]
  [configuration.selectArduinoActuatorFunctionBatch()/]
  			[/for]   
}

// --------------------------------------------------------------------------------------------------------------------------------

YunClient yun;
			[for (fogNode : FogNode | actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
PubSubClient mqtt_[fogNode.name.replaceAll('_','')/][fogNode.id/](MQTT_HOST_[fogNode.name.replaceAll('_','')/][fogNode.id/], PORT_[fogNode.name.replaceAll('_','')/][fogNode.id/], callback, yun);
			[/for]

// --------------------------------------------------------------------------------------------------------------------------------

void connectMQTT(){
  while(!connected){
    if ([for (fogNode : FogNode | actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)) separator(' and ')]mqtt_[fogNode.name.replaceAll('_','')/][fogNode.id/].connect("actuator[actuator.id/]_[fogNode.name.replaceAll('_','')/][fogNode.id/]")[/for]) {
    		[if actuator.suscribe_on_topic ->size() > 0]
				[for (n: Integer | Sequence {1..actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)->size()})]
					[for (topic : Topic | actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)->at(n).create_topic->intersection(actuator.suscribe_on_topic)->sortedBy(name))]
	  mqtt_[actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)->at(n).name/][actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)->at(n).id/].subscribe(TOPIC_[topic.name.replaceAll('_','')/]);		
					[/for]
				[/for]
			[/if]
      connected = true;
    }
    else {
      // Wait 5000 milliseconds before trying to connect again
	  delay(5000);    
    }
  }
}

void setup() {
  Serial.begin(SERIAL); // Initialize serial communications at 9600 bps
  Bridge.begin();
  connectMQTT();
}

// --------------------------------------------------------------------------------------------------------------------------------

void loop() {
  if ([for (fogNode : FogNode | actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name)) separator(' or ')]!mqtt_[fogNode.name.replaceAll('_','')/][fogNode.id/].connected()[/for]) {
    connected = false;
    connectMQTT();
  }
  else {
    // Wait 5000 milliseconds before the next loop
    delay(5000);
  }
  			[for (fogNode : FogNode | actuator.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
  mqtt_[fogNode.name.replaceAll('_','')/][fogNode.id/].loop(); 
			[/for]                 
}

// --------------------------------------------------------------------------------------------------------------------------------
		[/file]
	[/if]
[/for]
[/template]

[comment ----------END OF ACTUATOR----------------------------------------------------------------------------------------------/]




[comment ----------FOG NODE-----------------------------------------------------------------------------------------------------/]

[template public generateFogBroker(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/Fog/Broker.java', false, 'UTF-8')]
package Fog;

import java.util.List;

public class Broker{
	String url;
	List<Topic> Ltopic;
	
	public Broker(String url, List<Topic> ltopic) {
		super();
		this.url = url;
		Ltopic = ltopic;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public List<Topic> getLtopic() {
		return Ltopic;
	}

	public void setLtopic(List<Topic> ltopic) {
		Ltopic = ltopic;
	}

	
}
	[/file]
[/for]
[/template]




[template public generateFogGestorDeConexiones(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/Fog/GestorDeConexiones.java', false, 'UTF-8')]
package Fog;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions; 
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttSecurityException;

public class GestorDeConexiones {
	private String IDcliente;
	private List<Broker> Lbroker;
	private List<MqttClient> Lclient;
	
	public GestorDeConexiones(String IDcliente, List<Broker> Lbroker) {
		this.IDcliente = IDcliente;
		this.Lbroker = Lbroker;
		Lclient = new ArrayList<MqttClient>();
	}
	
	public void Iniciar (){
		MqttClient myClient = null;
		MqttConnectOptions connOpt;
		
		connOpt = new MqttConnectOptions();
		connOpt.setCleanSession(true);
		connOpt.setKeepAliveInterval(30);

		for(int i=0; i<Lbroker.size(); i++) {
			while(!connectClient(i, connOpt)) {
				try {
					TimeUnit.SECONDS.sleep(3);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
						
			for(int j=0; j<Lbroker.get(i).getLtopic().size(); j++) {
				if(Lbroker.get(i).getLtopic().get(j).isSuscribir()) {
					try {
						Lclient.get(i).subscribe(Lbroker.get(i).getLtopic().get(j).getNombre(), 0);
					} catch (MqttException e) {
						e.printStackTrace();
					}
				}
			}
		}
		
		Thread tconnhealthmonitor = new Thread(new Runnable() {
		    @Override
		    public void run() {
		        connectionHealthMonitor();
		    }
		});  
		tconnhealthmonitor.start();
	}
	
	public String getIDcliente() {
		return IDcliente;
	}

	public void setIDcliente(String iDcliente) {
		IDcliente = iDcliente;
	}

	public List<Broker> getLbroker() {
		return Lbroker;
	}

	public void setLbroker(List<Broker> lbroker) {
		Lbroker = lbroker;
	}

	public List<MqttClient> getLclient() {
		return Lclient;
	}

	public void setLclient(List<MqttClient> lclient) {
		Lclient = lclient;
	}
	
	public MqttClient getClientByTopicName(String topicName) {
		MqttClient client = null;
		boolean find=false;
		
		for(int i=0; i<Lbroker.size() && !find; i++) {
			for(int j=0; j<Lbroker.get(i).getLtopic().size() && !find; j++) {
				if(Lbroker.get(i).getLtopic().get(j).getNombre().equals(topicName)) {
					for(int k=0; k<Lclient.size() && !find; k++) {
						if(Lclient.get(k).getServerURI().equals(Lbroker.get(i).getUrl())) {
							find=true;
							client = Lclient.get(k);
						}
					}
				}
			}
		}
		
		return client;
	}
	
	public Broker getBrokerByURI(String brokerURI) {
		boolean find = false;
		Broker broker = null;
		for(int i=0; i<Lbroker.size() && !find; i++) {
			if(Lbroker.get(i).getUrl() == brokerURI) {
				find = true;
				broker = Lbroker.get(i);
			}
		}
		return broker;
	}
	
	public boolean connectClient(int clientIndex, MqttConnectOptions connOpt) {
		boolean connected = false;
		MqttClient myClient;
		
		try {
			myClient = new MqttClient(Lbroker.get(clientIndex).getUrl(), this.IDcliente);
			myClient.connect(connOpt);
			Lclient.add(myClient);
			System.out.println("Connected to " + Lbroker.get(clientIndex).getUrl());
			connected = true;
		} catch (MqttException e) {
				System.out.println("PROBLEMs connectting to " + Lbroker.get(clientIndex).getUrl() + ", waiting 3 seconds for the next connection attempt");
		}
		return connected;			
	}
	
	public void reconnectClient(MqttClient myClient) {
		
		while (!myClient.isConnected()) {
			try {
				myClient.reconnect();
			} catch (MqttException e) {
				System.out.println("PROBLEMs reconnectting to " + myClient.getServerURI() + ", waiting 3 seconds for the next reconnection attempt");
				try {
					TimeUnit.SECONDS.sleep(3);
				} catch (InterruptedException e2) { 
					e2.printStackTrace();
				}
			}
			
			if(myClient.isConnected()) {
				System.out.println("Client reconnected to: " + myClient.getServerURI());
				System.out.println("Resubscribing to topics...");
				Broker broker = getBrokerByURI(myClient.getServerURI());
				for(int i=0; i < broker.getLtopic().size(); i++) {
					if(broker.getLtopic().get(i).isSuscribir()) {
						try {
							myClient.subscribe(broker.getLtopic().get(i).getNombre(), 0);
						} catch (MqttException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
	}
	
	// This method is designed as a thread to monitor the connection health and attempt to reconnect if it is lost.
	public void connectionHealthMonitor() {
		while (true) {
			for (int i = 0; i < this.Lclient.size(); i++) {
				reconnectClient(this.Lclient.get(i));
			}
			try {
				TimeUnit.SECONDS.sleep(3);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	
}
	[/file]
[/for]
[/template]




[template public generateFogMongoGestor(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/Fog/MongoGestor.java', false, 'UTF-8')]
package Fog;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.bson.Document;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Iterator;

public class MongoGestor {
    private MongoClient mongoCliente;
    private MongoDatabase baseDeDatos;
    private String fogID;
    
    public MongoGestor(String fogID, String connectionString) {
        this.fogID = fogID;
        //this.mongoCliente = createClient(mongourl);
        this.mongoCliente = connectToMongo(connectionString);
        this.baseDeDatos = this.mongoCliente.getDatabase("Fog_Node_" + fogID);
    }
    
    public MongoClient connectToMongo(String connectionString) {
        MongoClient mongoClient = MongoClients.create(connectionString);
        Iterator<String> databaseIterator = mongoClient.listDatabaseNames().iterator();
        if (databaseIterator.hasNext()) {
            System.out.println("Connected to MongoDB.");
            
            // You can access a specific database if needed
            //MongoDatabase database = mongoClient.getDatabase("your_database_name");
        } else {
            System.out.println("Failed to connect to MongoDB.");
        }
        
        return mongoClient;
    }
    
    public void appendDocument(String message, String collection) {
        MongoCollection<Document> collect = baseDeDatos.getCollection(collection);
        Document dato = new Document();
        dato.append("value", message);
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy h:mm:ss a");
        String formattedDate = sdf.format(date);
        dato.append("timeStamp", formattedDate);
        collect.insertOne(dato);
    }
    
    public void appenJsonDocument(String json, String topic) {
        Document dbObject = Document.parse(json);
        MongoCollection<Document> collect = baseDeDatos.getCollection(topic);
        collect.insertOne(dbObject);
    }
    
    public MongoClient getMongoCliente() {
        return mongoCliente;
    }
    
    public void setMongoCliente(MongoClient mongoCliente) {
        this.mongoCliente = mongoCliente;
    }
    
    public MongoDatabase getBaseDeDatos() {
        return baseDeDatos;
    }
    
    public void setBaseDeDatos(MongoDatabase baseDeDatos) {
        this.baseDeDatos = baseDeDatos;
    }
    
    public String getFogID() {
        return fogID;
    }
    
    public void setFogID(String fogID) {
        this.fogID = fogID;
    }
    
    private MongoClient createClient(String mongourl) {
        return MongoClients.create(mongourl);
    }
}
	[/file]
[/for]
[/template]




[template public generateFogPublisher(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/Fog/Publisher.java', false, 'UTF-8')]
package Fog;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttTopic;

public class Publisher {
	
	public void Publish(String pubMessage, String topic, MqttClient myClient) {
		MqttTopic myTopic = myClient.getTopic(topic);
		int pubQoS = 0;
		MqttMessage message = new MqttMessage(pubMessage.getBytes());
		message.setQos(pubQoS);
		message.setRetained(false);
		// Publish the message
		System.out.println("FOG | Publishing data: " + pubMessage + " | To topic: " + myTopic );		MqttDeliveryToken token = null;
		try {
			// publish message to broker
			token = myTopic.publish(message);
	    	// Wait until the message has been delivered to the broker
//			token.waitForCompletion();
			Thread.sleep(100);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
	[/file]
[/for]
[/template]




[template public generateFogReceiver(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/Fog/Receiver.java', false, 'UTF-8')]
package Fog;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.json.JSONArray;
import org.json.JSONObject;

public class Receiver implements MqttCallback{
	private Publisher pub;
	private GestorDeConexiones gestorconexiones;
	private MongoGestor mongogestor;
	private String FogUrl;
	private boolean redirect;
	
	public Receiver(GestorDeConexiones gestorconexiones, Publisher pub, String FogUrl, MongoGestor mongogestor, boolean redirect) {
		this.gestorconexiones = gestorconexiones;
		this.pub = pub;
		for( int i=0; i<this.gestorconexiones.getLclient().size(); i++) {
			this.gestorconexiones.getLclient().get(i).setCallback(this);
		}
		this.mongogestor = mongogestor;
		this.FogUrl = FogUrl;
		this.redirect = redirect;
	}

	public Receiver(GestorDeConexiones gestorconexiones, Publisher pub, String FogUrl , boolean redirect) {
		this.gestorconexiones = gestorconexiones;
		this.pub = pub;
		for( int i=0; i<this.gestorconexiones.getLclient().size(); i++) {
			this.gestorconexiones.getLclient().get(i).setCallback(this);
		}
		this.FogUrl = FogUrl;
		this.redirect = redirect;
	}

	public void connectionLost(Throwable cause) {
		// TODO Auto-generated method stub
		
	}
	
	public String getFogUrl() {		
		return this.FogUrl;
	}
	
	public void messageArrived(String topic, MqttMessage message) throws Exception {
		String dataReceived = new String(message.getPayload());
		
		if (topic.contentEquals("Fog")) {
			try {
			System.out.println("FOG " + this.gestorconexiones.getIDcliente() +" | Processing data to redirect: " + dataReceived);
			if(!this.redirect)
				RedirectToFog(dataReceived);
			mongogestor.appenJsonDocument(dataReceived, topic);
			}catch (Exception e) {
				System.out.println("Error en protocolo de redirecciÃ³n");
			}
			
		}else {
			System.out.println("FOG " + this.gestorconexiones.getIDcliente()+ " | Received data: " + dataReceived + " |From topic: " + topic );
			if(this.mongogestor != null) {
				mongogestor.appenJsonDocument(dataReceived, topic);
			}
		}
//		if(dataReceived.equals("hola"))
//			pub.Publish("recibido!", topic, gestorconexiones.getClientByTopicName(topic));
		//mongogestor.appendDocument(topic, dataReceived);
	}
	
	public void RedirectToFog(String message) {
		JSONObject jsonmessage = new JSONObject(message);
		JSONArray arr = jsonmessage.getJSONArray("route");
		boolean redirected = false;

		for (int i = 0; i<arr.length(); i++) {
			//System.out.println(this.FogUrl + " " + arr.getString(i));
			if(this.FogUrl.equals(arr.getString(i))) {
				for(int j=0; !redirected && j<gestorconexiones.getLbroker().size(); j++) {
					if(i+1 <  arr.length() && arr.get(i+1).equals(gestorconexiones.getLclient().get(j).getServerURI())) {
						//System.out.println("i "+arr.length());
						if(i+2 == arr.length()) {
							String topic = jsonmessage.getString("topic");
							System.out.println("FOG "  + this.gestorconexiones.getIDcliente() + " | Redirecting data on topic: " + topic + ", on destiny Fog: "+ arr.get(i+1));
							pub.Publish(message, topic, gestorconexiones.getLclient().get(j));
							redirected=true;
						}else {
							System.out.println("FOG "  + this.gestorconexiones.getIDcliente() + " | Redirecting to intermidiary Fog: "+gestorconexiones.getLclient().get(j).getServerURI());
							pub.Publish(message, "Fog", gestorconexiones.getLclient().get(j));
							redirected=true;
						}
					}
				}
			}
		}
		
		if(!redirected) {
			if(arr.length()>0){
				if(!this.FogUrl.equals(arr.get(arr.length()-1))){
					System.out.println("FOG "  + this.gestorconexiones.getIDcliente() + " | Nodo Fog siguiente en ruta no comunicado con nodo Fog actual, eliminando registro...");
				}
			}
		}
		
	}
	
	
	public void deliveryComplete(IMqttDeliveryToken token) {
		// TODO Auto-generated method stub
		
	}
}

	[/file]
[/for]
[/template]




[template public generateFogRedirection(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/Fog/Redirection.java', false, 'UTF-8')]
package Fog;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONObject;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import org.bson.Document;

public class Redirection implements Runnable {
    GestorDeConexiones gestordeconexiones;
    MongoGestor mongogestor;
    Receiver receiv;
    int redirectionTime;

    Redirection(int redirectionTime, GestorDeConexiones gestordeconexiones, MongoGestor mongogestor, Receiver receiv) {
        this.redirectionTime = redirectionTime;
        this.gestordeconexiones = gestordeconexiones;
        this.mongogestor = mongogestor;
        this.receiv = receiv;
    }

    public void run() {
        List<String> lroute = new ArrayList<String>();
        boolean redirectionable = false;
        JSONArray arr = null;

        while (true) {
            System.out.println("Iterating in Redirection");
            MongoCollection<Document> collection = mongogestor.getBaseDeDatos().getCollection("FogCollection");
            MongoCursor<Document> cursor = collection.find().iterator();

            while (cursor.hasNext()) {
                Document document = cursor.next();
                try {
                    JSONObject jsonmessage = new JSONObject(document.toJson());
                    redirectionable = true;
                    System.out.println(document.toJson());
                    arr = jsonmessage.getJSONArray("route");
                } catch (Exception e) {
                    System.out.println("Record without redirection format, skipping to the next element...");
                    redirectionable = false;
                }
                if (redirectionable) {
                    receiv.RedirectToFog(document.toJson());
                    if (!receiv.getFogUrl().equals(arr.get(arr.length() - 1))) {
                        collection.deleteOne(document);
                    }
                }
            }

            try {
                Thread.sleep((int) (this.redirectionTime * 1000 / [anEnvironment.simulationSpeed/]));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
	[/file]
[/for]
[/template]




[template public generateFogTopic(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/Fog/Topic.java', false, 'UTF-8')]
package Fog;

public class Topic{
	String nombre;
	boolean suscribir;
	boolean publicar;
	
	public Topic(String nombre, boolean suscribir, boolean publicar) {
		super();
		this.nombre = nombre;
		this.suscribir = suscribir;
		this.publicar = publicar;
	}
	
	public String getNombre() {
		return nombre;
	}
	
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	
	public boolean isSuscribir() {
		return suscribir;
	}
	
	public void setSuscribir(boolean suscribir) {
		this.suscribir = suscribir;
	}
	
	public boolean isPublicar() {
		return publicar;
	}
	
	public void setPublicar(boolean publicar) {
		this.publicar = publicar;
	}
	
}
	[/file]
[/for]
[/template]

[template public generateFogMain(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/Fog/Main.java', false, 'UTF-8')]
package Fog;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {


	public static String getIpOfHost(String hostname, int format){
		BufferedReader reader;
		String ip="";
		boolean encontrado=false;
		int port=0;
		try {
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/tabladirecciones"))));

	    String line;
	    
			for (int i = 0; !encontrado && ((line = reader.readLine()) != null); i++)
			{
			  if(line.toLowerCase().equals(hostname.toLowerCase())) {
				  ip=reader.readLine();
				  encontrado=true;
				  port = i/2;
			  }
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    if(format==1) {
	    	ip = "tcp://"+ip+":"+String.valueOf(1883+port);
	    }else {
	    	if(format==2) {
		    	ip = ip+":"+String.valueOf(27017+port);
		    }
	    }
	        
	    return ip;
	}
	
	public static void main(String ['['/] ] args) throws UnknownHostException {	
		List<Topic> Ltopic = new ArrayList<Topic>();
		Topic topic;
		topic = new Topic("Fog", true, true);
		Ltopic.add(topic);
	[for(topic: Topic | fog.publish_on_topic->union(fog.suscribe_on_topic)->asOrderedSet())]	
		topic = new Topic("[topic.name/]", [if fog.suscribe_on_topic->includes(topic) ] true [/if] [if fog.suscribe_on_topic->includes(topic) = false ] false [/if], [if fog.publish_on_topic->includes(topic) ] true [/if] [if fog.publish_on_topic->includes(topic) = false ] false [/if]);
		Ltopic.add(topic);
	[/for]

		List<Broker> Lbroker = new ArrayList<Broker>();
		Broker broker;
		//FIWARE COMMENT broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883", Ltopic);
		broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[1883+i/]", Ltopic);
		Lbroker.add(broker);

		Ltopic = new ArrayList<Topic>();
	[for(fogredirect : ProcessNode | fog.redirect)]
		//FIWARE COMMENT broker = new Broker("tcp://mosquitto-[fogredirect.name.replaceAll('_','').toLowerCase()+fogredirect.id/]:1883", Ltopic);
		broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[1883+i/]", Ltopic);
		Lbroker.add(broker);
	[/for]

		GestorDeConexiones gestorconexiones = new GestorDeConexiones("[fog.name.replaceAll('_','') + '_' + fog.id/]", Lbroker);
		gestorconexiones.Iniciar();
		Publisher publisher = new Publisher();
	[if fog.redirectionTime<>null and  fog.redirectionTime > 0]
		//FIWARE COMMENT MongoGestor mongogestor = new MongoGestor("[fog.name.replaceAll('_','') + '_' + fog.id/]", "mongo-db-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:27017");
		MongoGestor mongogestor = new MongoGestor("[fog.name.replaceAll('_','') + '_' + fog.id/]", "mongodb://mongo-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[27017/]");
		//FIWARE COMMENT Receiver receiver = new Receiver(gestorconexiones, publisher, "tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883", mongogestor, [if fog.redirectionTime->oclIsUndefined() = true] false [/if] [if fog.redirectionTime->oclIsUndefined() = false]true[/if]);
		Receiver receiver = new Receiver(gestorconexiones, publisher, "tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[1883+i/]", mongogestor, [if fog.redirectionTime->oclIsUndefined() = true] false [/if] [if fog.redirectionTime->oclIsUndefined() = false]true[/if]);
		Redirection r = new Redirection([fog.redirectionTime/], gestorconexiones, mongogestor, receiver);
		r.run();
	[/if]
	[if fog.redirectionTime = 0 or fog.redirectionTime = null]
		[if fog.component->selectByKind(DataBase)->size()>0]
		//FIWARE COMMENT MongoGestor mongogestor = new MongoGestor("[fog.name.replaceAll('_','') + '_' + fog.id/]",  "mongo-db-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:27017"); 
		MongoGestor mongogestor = new MongoGestor("[fog.name.replaceAll('_','') + '_' + fog.id/]",  "mongodb://mongo-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[27017/]"); 
		//FIWARE COMMENT Receiver receiver = new Receiver(gestorconexiones, publisher, "tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883", mongogestor, false);
		Receiver receiver = new Receiver(gestorconexiones, publisher, "tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[1883+i/]", mongogestor, false);
		[/if]
		[if fog.component->selectByKind(DataBase)->size() = 0]
		//FIWARE COMMENT Receiver receiver = new Receiver(gestorconexiones, publisher, "tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883", false);
		Receiver receiver = new Receiver(gestorconexiones, publisher, "tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[1883+i/]", false);
		[/if]
	[/if]
	}
}
	[/file]
[/for]
[/template]




[template public generateFogPom(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/' + fog.name.replaceAll('_','') + fog.id + '/pom.xml', false, 'UTF-8')]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>Fog</groupId>
  <artifactId>[fog.name.replaceAll('_','') + fog.id/]</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>[fog.name.replaceAll('_','') + fog.id/]</name>
  <url>http://maven.apache.org</url>

  <properties>
    <version.thorntail>2.4.0.Final</version.thorntail>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <failOnMissingWebXml>false</failOnMissingWebXml>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

<repositories>
    <repository>
        <id>Eclipse Paho Repo</id>
        <url>https://repo.eclipse.org/content/repositories/paho-releases/</url>
    </repository>
</repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
        <groupId>org.eclipse.paho</groupId>
        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
        <version>1.2.0</version>
    </dependency>
   <!-- https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver -->
    <dependency>
        <groupId>org.mongodb</groupId>
        <artifactId>mongodb-driver-sync</artifactId>
        <version>4.9.1</version>
    </dependency>
	<!-- https://mvnrepository.com/artifact/org.json/json -->
	<dependency>
	    <groupId>org.json</groupId>
	    <artifactId>json</artifactId>
	    <version>20180813</version>
	</dependency>
  </dependencies>
  
      <build>
      <plugins>
		  <plugin>
		    <groupId>io.thorntail</groupId>
		    <artifactId>thorntail-maven-plugin</artifactId>
		    <configuration>
			  <mainClass>Fog.Main</mainClass>
			</configuration>
		    <version>${version.thorntail}</version> 
		    <executions>
		      <execution>
		        <goals>
		          <goal>package</goal>
		        </goals>
		      </execution>
		    </executions>
		  </plugin>
		  <plugin>
	      	<groupId>com.spotify</groupId>
	      	<artifactId>docker-maven-plugin</artifactId>
	      	<version>1.2.0</version>
	      	<configuration>
	        <imageName>['localhost:5000/' + fog.name.replaceAll('_','').toLowerCase() + fog.id.toString().toLowerCase()/]</imageName>
	        <baseImage>openjdk:11.0.11-jre-slim</baseImage>
	        <entryPoint>['['/]"java", "-jar", "/${project.build.finalName}-thorntail.jar"]</entryPoint>
	        <!-- copy the service's jar file from target into the root directory of the image --> 
	        <resources>
	           <resource>
	             <targetPath>/</targetPath>
	             <directory>${project.build.directory}</directory>
	             <include>${project.build.finalName}-thorntail.jar</include>
	           </resource>
	        </resources>
	      </configuration>
	    </plugin>
      </plugins>
  </build>
</project>

	[/file]
[/for]
[/template]

[comment ----------END OF FOG--------------------------------------------------------------------------------------------------/]




[comment ----------ESPER COMPONENT---------------------------------------------------------------------------------------------/]

[template public generateEsperBroker(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))] 
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
			[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/Broker.java', false, 'UTF-8')]
package EsperClient;

import java.util.List;

public class Broker{
	String url;
	List<Topic> Ltopic;
	
	public Broker(String url, List<Topic> ltopic) {
		super();
		this.url = url;
		Ltopic = ltopic;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public List<Topic> getLtopic() {
		return Ltopic;
	}

	public void setLtopic(List<Topic> ltopic) {
		Ltopic = ltopic;
	}
	
}
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperGestorDeConexiones(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
			[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/GestorDeConexiones.java', false, 'UTF-8')]
package EsperClient;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions; 
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttSecurityException;

public class GestorDeConexiones {
	private String IDcliente;
	private List<Broker> Lbroker;
	private List<MqttClient> Lclient;
	
	public GestorDeConexiones(String IDcliente, List<Broker> Lbroker) {
		this.IDcliente = IDcliente;
		this.Lbroker = Lbroker;
		Lclient = new ArrayList<MqttClient>();
	}
	
	public void Iniciar (){
		MqttClient myClient = null;
		MqttConnectOptions connOpt;
		
		connOpt = new MqttConnectOptions();
		connOpt.setCleanSession(true);
		connOpt.setKeepAliveInterval(30);

		for(int i=0; i<Lbroker.size(); i++) {
			while(!connectClient(i, connOpt)) {
				try {
					TimeUnit.SECONDS.sleep(3);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
						
			for(int j=0; j<Lbroker.get(i).getLtopic().size(); j++) {
				if(Lbroker.get(i).getLtopic().get(j).isSuscribir()) {
					try {
						Lclient.get(i).subscribe(Lbroker.get(i).getLtopic().get(j).getNombre(), 0);
					} catch (MqttException e) {
						e.printStackTrace();
					}
				}
			}
		}
		
		Thread tconnhealthmonitor = new Thread(new Runnable() {
		    @Override
		    public void run() {
		        connectionHealthMonitor();
		    }
		});  
		tconnhealthmonitor.start();
	}
	
	public String getIDcliente() {
		return IDcliente;
	}

	public void setIDcliente(String iDcliente) {
		IDcliente = iDcliente;
	}

	public List<Broker> getLbroker() {
		return Lbroker;
	}

	public void setLbroker(List<Broker> lbroker) {
		Lbroker = lbroker;
	}

	public List<MqttClient> getLclient() {
		return Lclient;
	}

	public void setLclient(List<MqttClient> lclient) {
		Lclient = lclient;
	}
	
	public MqttClient getClientByTopicName(String topicName) {
		MqttClient client = null;
		boolean find=false;
		
		for(int i=0; i<Lbroker.size() && !find; i++) {
			for(int j=0; j<Lbroker.get(i).getLtopic().size() && !find; j++) {
				if(Lbroker.get(i).getLtopic().get(j).getNombre().equals(topicName)) {
					for(int k=0; k<Lclient.size() && !find; k++) {
						if(Lclient.get(k).getServerURI().equals(Lbroker.get(i).getUrl())) {
							find=true;
							client = Lclient.get(k);
						}
					}
				}
			}
		}
		
		return client;
	}
	
	public Broker getBrokerByURI(String brokerURI) {
		boolean find = false;
		Broker broker = null;
		for(int i=0; i<Lbroker.size() && !find; i++) {
			if(Lbroker.get(i).getUrl() == brokerURI) {
				find = true;
				broker = Lbroker.get(i);
			}
		}
		return broker;
	}
	
	public boolean connectClient(int clientIndex, MqttConnectOptions connOpt) {
		boolean connected = false;
		MqttClient myClient;
		
		try {
			myClient = new MqttClient(Lbroker.get(clientIndex).getUrl(), this.IDcliente);
			myClient.connect(connOpt);
			Lclient.add(myClient);
			System.out.println("Connected to " + Lbroker.get(clientIndex).getUrl());
			connected = true;
		} catch (MqttException e) {
				System.out.println("PROBLEMs connectting to " + Lbroker.get(clientIndex).getUrl() + ", waiting 3 seconds for the next connection attempt");
		}
		return connected;			
	}
	
	public void reconnectClient(MqttClient myClient) {
		
		while (!myClient.isConnected()) {
			try {
				myClient.reconnect();
			} catch (MqttException e) {
				System.out.println("PROBLEMs reconnectting to " + myClient.getServerURI() + ", waiting 3 seconds for the next reconnection attempt");
				try {
					TimeUnit.SECONDS.sleep(3);
				} catch (InterruptedException e2) { 
					e2.printStackTrace();
				}
			}
			
			if(myClient.isConnected()) {
				System.out.println("Client reconnected to: " + myClient.getServerURI());
				System.out.println("Resubscribing to topics...");
				Broker broker = getBrokerByURI(myClient.getServerURI());
				for(int i=0; i < broker.getLtopic().size(); i++) {
					if(broker.getLtopic().get(i).isSuscribir()) {
						try {
							myClient.subscribe(broker.getLtopic().get(i).getNombre(), 0);
						} catch (MqttException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
	}
	
	// This method is designed as a thread to monitor the connection health and attempt to reconnect if it is lost.
	public void connectionHealthMonitor() {
		while (true) {
			for (int i = 0; i < this.Lclient.size(); i++) {
				reconnectClient(this.Lclient.get(i));
			}
			try {
				TimeUnit.SECONDS.sleep(3);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	
}
		[/file]
	[/if]
[/for]
[/template]



 
[template public generateEsperPublisher(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
			[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/Publisher.java', false, 'UTF-8')]
package EsperClient;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttTopic;

public class Publisher {
	
	public void Publish(String pubMessage, String topic, MqttClient myClient) {
	//	System.out.println("Publicando..");
		MqttTopic myTopic = myClient.getTopic(topic);
		int pubQoS = 0;
		MqttMessage message = new MqttMessage(pubMessage.getBytes());
		message.setQos(pubQoS);
		message.setRetained(false);
		// Publish the message
		System.out.println("ESPER | Publishing data: " + pubMessage + " | To topic: " + myTopic );
		MqttDeliveryToken token = null;
		try {
			// publish message to broker
			token = myTopic.publish(message);
	    	// Wait until the message has been delivered to the broker
			Thread.sleep(100);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperReceiver(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
			[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/Receiver.java', false, 'UTF-8')]
package EsperClient;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.json.JSONObject;

public class Receiver implements MqttCallback{
	Publisher pub;
	GestorDeConexiones gestorconexiones;
	EsperComponent espercomponent;
	
	public Receiver(GestorDeConexiones gestorconexiones, Publisher pub, EsperComponent esp) {
		this.gestorconexiones = gestorconexiones;
		this.pub = pub;
//		this.listener = new MyListener();
//		Configuration config = new Configuration();
//		this.epService = EPServiceProviderManager.getDefaultProvider(config);
		this.espercomponent = esp;
		for( int i=0; i<this.gestorconexiones.getLclient().size(); i++) {
			this.gestorconexiones.getLclient().get(i).setCallback(this);
		}
//		EsperEPL esper = new EsperEPL(epService, listener);
//		esper.run();
	}

	public void connectionLost(Throwable cause) {
		// TODO Auto-generated method stub
		
	}

	public void messageArrived(String topic, MqttMessage message) throws Exception {
		String dataReceived = new String(message.getPayload());
		System.out.println("ESPER " + this.gestorconexiones.getIDcliente()+ " | Received data: " + dataReceived + " |From topic: " + topic );
		
		JSONObject jsonmessage = new JSONObject(dataReceived);
		String value = jsonmessage.getString("value");

		//System.out.println(value.toString());
		messageToEsper(value, topic);

		
	}
	
	public void messageToEsper(String message, String topic) {
		Event event = null;
		[for (topic: Topic | fog.component->selectByKind(ProcessEngine).rule.apply_to->asOrderedSet())]
		if(topic.equals("[topic.name/]")){
			[for (rule: Rule | fog.component->selectByKind(ProcessEngine).rule)]
				[for (topicrule: Topic | rule.apply_to)]
					[if topicrule.name.equalsIgnoreCase(topic.name)]
			event = new [rule.eventType/](Integer.parseInt(message));
			espercomponent.getEpService().getEPRuntime().sendEvent(event);
					[/if]
				[/for]
			[/for]	
		}
		[/for]

	}

	public void deliveryComplete(IMqttDeliveryToken token) {
		// TODO Auto-generated method stub
		
	}
}
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperTopic(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
			[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/Topic.java', false, 'UTF-8')]
package EsperClient;

public class Topic{
	String nombre;
	boolean suscribir;
	boolean publicar;
	
	public Topic(String nombre, boolean suscribir, boolean publicar) {
		super();
		this.nombre = nombre;
		this.suscribir = suscribir;
		this.publicar = publicar;
	}
	
	public String getNombre() {
		return nombre;
	}
	
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	
	public boolean isSuscribir() {
		return suscribir;
	}
	
	public void setSuscribir(boolean suscribir) {
		this.suscribir = suscribir;
	}
	
	public boolean isPublicar() {
		return publicar;
	}
	
	public void setPublicar(boolean publicar) {
		this.publicar = publicar;
	}
	
}
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperEvents(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
			[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/Event.java', false, 'UTF-8')]
package EsperClient;

public class Event {
	  private int value;

	  public Event(int value) {
	    this.value = value;
	  }

	  public int getValue() {
	    return this.value;
	  }
}
		[/file]
	[/if]
[/for]

[for (fog : ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[for (fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule.eventType->asOrderedSet())]
		[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/' + self + '.java', false, 'UTF-8')]
package EsperClient;

public class [self/] extends Event{

	public [self/](int value) {
		super(value);
		// TODO Auto-generated constructor stub
	}
}
		[/file]
	[/for]
[/for]
[/template]




[template public generateEsperEsperEPL(anEnvironment : Environment)]
[comment @main/]
[for (fog : ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
		[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/EsperEPL.java', false, 'UTF-8')]
package EsperClient;

import java.util.ArrayList;
import java.util.List;

import com.espertech.esper.client.EPServiceProvider;
import com.espertech.esper.client.EPStatement;
import EsperClient.MyListener;

public class EsperEPL {
	 EPServiceProvider epService;
	 List<MyListener> lListener;
	 
	 public EsperEPL(EPServiceProvider epService, List<RuleManager> lTopicRules) {
		 this.epService = epService;
		 lListener = new ArrayList<MyListener>();
		 initListeners(lTopicRules);
		 //MyListener listener = new MyListener("Hola", "temperatura");
	 }
	 
	 public void initListeners(List<RuleManager> ltopicRules) {
		 MyListener listener;
		 for (int i = 0; i < ltopicRules.size(); i++) {
			listener = new MyListener(ltopicRules.get(i));
			this.lListener.add(listener);
		}
	 }

	 public void run() {
	  // Creating a Statement
	  //String expression = "select Math.max(2, 3) as mymax, avg(price) from Esper1.OrderEvent.win:time(30 sec)";
		 for (int i = 0; i < this.lListener.size(); i++) {
			 EPStatement statement = epService.getEPAdministrator().createEPL(lListener.get(i).getTrules().getRule());
			 statement.addListener(lListener.get(i));
		}
	  
//	  statement = epService.getEPAdministrator().createEPL("select value from Events.LightEvent where value < 5");
////	  // Adding a Listener
//	  statement.addListener(listener2);
	
	  // Sending events
	//	      OrderEvent event = new OrderEvent("shirt", 74.50);
	//	      epService.getEPRuntime().sendEvent(event);
	}
	 
	 
}
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperRuleManager(anEnvironment : Environment)]
[comment @main/]
[for (fog : ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
		[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/RuleManager.java', false, 'UTF-8')]
package EsperClient;

import java.util.List;

import org.eclipse.paho.client.mqttv3.MqttClient;

public class RuleManager {
	String Rule;
	String message;
	List<String> lInputTopic;
	List<String> lOutputTopic;
	MqttClient client;
	
	public RuleManager(String Rule, String message, MqttClient client, List<String> lInputTopic, List<String> lOutputTopic) {
		this.Rule = Rule;
		this.message = message;
		this.lInputTopic = lInputTopic;
		this.lOutputTopic = lOutputTopic;
		this.client = client;
	}

	public String getRule() {
		return Rule;
	}

	public void setRule(String rule) {
		Rule = rule;
	}

	public List<String> getlInputTopic() {
		return lInputTopic;
	}

	public void setlInputTopic(List<String> lInputTopic) {
		this.lInputTopic = lInputTopic;
	}

	public List<String> getlOutputTopic() {
		return lOutputTopic;
	}

	public void setlOutputTopic(List<String> lOutputTopic) {
		this.lOutputTopic = lOutputTopic;
	}

	public MqttClient getClient() {
		return client;
	}

	public void setClient(MqttClient client) {
		this.client = client;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}
		
}
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperEsperComponent(anEnvironment : Environment)]
[comment @main/]
[for (fog : ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
		[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/EsperComponent.java', false, 'UTF-8')]
package EsperClient;

import java.util.List;

import com.espertech.esper.client.Configuration;
import com.espertech.esper.client.EPServiceProvider;
import com.espertech.esper.client.EPServiceProviderManager;

public class EsperComponent {
	private EPServiceProvider epService;
	private EsperEPL esper;
	
	public EsperComponent(List<RuleManager> lTopicRules) {
		Configuration config = new Configuration();
		epService = EPServiceProviderManager.getDefaultProvider(config);
		esper = new EsperEPL(epService, lTopicRules);
		esper.run();
		System.out.println("Esper running...");
	}

	public EPServiceProvider getEpService() {
		return epService;
	}

	public void setEpService(EPServiceProvider epService) {
		this.epService = epService;
	}		
}
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperMyListeners(anEnvironment : Environment)]
[comment @main/]
[for (fog : ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
		[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/MyListener.java', false, 'UTF-8')]
package EsperClient;

import com.espertech.esper.client.EventBean;
import com.espertech.esper.client.UpdateListener;
import EsperClient.Publisher;

public class MyListener implements UpdateListener{
	Publisher publisher;
	RuleManager trules;
	
	public MyListener(RuleManager trules) {
		this.publisher = new Publisher();
		this.trules = trules;
	}
	
	
	public RuleManager getTrules() {
		return trules;
	}


	public void setTrules(RuleManager trules) { 
		this.trules = trules;
	}


	
	public void update(EventBean['['/]] newEvents, EventBean['['/]] oldEvents) {
		EventBean event = newEvents['['/]0];
//		System.out.println("Hiiiii");
		//System.out.println(gestorconexiones.getClientByTopicName(Topic));
		for (int i = 0; i < this.trules.getlOutputTopic().size(); i++) {
			publisher.Publish(trules.getMessage(), trules.getlOutputTopic().get(i), trules.getClient());
		}
		//System.out.println("Publishing Data");
		//System.out.println("illuminance=" + event.get("illuminance"));
	}
}
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperMain(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule->size()>0]
		[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/java/EsperClient/Main.java', false, 'UTF-8')]
package EsperClient;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import com.espertech.esper.client.EPServiceProvider;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {


	public static String getIpOfHost(String hostname, int format){
		BufferedReader reader;
		String ip="";
		boolean encontrado=false;
		int port=0;
		try {
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/tabladirecciones"))));

	    String line;
	    
			for (int i = 0; !encontrado && ((line = reader.readLine()) != null); i++)
			{
			  if(line.toLowerCase().equals(hostname.toLowerCase())) {
				  ip=reader.readLine();
				  encontrado=true;
				  port = i/2;
			  }
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    if(format==1) {
	    	ip = "tcp://"+ip+":"+String.valueOf(1883+port);
	    }else {
	    	if(format==2) {
		    	ip = ip+":"+String.valueOf(27017+port);
		    }
	    }
	        
	    return ip;
	}
	
	public static void main(String ['['/] ] args) throws UnknownHostException {
		List<Topic> Ltopic = new ArrayList<Topic>();
		Topic topic;
		[for(topic: Topic | (fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule.apply_to->union(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule.generates_notification->filter(TopicNotification).publish_on_topic))->asOrderedSet())]
		topic = new Topic("[topic.name/]", [if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule.apply_to->includes(topic)]true[/if][if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule.apply_to->includes(topic) = false]false[/if], [if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule.generates_notification->filter(TopicNotification).publish_on_topic->includes(topic)]true[/if][if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule.generates_notification->filter(TopicNotification).publish_on_topic->includes(topic) = false]false[/if]);
		Ltopic.add(topic);
		[/for]
		
		List<Broker> Lbroker = new ArrayList<Broker>();
		//FIWARE COMMENT Broker broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883", Ltopic);
		Broker broker = new Broker("tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:[1883+i/]", Ltopic);

		Lbroker.add(broker);

		GestorDeConexiones gestorconexiones = new GestorDeConexiones("[fog.name.replaceAll('_','') + '_EsperComponent'/]", Lbroker);
		gestorconexiones.Iniciar();
		Publisher publisher = new Publisher();

		List<RuleManager> lTopicRules = new ArrayList<RuleManager>();
		List<String> inputTopics  = new ArrayList<String>();
		List<String> outputTopics  = new ArrayList<String>();
		[for(rule: Rule | fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule)]
			[if i > 0]
		inputTopics  = new ArrayList<String>();
		outputTopics  = new ArrayList<String>();
			[/if]
			[for(topic: Topic | rule.apply_to)]
		inputTopics.add("[topic.name/]");
			[/for]
			[for(topic: Topic | rule.generates_notification->filter(TopicNotification).publish_on_topic)]
		outputTopics.add("[topic.name/]");
			[/for]
		lTopicRules.add(new RuleManager("[rule.rule/]", "[rule.generates_notification.message/]", gestorconexiones.getLclient().get(0), inputTopics, outputTopics));
		[/for]
		
		EsperComponent esp = new EsperComponent(lTopicRules);
		Receiver receiver = new Receiver(gestorconexiones, publisher, esp);
	}
}	
		[/file]
	[/if]
[/for]
[/template]




[template public generateEsperPom(anEnvironment : Environment)]
[comment @main/]
[for (fog : ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
		[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/pom.xml', false, 'UTF-8')]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>Fog</groupId>
  <artifactId>[fog.name.replaceAll('_','') + fog.id/]</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>[fog.name.replaceAll('_','') + fog.id/]</name>
  <url>http://maven.apache.org</url>

   <properties>
    <version.thorntail>2.4.0.Final</version.thorntail>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <failOnMissingWebXml>false</failOnMissingWebXml>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

<repositories>
    <repository>
        <id>Eclipse Paho Repo</id>
        <url>https://repo.eclipse.org/content/repositories/paho-releases/</url>
    </repository>
</repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
        <groupId>org.eclipse.paho</groupId>
        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
        <version>1.2.0</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.antlr/antlr4-runtime -->
	<dependency>
	    <groupId>org.antlr</groupId>
	    <artifactId>antlr4-runtime</artifactId>
	    <version>4.7.1</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-api</artifactId>
	    <version>1.7.25</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.codehaus.janino/janino -->
	<dependency>
	    <groupId>org.codehaus.janino</groupId>
	    <artifactId>janino</artifactId>
	    <version>3.0.10</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.codehaus.janino/commons-compiler -->
	<dependency>
	    <groupId>org.codehaus.janino</groupId>
	    <artifactId>commons-compiler</artifactId>
	    <version>3.0.10</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.espertech/esper -->
	<dependency>
	    <groupId>com.espertech</groupId>
	    <artifactId>esper</artifactId>
	    <version>7.1.0</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.espertech/esper-compiler -->
	<dependency>
	    <groupId>com.espertech</groupId>
	    <artifactId>esper-compiler</artifactId>
	    <version>8.0.0</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.espertech/esper-runtime -->
	<dependency>
	    <groupId>com.espertech</groupId>
	    <artifactId>esper-runtime</artifactId>
	    <version>8.0.0</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
	<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-shade-plugin -->
	<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-assembly-plugin -->
	<dependency>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-assembly-plugin</artifactId>
	    <version>3.1.1</version>
	</dependency>
	<dependency>
	    <groupId>org.json</groupId>
	    <artifactId>json</artifactId>
	    <version>20180813</version>
	</dependency>
  </dependencies>
  
  <build>
      <plugins>
	    <plugin>
	      <artifactId>maven-assembly-plugin</artifactId>
	      <configuration>
	        <archive>
	          <manifest>
	            <mainClass>EsperClient.Main</mainClass>
	          </manifest>
	        </archive>
	        <descriptorRefs>
	          <descriptorRef>jar-with-dependencies</descriptorRef>
	        </descriptorRefs>
	      </configuration>
	    </plugin>
	    <plugin>
	      	<groupId>com.spotify</groupId>
	      	<artifactId>docker-maven-plugin</artifactId>
	      	<version>1.2.0</version>
	      	<configuration>
	        <imageName>['localhost:5000/esper-' + fog.name.replaceAll('_','').toLowerCase() + fog.id.toString().toLowerCase()/]</imageName>
	        <baseImage>openjdk:11.0.11-jre-slim</baseImage>
	        <entryPoint>['['/]"java", "-jar", "/${project.build.finalName}-jar-with-dependencies.jar"]</entryPoint>
	        <!-- copy the service's jar file from target into the root directory of the image --> 
	        <resources>
	           <resource>
	             <targetPath>/</targetPath>
	             <directory>${project.build.directory}</directory>
	             <include>${project.build.finalName}-jar-with-dependencies.jar</include>
	           </resource>
	        </resources>
	      </configuration>
	    </plugin>
      </plugins>
  </build>
</project>
		[/file]
	[/if]
[/for]
[/template]
[comment ----------END OF FOG--------------------------------------------------------------------------------------------------/]




[comment ----------WSO2 COMPONENT----------------------------------------------------------------------------------------------/]

[template public generateWSO2Component(anEnvironment : Environment)]
[comment @main/]
[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
	[for(rule: Rule | fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule)]
		[file ('/WSO2/' + fog.name.replaceAll('_','') + '_' + rule.id + '.siddhi', false, 'UTF-8')]

@App:name("[fog.name.replaceAll('_','') + 'WSO2'/]")

@source(type='mqtt', url= 'fogIP',topic='[rule.apply_to/]', @map(type='json'))
define stream SweetProductionStream (value int);

@sink(type='mqtt', url= 'fogIP',topic='Rule_[rule.apply_to/]', @map(type='text', @payload("""{ "value" : "{{value}}", "topic" : "actuatorradiador", "route" : ['['/] "tcp://158.49.245.181:1883", "tcp://158.49.245.$
define stream LowProductionAlertStream (value int);

@info(name='query1')
from SweetProductionStream ['['/][rule.rule/]]
select value
insert into LowProductionAlertStream;
		[/file] 
	[/for]
[/for]
[/template]

[comment ----------WSO2 COMPONENT END-------------------------------------------------------------------------------------------/]




[comment ----------DEPLOY SCRIPT----------------------------------------------------------------------------------------------/]

[template public generateMavensProjectsGeneration(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployScripts/mavenProjectsGeneration.sh', false, 'UTF-8')]
#!/bin/sh

echo *Generando los proyectos Maven necesarios para el motor generador de codigo ----------------
echo Generando actuators...
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
mvn archetype:generate -DgroupId=actuator -DartifactId=[actuator.name + actuator.id/] -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
	[/for]
echo Actuadores generados!
echo Generando devices...
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
mvn archetype:generate -DgroupId=Gestores -DartifactId=[device.name + device.id/] -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
	[/for]
echo Devices generados!
echo Generando nodos Fog...
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
mvn archetype:generate -DgroupId=Fog -DartifactId=[fog.name.replaceAll('_','') + fog.id/] -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
	[/for]
echo Nodos Fog generados!
echo Generando componentes Esper...
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
mvn archetype:generate -DgroupId=EsperClient -DartifactId=EsperComponent[fog.name.replaceAll('_','') + fog.id/] -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
		[/if]
	[/for]
echo componentes Esper generados!
echo *Fin de la generacion de proyectos Maven! ----------------
[/file] 
[/template]




[template public generateAllFilesAndDockerizeAndDeploy(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployScripts/generateAllFilesAndDockerizeAndDeploy.sh', false, 'UTF-8')]
#!/bin/sh

echo Eliminando archivos no necesarios antes de dockerizar...
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
rm "$parent_path"/gencode/[actuator.name + actuator.id/]/src/main/java/actuator/App.java
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
rm "$parent_path"/gencode/[device.name + device.id/]/src/main/java/Gestores/App.java
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
rm "$parent_path"/gencode/[fog.name.replaceAll('_','') + fog.id/]/src/main/java/Gestores/App.java
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
rm "$parent_path"/gencode/EsperComponent[fog.name.replaceAll('_','') + fog.id/]/src/main/java/Gestores/App.java
		[/if]
	[/for]
echo Archivos innecesarios eliminados!
echo *Dockerizando todos los componentes generados  ----------------
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
cd "$parent_path"/gencode/[actuator.name + actuator.id/]
sudo mvn clean package docker:build
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
cd "$parent_path"/gencode/[device.name + device.id/]
sudo mvn clean package docker:build
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
cd "$parent_path"/gencode/[fog.name.replaceAll('_','') + fog.id/]
sudo mvn clean package docker:build
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
cd "$parent_path"/gencode/EsperComponent[fog.name.replaceAll('_','') + fog.id/]
sudo mvn clean compile assembly:single
sudo mvn docker:build
		[/if]
	[/for]
echo *Componentes Dockerizados! ----------------
[/file] 
[/template] 




[template public generateDeploy(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployScripts/deploy.sh', false, 'UTF-8')]
#!/bin/sh

echo *Iniciando el Despliegue ----------------
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
gnome-terminal --tab -e "bash -c 'printf \"\033]0;FOG[fog.name.replaceAll('_','') + fog.id/]\007\";echo pepita123* | sudo -S docker run [fog.name.replaceAll('_','').toLowerCase() + fog.id.toString().toLowerCase()/]'"
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
gnome-terminal --tab -e "bash -c 'printf \"\033]0;ESPER[fog.name.replaceAll('_','') + fog.id/]\007\";echo pepita123* | sudo -S docker run EsperComponent[fog.name.replaceAll('_','').toLowerCase() + fog.id.toString().toLowerCase()/]'"
		[/if]
	[/for]
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
gnome-terminal --tab -e "bash -c 'printf \"\033]0;ACTUATOR[actuator.name + actuator.id/]\007\";echo pepita123* | sudo -S docker run [actuator.name.toLowerCase() + actuator.id.toString().toLowerCase()/]'"
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
gnome-terminal --tab -e "bash -c 'printf \"\033]0;DEVICE[device.name + device.id/]\007\";echo pepita123* | sudo -S docker run [device.name.toLowerCase() + device.id.toString().toLowerCase()/]'"
	[/for]
echo *Finalizando el Despliegue ----------------
[/file] 
[/template]



[comment ACTUAL DEPLOY.SH/]
[template public generateSwarmDeploy(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployScripts/deploySwarm.sh', false, 'UTF-8')]
#!/bin/bash

echo "
   _   _   _   _   _   _   _   _   _     _   _   _   _   _   _   _   _   _   _  
  / \ / \ / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ 
 ( I | n | i | c | i | a | n | d | o ) ( d | e | s | p | l | i | e | g | u | e )
  \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ 
"
echo "
   _   _   _   _   _   _   _     _   _   _   _   _  
  / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ 
 ( C | r | e | a | n | d | o ) ( S | w | a | r | m )
  \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/  
"
parent_path=$( cd "$(dirname "${BASH_SOURCE['['/]0]}")" ; cd .. ; cd .. ; pwd -P )
ip=158.49.189.138:5000
pass=pepita123*

rm "$parent_path"/gencode/token
rm "$parent_path"/gencode/tabladirecciones
rm "$parent_path"/gencode/ipenvironment
echo y | docker-machine rm [for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))][fog.name.replaceAll('_','') + fog.id/] [/for]Environment

docker-machine create --driver virtualbox Environment

docker-machine ls >> "$parent_path"/gencode/ipenvironment
IPENV=$(grep -oE "\b(['['/]0-9]{1,3}\.){3}['['/]0-9]{1,3}\b" "$parent_path"/gencode/ipenvironment)
docker-machine ssh Environment "docker swarm init --advertise-addr "$IPENV";exit" >> "$parent_path"/gencode/token
docker-machine ssh Environment "docker service create --name=viz --publish=8080:8080/tcp --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer;exit" >> "$parent_path"/gencode/token

i=0
while IFS= read -r line; do
  ((i++))
  if ['['/]['['/] "$i" == '5' ]]; then
    echo $line
    TOKEN=$line
  fi
done < "$parent_path"/gencode/token

	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
docker-machine create --driver virtualbox [fog.name.replaceAll('_','') + fog.id/]
docker-machine scp "$parent_path"/gencode/daemon.json [fog.name.replaceAll('_','') + fog.id/]:~
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] "$TOKEN;sudo cp ~/daemon.json /etc/docker;sudo /etc/init.d/docker restart;exit"
	[/for]


	[for(fog: CloudNode | anEnvironment.node->filter(ProcessNode)->filter(CloudNode))]
docker-machine create --driver virtualbox [fog.name.replaceAll('_','') + fog.id/]
docker-machine scp "$parent_path"/gencode/daemon.json [fog.name.replaceAll('_','') + fog.id/]:~
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] "$TOKEN;sudo cp ~/daemon.json /etc/docker;sudo /etc/init.d/docker restart;exit"
	[/for]
echo "
   _   _   _   _   _     _   _   _   _   _   _  
  / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ 
 ( S | w | a | r | m ) ( c | r | e | a | d | o )
  \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/  
"

	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
echo [fog.name.replaceAll('_','') + fog.id/] >> "$parent_path"/gencode/tabladirecciones
docker-machine ip [fog.name.replaceAll('_','') + fog.id/] >> "$parent_path"/gencode/tabladirecciones
	[/for]
	[for(fog: CloudNode | anEnvironment.node->filter(ProcessNode)->filter(CloudNode))]
echo [fog.name.replaceAll('_','') + fog.id/] >> "$parent_path"/gencode/tabladirecciones
docker-machine ip [fog.name.replaceAll('_','') + fog.id/] >> "$parent_path"/gencode/tabladirecciones
	[/for]


	[for(sensor : Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
		[if sensor.data.datasource.oclIsTypeOf(CSVload)]
cp "$parent_path"/gencode/[sensor.data.datasource->filter(LoadFromFile).FileName/].csv "$parent_path"/gencode/[sensor.name + sensor.id/]/src/main/resources
cp "$parent_path"/gencode/[sensor.data.datasource->filter(LoadFromFile).FileName/].csv "$parent_path"/gencode/MobilityArchitecture/MobileNodes/[sensor.name + sensor.id/]/src/main/resources
		[/if]
	[/for]
	[for(node : Node | anEnvironment.node)]
		[if node.oclIsKindOf(Sensor)]
cp "$parent_path"/gencode/tabladirecciones "$parent_path"/gencode/MobilityArchitecture/MobileNodes/[node.name + node.id/]/src/main/resources
cp "$parent_path"/gencode/tabladirecciones "$parent_path"/gencode/[node.name + node.id/]/src/main/resources
		[/if]
		[if not node.oclIsKindOf(Sensor)]
cp "$parent_path"/gencode/tabladirecciones "$parent_path"/gencode/[node.name + node.id/]/src/main/resources
		[/if]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
cp "$parent_path"/gencode/tabladirecciones "$parent_path"/gencode/EsperComponent[fog.name.replaceAll('_','') + fog.id/]/src/main/resources
		[/if]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
cp "$parent_path"/gencode/tabladirecciones "$parent_path"/gencode/MobilityArchitecture/TSS/[fog.name.replaceAll('_','')/]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
cp "$parent_path"/gencode/tabladirecciones "$parent_path"/gencode/MobilityArchitecture/TDS/[fog.name.replaceAll('_','')/]
	[/for]


echo *Dockerizando todos los componentes generados  ----------------
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
cd "$parent_path"/gencode/[actuator.name + actuator.id/]
sudo mvn clean package docker:build
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
cd "$parent_path"/gencode/[device.name + device.id/]
cd "$parent_path"/gencode/MobilityArchitecture/MobileNodes/[device.name + device.id/]
sudo mvn clean package docker:build
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
cd "$parent_path"/gencode/[fog.name.replaceAll('_','') + fog.id/]
sudo mvn clean package docker:build
	[/for] 
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
cd "$parent_path"/gencode/EsperComponent[fog.name.replaceAll('_','') + fog.id/]
sudo mvn clean compile assembly:single
sudo mvn docker:build
		[/if]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(DataBase)->size()>0)]
cd "$parent_path"/gencode/apis/api[fog.name.replaceAll('_','') + fog.id/]
sudo docker build -t localhost:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/] .
		[/if]
	[/for]
cd "$parent_path"/gencode/dashboard/dashboard2
mvn clean install
cd ..
sudo docker build . -t localhost:5000/dashboard
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
cd "$parent_path"/gencode/MobilityArchitecture/TSS/[fog.name.replaceAll('_','')/]
sudo docker build . -t localhost:5000/tss-[fog.name.replaceAll('_','').toLower()/]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
cd "$parent_path"/gencode/MobilityArchitecture/TDS/[fog.name.replaceAll('_','')/]
sudo docker build . -t localhost:5000/tds-[fog.name.replaceAll('_','').toLower()/]
	[/for]


echo *Componentes Dockerizados! ---------------

echo *Subiendo imagenes a DockerHub ----------------
echo pepita123* | docker login --username joseinformatica96 --password-stdin
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
echo pepita123* | sudo -S docker push localhost:5000/[fog.name.replaceAll('_','').toLowerCase() + fog.id/]
		[if(fog.component->selectByKind(DataBase)->size()>0)]
echo pepita123* | sudo -S docker push localhost:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/]
		[/if]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
echo pepita123* | sudo -S docker push localhost:5000/espercomponent[fog.name.replaceAll('_','').toLowerCase() + fog.id/]
		[/if]
	[/for] 
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
echo pepita123* | sudo -S docker push localhost:5000/[actuator.name.toLowerCase() + actuator.id/]
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
echo pepita123* | sudo -S docker push localhost:5000/[device.name.toLowerCase() + device.id/]
	[/for]
echo pepita123* | sudo -S docker push localhost:5000/dashboard
echo pepita123* | sudo -S docker push localhost:5000/mosquitto-simulateiot
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
echo pepita123* | sudo -S docker push localhost:5000/tss-[fog.name.replaceAll('_','').toLower()/]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
echo pepita123* | sudo -S docker push localhost:5000/tds-[fog.name.replaceAll('_','').toLower()/]
	[/for]

echo *Subida de imagenes finalizada! ----------------
echo *Bajando imagenes ----------------
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] "echo pepita123* | docker login --username joseinformatica96 --password-stdin;docker pull "$ip"/mosquitto-simulateiot;[if(fog.component->selectByKind(DataBase)->size()>0)]docker pull mongo;docker pull "$ip"/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/if]docker pull "$ip"/[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]docker pull "$ip"/espercomponent[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/if][for(actuator: Actuator | fog.edge_node->filter(Actuator))]docker pull "$ip"/[actuator.name.toLowerCase() + actuator.id/];[/for][for(device: Sensor | fog.edge_node->filter(Sensor))]docker pull "$ip"/[device.name.toLowerCase() + device.id/];[/for]docker pull "$ip"/tds-[fog.name.replaceAll('_','').toLower()/];docker pull "$ip"/tss-[fog.name.replaceAll('_','').toLower()/];exit"
	[/for]

echo *Imagenes bajadas!----------------

echo *Deplegando entorno IoT!----------------
	docker-machine ssh Environment "[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))][if(fog.component->selectByKind(DataBase)->size()>0)]docker service create --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] -p [i+27016/]:27017 --replicas 1 --name Mongo[fog.name.replaceAll('_','') + fog.id/] mongo;docker service create --replicas 1 -p [i+3999/]:4000 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name api[fog.name.replaceAll('_','') + fog.id/] "$ip"/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/if]docker service create --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --replicas 1 -p [1882+i/]:1883 --name Mosquitto[fog.name.replaceAll('_','') + fog.id/] "$ip"/mosquitto-simulateiot;[/for][for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]docker service create --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name [fog.name.replaceAll('_','') + fog.id/] "$ip"/[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]docker service create --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name EsperComponent[fog.name.replaceAll('_','') + fog.id/] "$ip"/espercomponent[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/if][for(actuator: Actuator | fog.edge_node->filter(Actuator))]docker service create --replicas [actuator.quantity/] --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name [actuator.name.toLowerCase() + actuator.id/] "$ip"/[actuator.name.toLowerCase() + actuator.id/];[/for][for(device: Sensor | fog.edge_node->filter(Sensor))]docker service create --replicas [device.quantity/] --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name [device.name.toLowerCase() + device.id/] "$ip"/[device.name.toLowerCase() + device.id/];[/for][/for]echo pepita123* | docker login --username joseinformatica96 --password-stdin;docker pull "$ip"/dashboard;docker service create --constraint node.hostname==Environment -p 8081:8080 --replicas 1 --name Dashboard "$ip"/dashboard; [for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]docker service create --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name tds-[fog.name.replaceAll('_','').toLower()/] "$ip"/tds-[fog.name.replaceAll('_','').toLower()/];docker service create --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name tss-[fog.name.replaceAll('_','').toLower()/] "$ip"/tss-[fog.name.replaceAll('_','').toLower()/];[/for]exit"
echo *Entorno IoT desplegado!----------------
[/file] 
[/template]




[template public generateSwarmDeployINACCELEOLAUNCHER(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployScripts/deployAll.sh', false, 'UTF-8')]
#!/bin/bash

echo "
   _   _   _   _   _   _   _   _   _     _   _   _   _   _   _   _   _   _   _  
  / \ / \ / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ 
 ( I | n | i | c | i | a | n | d | o ) ( d | e | s | p | l | i | e | g | u | e )
  \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ 
"
echo "
   _   _   _   _   _   _   _     _   _   _   _   _  
  / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ 
 ( C | r | e | a | n | d | o ) ( S | w | a | r | m )
  \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/  
"

docker-machine create --driver virtualbox Environment
docker-machine ssh Environment "docker swarm init --advertise-addr 192.168.99.100;exit" >> "$parent_path"/gencode/token

i=0
while IFS= read -r line; do
  ((i++))
  if ['['/]['['/] "$i" == '5' ]]; then
    echo $line
    TOKEN=$line
  fi
done < "$parent_path"/gencode/token

	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
docker-machine create --driver virtualbox [fog.name.replaceAll('_','') + fog.id/]
	[/for]
echo "
   _   _   _   _   _     _   _   _   _   _   _  
  / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ 
 ( S | w | a | r | m ) ( c | r | e | a | d | o )
  \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/  
"

java -jar MTCLauncher.jar book2publication2html.properties
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
echo [fog.name.replaceAll('_','') + fog.id/] >> /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/tabladirecciones
docker-machine ip [fog.name.replaceAll('_','') + fog.id/] >> /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/tabladirecciones
	[/for]

	[for(sensor : Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
		[if sensor.data.datasource.oclIsTypeOf(CSVload)]
cp /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/[sensor.data.datasource->filter(LoadFromFile).FileName/].csv /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/[sensor.name + sensor.id/]/src/main/resources
		[/if]
	[/for]
	[for(node : Node | anEnvironment.node)]
cp /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/tabladirecciones /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/[node.name + node.id/]/src/main/resources
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
cp /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/tabladirecciones /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/EsperComponent[fog.name.replaceAll('_','') + fog.id/]/src/main/resources
		[/if]
	[/for]
 
echo *Dockerizando todos los componentes generados  ----------------
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
cd /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/[actuator.name + actuator.id/]
sudo mvn clean package docker:build
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
cd /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/[device.name + device.id/]
sudo mvn clean package docker:build
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
cd /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/[fog.name.replaceAll('_','') + fog.id/]
sudo mvn clean package docker:build
	[/for] 
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
cd /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/EsperComponent[fog.name.replaceAll('_','') + fog.id/]
sudo mvn clean compile assembly:single
sudo mvn docker:build
		[/if]
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
		[if(fog.component->selectByKind(DataBase)->size()>0)]
cd /home/jose/Escritorio/LauncherACCeleo/AccLauncher/gen/genFiles/apis/api[fog.name.replaceAll('_','') + fog.id/]
sudo docker build -t localhost:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/] .
		[/if]
	[/for]
echo *Componentes Dockerizados! ---------------

echo *Subiendo imagenes a DockerHub ----------------
echo pepita123* | docker login --username joseinformatica96 --password-stdin
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
echo pepita123* | sudo -S docker push localhost:5000/[fog.name.replaceAll('_','').toLowerCase() + fog.id/]
		[if(fog.component->selectByKind(DataBase)->size()>0)]
echo pepita123* | sudo -S docker push localhost:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/]
		[/if]
	[/for]
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
echo pepita123* | sudo -S docker push localhost:5000/espercomponent[fog.name.replaceAll('_','').toLowerCase() + fog.id/]
		[/if]
	[/for] 
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
echo pepita123* | sudo -S docker push localhost:5000/[actuator.name.toLowerCase() + actuator.id/]
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
echo pepita123* | sudo -S docker push localhost:5000/[device.name.toLowerCase() + device.id/]
	[/for]
echo *Subida de imagenes finalizada! ----------------
echo *Bajando imagenes ----------------
	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] "$TOKEN;docker pull eclipse-mosquitto;echo pepita123* | docker login --username joseinformatica96 --password-stdin;[if(fog.component->selectByKind(DataBase)->size()>0)]docker pull mongo;docker pull 158.49.189.138:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/if]docker pull 158.49.189.138:5000/[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]docker pull 158.49.189.138:5000/espercomponent[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/if][for(actuator: Actuator | fog.edge_node->filter(Actuator))]docker pull 158.49.189.138:5000/[actuator.name.toLowerCase() + actuator.id/];[/for][for(device: Sensor | fog.edge_node->filter(Sensor))]docker pull 158.49.189.138:5000/[device.name.toLowerCase() + device.id/];[/for]exit"
	[/for]
echo *Imagenes bajadas!----------------

echo *Deplegando entorno IoT!----------------
	docker-machine ssh Environment "[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))][if(fog.component->selectByKind(DataBase)->size()>0)]docker service create --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] -p [i+27016/]:27017 --replicas 1 --name Mongo[fog.name.replaceAll('_','') + fog.id/] mongo;docker service create --replicas 1 -p [i+3999/]:4000 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name api[fog.name.replaceAll('_','') + fog.id/] localhost:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/if]docker service create --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --replicas 1 -p [1882+i/]:1883 --name Mosquitto[fog.name.replaceAll('_','') + fog.id/] eclipse-mosquitto;[/for][for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]docker service create --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name [fog.name.replaceAll('_','') + fog.id/] localhost:5000/[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]docker service create --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name EsperComponent[fog.name.replaceAll('_','') + fog.id/] localhost:5000/espercomponent[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/if][/for]	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]docker service create --replicas [actuator.quantity/] --name [actuator.name.toLowerCase() + actuator.id/] localhost:5000/[actuator.name.toLowerCase() + actuator.id/];[/for][for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]docker service create --replicas [device.quantity/] --name [device.name.toLowerCase() + device.id/] localhost:5000/[device.name.toLowerCase() + device.id/];[/for]exit"
echo *Entorno IoT desplegado!----------------
[/file] 
[/template] 




[template public generateResources(anEnvironment : Environment)]
[comment @main/]
[for(node : Node | anEnvironment.node->selectByKind(ProcessNode))]
	[file ('/' + node.name + node.id + '/src/main/resources/tabladirecciones', false, 'UTF-8')]
	[/file]
[/for]

[for(node : EdgeNode | anEnvironment.node->selectByKind(EdgeNode))]
	[file ('/' + node.name + node.id + '/src/main/resources/tabladirecciones', false, 'UTF-8')]
	[/file]
	[file ('/MobilityArchitecture/MobileNodes/' + node.name + node.id + '/src/main/resources/tabladirecciones', false, 'UTF-8')]
	[/file]
[/for]

[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
		[file ('/EsperComponent' + fog.name.replaceAll('_','') + fog.id + '/src/main/resources/tabladirecciones', false, 'UTF-8')]
		[/file]
	[/if]
[/for]
[/template]




[template public generateDeleteDeploy(anEnvironment : Environment)]
[comment @main/]
    [file ('/DeployScripts/deleteDeploy.sh', false, 'UTF-8')]
rm "$parent_path"/gencode/tabladirecciones
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
docker-machine rm [fog.name.replaceAll('_','') + fog.id/]
	[/for]
docker-machine ssh Environment "[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]docker node rm [fog.name.replaceAll('_','') + fog.id/];[/for]docker service rm $(docker service ls -q);docker service create --name=viz --publish=8080:8080/tcp --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer;exit"
	[/file] 
[/template]




[comment ----------DEPLOY SCRIPT END----------------------------------------------------------------------------------------------/]




[comment ----------DEPLOY CYTO JS----------------------------------------------------------------------------------------------/]

[template public generateDespliegue(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployScripts/Graphic/code.js', false, 'UTF-8')]

  var cy = cytoscape({

  container: document.getElementById('cy'), // container to render in


  
  elements: {
      nodes: ['['/]
		[for (fog: FogNode | anEnvironment.node->filter(FogNode))]
			{ data: { id: 'Fog_[fog.id/]_[i/]', label:'[fog.name/]' }, classes: 'fog' },
			{ data: { id: 'Topics_[fog.id/]', label:'Topics', parent: 'Fog_[fog.id/]_[i/]' }, classes: 'Topics'},
			{ data: { id: 'Rule_Topics_[fog.id/]', label:'Rule_Topics', parent: 'Fog_[fog.id/]_[i/]' }, classes: 'Rule_Topics' },
			[let indice : Integer = i]
			[for (topic: Topic | fog.create_topic)]
					[if (indice-1).mod(3) = 0]
						[if fog.suscribe_on_topic->includes(topic)]
			{ data: { id: '[topic.name/]', parent: 'Topics_[fog.id/]' }, position: { x: [300*i/], y: [((indice-1).div(3))*1000/] }, classes: 'Topic' },
						[/if]
						[if fog.publish_on_topic->includes(topic)]
			{ data: { id: '[topic.name/]', parent: 'Rule_Topics_[fog.id/]' }, position: { x: [300*i/], y: [450 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'Topic' },
						[/if]
						[for (dev: Sensor | fog.edge_node->filter(Sensor))]
			{ data: { id: '[dev.id/]', label: '[dev.name/]\nIP'}, position: { x: [300*i/], y: [((indice-1).div(3))*1000-300 - i.mod(2)*50/] }, classes: 'device' },						
						[/for] 
					[/if]
					[if (indice-1).mod(3) = 1]
						[if fog.suscribe_on_topic->includes(topic)]
			{ data: { id: '[topic.name/]', parent: 'Topics_[fog.id/]' }, position: { x: [300*i+2000/], y: [((indice-1).div(3))*1000/] }, classes: 'Topic' },
						[/if]
						[if fog.publish_on_topic->includes(topic)]
			{ data: { id: '[topic.name/]', parent: 'Rule_Topics_[fog.id/]' }, position: { x: [300*i + 2000/], y: [450 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'Topic' },
						[/if]
						[for (dev: Sensor | fog.edge_node->filter(Sensor))]
			{ data: { id: '[dev.id/]', label: '[dev.name/]\nIP'}, position: { x: [300*i+2000/], y: [((indice-1).div(3))*1000-300 - i.mod(2)*50/] }, classes: 'device' },									
						[/for]
					[/if]
					[if (indice-1).mod(3) = 2]
						[if fog.suscribe_on_topic->includes(topic)]
			{ data: { id: '[topic.name/]', parent: 'Topics_[fog.id/]' }, position: { x: [300*i+4000/], y: [((indice-1).div(3))*1000/] }, classes: 'Topic' },
						[/if]
						[if fog.publish_on_topic->includes(topic)]
			{ data: { id: '[topic.name/]', parent: 'Rule_Topics_[fog.id/]' }, position: { x: [300*i+4000/], y: [450 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'Topic' },
						[/if]
						[for (dev: Sensor | fog.edge_node->filter(Sensor))]
			{ data: { id: '[dev.id/]', label: '[dev.name/]\nIP'}, position: { x: [300*i+4000/], y: [((indice-1).div(3))*1000-300 - i.mod(2)*50/] }, classes: 'device' },						
						[/for]
					[/if]
			[/for] 
			[for (rule: Rule | fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule)]
					[if (indice-1).mod(3) = 0]
						[if i = 1]
							[if fog.component->selectByKind(ProcessEngine)->selectByKind(SP)->size()>0]
			{ data: { id: 'analyzerOf_[fog.name/]', label:'WSO2_SP', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'WSO2' },					
							[/if]
							[if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0]
			{ data: { id: 'analyzerOf_[fog.name/]', label:'Esper_CEP', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Esper' },					
							[/if]
							[if (fog.component->selectByKind(DataBase)->size()>0)]
			{ data: { id: 'Mongo_[fog.id/]', label:'MongoDB', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Mongo' },
							[/if]
			{ data: { id: 'Mosquitto_[fog.id/]', label:'Mosquitto', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Mosquitto' },	
						[/if]
						[for (top: Topic | rule.apply_to)]
			{ data: { id: '[fog.id/]_Rule_[rule.id/]_[i/]', label: 'Rule_[rule.id/]\n[rule.rule/]', parent: '[rule.apply_to.name/]'}, position: { x: [300*i/], y: [450 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'RuleTopic' },
						[/for]
						[for (actuator: Actuator | fog.edge_node->filter(Actuator))]
			{ data: { id: 'actuator_[actuator.id/]', label: '[actuator.name/]\nIP' }, position: { x: [300*i/], y: [750 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'actuator' },
						[/for]
					[/if]
					[if (indice-1).mod(3) = 1]
						[if i = 1]
							[if fog.component->selectByKind(ProcessEngine)->selectByKind(SP)->size()>0]
			{ data: { id: 'analyzerOf_[fog.name/]', label:'WSO2_SP', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i+2000/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'WSO2' },					
							[/if]
							[if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0]
			{ data: { id: 'analyzerOf_[fog.name/]', label:'Esper_CEP', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i+2000/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Esper' },					
							[/if]
							[if (fog.component->selectByKind(DataBase)->size()>0)]
			{ data: { id: 'Mongo_[fog.id/]', label:'MongoDB', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i+2000/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Mongo' },
							[/if]
			{ data: { id: 'Mosquitto_[fog.id/]', label:'Mosquitto', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i+2000/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Mosquitto' },	
						[/if]
						[for (top: Topic | rule.apply_to)]
			{ data: { id: '[fog.id/]_Rule_[rule.id/]_[i/]', label: 'Rule_[rule.id/]\n[rule.rule/]', parent: '[rule.apply_to.name/]'}, position: { x: [300*i+2000/], y: [450 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'RuleTopic' },
						[/for]
						[for (actuator: Actuator | fog.edge_node->filter(Actuator))]
			{ data: { id: 'actuator_[actuator.id/]', label: '[actuator.name/]\nIP' }, position: { x: [300*i+2000/], y: [750 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'actuator' },
						[/for]
					[/if]
					[if (indice-1).mod(3) = 2]
						[if i = 1]
							[if fog.component->selectByKind(ProcessEngine)->selectByKind(SP)->size()>0]
			{ data: { id: 'analyzerOf_[fog.name/]', label:'WSO2_SP', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i+4000/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'WSO2' },					
							[/if]
							[if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0]
			{ data: { id: 'analyzerOf_[fog.name/]', label:'Esper_CEP', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i+4000/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Esper' },					
							[/if]
							[if (fog.component->selectByKind(DataBase)->size()>0)]
			{ data: { id: 'Mongo_[fog.id/]', label:'MongoDB', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i+4000/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Mongo' },
							[/if]
			{ data: { id: 'Mosquitto_[fog.id/]', label:'Mosquitto', type: 'rectangle', parent: 'Fog_[fog.id/]_[indice/]' }, position: { x: [300*i+4000/], y: [175 + ((indice-1).div(3))*1000/] }, classes: 'Mosquitto' },	
						[/if]
						[for (top: Topic | rule.apply_to)]
			{ data: { id: '[fog.id/]_Rule_[rule.id/]_[i/]', label: 'Rule_[rule.id/]\n[rule.rule/]', parent: '[rule.apply_to.name/]'}, position: { x: [300*i+4000/], y: [450 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'RuleTopic' },
						[/for]
		  				[for (actuator: Actuator | fog.edge_node->filter(Actuator))]
			{ data: { id: 'actuator_[actuator.id/]', label: '[actuator.name/]\nIP' }, position: { x: [300*i+4000/], y: [750 + ((indice-1).div(3))*1000 + i.mod(2)*50/] }, classes: 'actuator' },
						[/for]
					[/if]
			[/for] 
			[/let]
		[/for]    
      ],
 
	  edges: ['['/]
		[for(fog: FogNode | anEnvironment.node->filter(FogNode))]
			[for (dev: Sensor | fog.edge_node->filter(Sensor))]
				[for (top: Topic | fog.create_topic)]
					[if (dev.publish_on_topic->includes(top))]
	        { data: { id: 'pub_[top.name/]_[dev.id/]', weight: 3, source: '[dev.id/]', target: '[top.name/]' }, classes: 'Publish' },
					[/if]
				[/for]
			[/for]
		[/for]
		[for(fog: FogNode | anEnvironment.node->filter(FogNode))]
			[for (dev: Sensor | fog.edge_node->filter(Sensor))]
				[for (top: Topic | fog.edge_node->filter(Sensor).publish_on_topic)]
					[if (dev.suscribe_on_topic->includes(top))]
	        { data: { id: 'sub_[top.name/]_[dev.id/]', weight: 3, source: '[top.name/]', target: '[dev.id/]' }, classes: 'Suscribed' },
					[/if]
				[/for]
			[/for]
		[/for]
		[for(fog: FogNode | anEnvironment.node->filter(FogNode))]
			[for (act: Actuator | fog.edge_node->filter(Actuator))]
				[for (top: Topic | fog.publish_on_topic)]
					[if (act.suscribe_on_topic->includes(top))]
	        { data: { id: 'sub_[top.name/]_[act.id/]', weight: 3, source: '[top.name/]', target: 'actuator_[act.id/]' }, classes: 'Suscribed' },
					[/if]
				[/for]
			[/for]
		[/for]
		[for (fog: FogNode | anEnvironment.node->filter(FogNode))]
			[if fog.component->selectByKind(ProcessEngine)->selectByKind(CEP).rule->size()>0]
	        { data: { id: 'line_[fog.id/]', weight: 3, source: 'Topics_[fog.id/]', target: 'analyzerOf_[fog.name/]' }},
			{ data: { id: 'linee_[fog.id/]', weight: 3, source: 'analyzerOf_[fog.name/]', target: 'Rule_Topics_[fog.id/]' }},			
			[/if]
		[/for]
      ]
  },

  style: ['['/] // the stylesheet for the graph
    {
      selector: 'node',
      style: {
        'content': 'data(id)',
	    'label': 'data(label)',
	    'text-wrap': 'wrap',
        'text-valign': 'top',
        'color': 'black',
	    'font-size': 30,
        'width': 80,
        'height': 80
      }
    },
	{
      selector: '.WSO2',
      style: {
		'text-valign': 'top',
        'background-fit': 'contain',
		'background-image': 'http://c1.staticflickr.com/7899/46817715724_11a6fe823e_b.jpg',
		'shape': 'data(type)',
		'width': 250,
        'height': 100,
        'label': 'data(label)'
      }
    },
	{
      selector: '.Esper',
      style: {
		'text-valign': 'top',
        'background-fit': 'contain',
		'background-image': 'http://c1.staticflickr.com/7891/47488599302_eae0d7b88c_b.jpg',
		'shape': 'data(type)',
		'width': 250,
        'height': 100,
        'label': 'data(label)'
      }
    },
	{
      selector: '.Mongo',
      style: {
		'text-valign': 'top',
        'background-fit': 'contain',
		'background-image': 'http://c1.staticflickr.com/7801/46625933555_fb333b3b6b_b.jpg',
		'shape': 'data(type)',
		'width': 250,
        'height': 100,
        'label': 'data(label)'
      }
    },
	{
      selector: '.Mosquitto',
      style: {
		'text-valign': 'top',
        'background-fit': 'contain',
		'background-image': 'http://c1.staticflickr.com/7902/47488581822_9285984e31_b.jpg',
		'shape': 'data(type)',
        'label': 'data(label)',
		'width': 250,
        'height': 100
      }
    },
	{
      selector: '.fog',
      style: {
        'background-color': '#1B4F72',
		'text-outline-color': '#1B4F72',
        'label': 'data(label)'
      }
    },
    {
      selector: '.device',
      style: {
		'text-valign': 'top',
        'background-fit': 'cover',
		'background-image': 'https://c1.staticflickr.com/5/4892/45644138234_6725870549_b.jpg',
        'label': 'data(label)'
      }
    },
    {
      selector: '.actuator',
      style: {
        'background-color': '#943126',
		'text-outline-color': '#943126',
        'label': 'data(label)'
      }
    },
    {
      selector: '.Topic',
      style: {
        'background-color': '#b9770e',
		'text-outline-color': '#b9770e',
        'label': 'data(id)'
      }
    },
    {
      selector: '.RuleTopic',
      style: {
        'background-color': '#186a3b',
		'text-outline-color': '#186a3b',
        'label': 'data(label)'
      }
    },
    {
      selector: '$node > node',
      css: {
        'padding-top': '10px',
        'padding-left': '10px',
        'padding-bottom': '10px',
        'padding-right': '10px',
        'text-valign': 'top',
        'text-halign': 'center',
        'background-color': '#a9cce3',
		'text-outline-color': '#a9cce3'
      }
    },
    {
      selector: '.Topics',
      style: {
        'background-color': '#2980b9',
		'text-outline-color': '#2980b9',
        'label': 'data(id)'
      }
    },
    {
      selector: '.Rule_Topics',
      style: {
        'background-color': '#9b59b6',
		'text-outline-color': '#9b59b6',
        'label': 'data(id)'
      }
    },
    {
      selector: 'edge',
      style: {
        'curve-style': 'bezier',
        'target-arrow-shape': 'triangle', 
        'width': 4,
        'line-color': '#ddd',
        'target-arrow-color': '#ddd'
      }
    },
    {
      selector: '.Suscribed',
      style: {
        'curve-style': 'bezier',
        'target-arrow-shape': 'triangle',
        'width': 4,
        'line-color': '#f1948a',
        'target-arrow-color': '#f1948a'
      }
    },
    {
      selector: '.Publish',
      style: {
        'curve-style': 'bezier',
        'target-arrow-shape': 'triangle',
        'width': 4,
        'line-color': '#f7dc6f',
        'target-arrow-color': '#f7dc6f'
      }
    }
  ],

  layout: {
    name: 'preset',
    padding: 5
  }

});

[/file]
[/template]

[comment ----------END DEPLOY CYTO JS----------------------------------------------------------------------------------------------/]





[comment ----------API REST----------------------------------------------------------------------------------------------/]


[template public generateApiDockerfile(anEnvironment : Environment)]
[comment @main/]
[for (pnode : ProcessNode | anEnvironment.node->selectByKind(ProcessNode))]
	[if (pnode.component->selectByKind(DataBase)->size() > 0)]
		[file ('apis/api' + pnode.name.replaceAll('_', '') + pnode.id + '/Dockerfile', false, 'UTF-8')]
FROM joseinformatica96/environment:api2

COPY . //

ENTRYPOINT ['['/]"node", "API/index.js"]
		[/file]
	[/if]
[/for]
[/template]




[template public generateApiModels(anEnvironment : Environment)]
[comment @main/]
[for (pnode : ProcessNode | anEnvironment.node->selectByKind(ProcessNode))]
	[if (pnode.component->selectByKind(DataBase)->size() > 0)]
		[for (topic : Topic | pnode.create_topic)]
			[file ('apis/api' + pnode.name.replaceAll('_', '') + pnode.id + '/API/models/' + topic.name + '.js', false, 'UTF-8')]

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const [topic.name/]Schema = new Schema({
	id: {
		type:String,
		required: ['['/]false, 'id field is required']	
	},
	value: {
 		type:String,
		required: ['['/]false, 'data field is required']
    },
	topic: {
 		type:String,
		required: ['['/]false, 'data field is required']
    },
	route: {
 		type:String,
		required: ['['/]false, 'data field is required']
    },
	timeStamp: {
 		type:String,
		required: ['['/]false, 'data field is required']
    }

});

const Element = mongoose.model('[topic.name/]', [topic.name/]Schema, '[topic.name/]');

module.exports = Element;

			[/file]
		[/for]
	[/if]
[/for]
[/template]




[template public generateApiIndex(anEnvironment : Environment)]
[comment @main/]
[for (pnode : ProcessNode | anEnvironment.node->selectByKind(ProcessNode))]
	[if (pnode.component->selectByKind(DataBase)->size() > 0)]
		[file ('apis/api' + pnode.name.replaceAll('_', '') + pnode.id +  '/API/index.js', false, 'UTF-8')]
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const app = express();

mongoose.connect('mongodb://mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:27017/Fog_Node_[pnode.name.replaceAll('_','')/]_[pnode.id/]');
mongoose.Promise = global.Promise;

app.use(bodyParser.json());

app.use('/api', require('./routes/api'));

app.listen(process.env.port || 4000, function(){
  console.log('Node server running on http://192.168.99.10x:400[i/]');
});
		[/file]
	[/if]
[/for]
[/template]







[template public generateApiRoutes(anEnvironment : Environment)]
[comment @main/]

[for (pnode : ProcessNode | anEnvironment.node->selectByKind(ProcessNode))]
	[if (pnode.component->selectByKind(DataBase)->size() > 0)]
		[file ('apis/api' + pnode.name.replaceAll('_', '') + pnode.id + '/API/routes/api.js', false, 'UTF-8')]
const express = require('express');
const router = express.Router();
			[for (topic : Topic | pnode.create_topic)]

const [topic.name/] = require('../models/[topic.name/]');


router.get('/[topic.name/]', function(req, res){
  [topic.name/].find({}).then(function([topic.name/]){
	res.send([topic.name/]);
  });
});

router.get('/[topic.name/]/:id', function(req, res){
  [topic.name/].find({_id:req.params.id}).then(function([topic.name/]){
	res.send([topic.name/]);
  });
});

router.post('/[topic.name/]', function(req, res){
  [topic.name/].create(req.body).then(function([topic.name/]){
	res.send([topic.name/]);
  });
});

router.put('/[topic.name/]/:id', function(req, res){
  [topic.name/].findByIdAndUpdate({_id:req.params.id}, req.body).then(function([topic.name/]){
	res.send([topic.name/]);
  });
});

router.delete('/[topic.name/]/:id', function(req, res){
  [topic.name/].findByIdAndRemove({_id:req.params.id}).then(function([topic.name/]){
	res.send([topic.name/]);
  });
});
 
			[/for]
module.exports = router;
		[/file]
	[/if]
[/for]
[/template]

[comment ----------END API REST----------------------------------------------------------------------------------------------/]




[comment ----------DASHBOARD----------------------------------------------------------------------------------------------/]


[template public generateDashboardMainJSP(anEnvironment : Environment)]
[comment @main/]
	[file ('dashboard/dashboard2/src/main/webapp/WEB-INF/Main.jsp', false, 'UTF-8')]
<%@ page language="java" contentType="text/html; charset=UTF-8"     pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <link type="text/css" href="css/Main.css" rel="stylesheet">
</head>
<body>
	<ul id="menu">
[for (pnode : ProcessNode | anEnvironment.node->selectByKind(ProcessNode))]
	[if(pnode.oclIsKindOf(FogNode))]
		<li><input type="checkbox" name="list" id="FogList[pnode.id/]"/><label for="FogList[pnode.id/]">Fog[pnode.name.replaceAll('_', '') + pnode.id/]</label>
	[/if]
	[if(pnode.oclIsKindOf(CloudNode))]
		<li><input type="checkbox" name="list" id="FogList[pnode.id/]"/><label for="FogList[pnode.id/]">Cloud[pnode.name.replaceAll('_', '') + pnode.id/]</label>
	[/if]
			<ul class="interior">
	    		<li><input type="checkbox" name="list" id="FogTopics[pnode.id/]"><label for="FogTopics[pnode.id/]">Topics</label>
	    			<ul class="interior">
	[for (topic : Topic | pnode.create_topic)]
		[if(pnode.component->selectByKind(DataBase)->size()>0)]
	    				<li><input type="checkbox" name="list" id="Topics[topic.name + pnode.id/]"><label for="Topics[topic.name + pnode.id/]"><a href="TopicLecture?top=[topic.name/]">Topic[topic.name/]</a></label>
		[/if]
		[if(pnode.component->selectByKind(DataBase)->size()=0)]
	    				<li><input type="checkbox" name="list" id="Topics[topic.name + pnode.id/]"><label for="Topics[topic.name + pnode.id/]"><a href="#r">Topic[topic.name/]</a></label>
		[/if]
	    					<ul class="interior">
	    						<li><input type="checkbox" name="list" id="Rules[topic.name + pnode.id/]"><label for="Rules[topic.name + pnode.id/]"><a href="#r">Rules</a></label>
	    							<ul class="interior">
		[for (rule : Rule | pnode.component->selectByKind(ProcessEngine).rule)]
			[for (topicrule : Topic | rule.apply_to)]
				[if topicrule.name = topic.name]
	    								<li><p>[rule.rule/]</p></li>
				[/if]
			[/for]
		[/for]
	    							</ul>
	    						</li>
	    					</ul>
	    				</li>
	[/for]
	    			</ul>
	    		</li>
	    	</ul>



	    	<ul class="interior">
	    		<li><input type="checkbox" name="list" id="FogSensors[pnode.id/]"><label for="FogSensors[pnode.id/]">Sensors</label>
	    			<ul class="interior">
	[for (sensor : Sensor | pnode.edge_node->selectByKind(Sensor))]
	    				<li><input type="checkbox" name="list" id="Sensor[sensor.id/]"><label for="Sensor[sensor.id/]">Sensor[sensor.name + sensor.id/]</label>
	    					<ul class="interior">
		[for (sensortopic : Topic | sensor.publish_on_topic)]
			[if(pnode.component->selectByKind(DataBase)->size()>0)]
	    						<li><a href="TopicLecture?top=[sensortopic.name/]">Topic[sensortopic.name/]</a></li>
			[/if]
			[if(pnode.component->selectByKind(DataBase)->size()=0)]
	    						<li><a href="#r">Topic[sensortopic.name/]</a></li>
			[/if]
		[/for]
	    					</ul>
	    				</li>
	[/for]
	    			</ul>
	    		</li>
	    	</ul>
	    	<ul class="interior">
	    		<li><input type="checkbox" name="list" id="FogActuators[pnode.id/]"><label for="FogActuators[pnode.id/]">Actuators</label>
	    			<ul class="interior">
	[for (actuator : Actuator | pnode.edge_node->selectByKind(Actuator))]
						<li><input type="checkbox" name="list" id="Actuator[actuator.id/]"><label for="Actuator[actuator.id/]">Actuator[actuator.name + actuator.id/]</label>
	    					<ul class="interior">
		[for (actuatortopic : Topic | actuator.suscribe_on_topic)]
			[if(pnode.component->selectByKind(DataBase)->size()>0)]
	    						<li><a href="TopicLecture?top=[actuatortopic.name/]">Topic[actuatortopic.name/]</a></li>
			[/if]
			[if(pnode.component->selectByKind(DataBase)->size()=0)]
	    						<li><a href="#r">Topic[actuatortopic.name/]</a></li>
			[/if]
		[/for]
	    					</ul>
	    				</li>
	[/for]
	    			</ul>
	    		</li>
	    	</ul>
		</li>
[/for]
	</ul>
</body>
</html>
	[/file]
[/template]




[template public generateDashboardTopicLecture(anEnvironment : Environment)]
[comment @main/]
	[file ('dashboard/dashboard2/src/main/webapp/WEB-INF/topicLecture.jsp', false, 'UTF-8')]
<%@ page language="java" contentType="text/html; charset=UTF-8"     pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ page isELIgnored="false" %> 
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <link type="text/css" href="css/Main.css" rel="stylesheet">
</head>
<body>
     <h1>Datos publicados</h1>
     <p>Total de datos publicados : ${ldata.size()}</p>
	<ul id="datalist">
     	<c:forEach var="data" items="${ldata}">		
			<li><p>${data.getString("value")}</p></li>
		</c:forEach>
	</ul>
</body>
</html>
	[/file]
[/template]




[template public generateDashboardMainServlet(anEnvironment : Environment)]
[comment @main/]
	[file ('dashboard/dashboard2/src/main/java/dashboard2/Main.java', false, 'UTF-8')]
package dashboard2;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@WebServlet("/Main")
public class Main extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//        response.setContentType("text/html");
//        PrintWriter out = response.getWriter();
//        out.println("<h3>Hello World!</h3>");
        
		//logger.info("Atendiendo GET Bienvenida");
		System.out.println("Atendiendo get Main");
		HttpSession session = request.getSession();
		System.out.println("Session id: "+session.getId());
		//logger.info("Session new? "+session.isNew());
		RequestDispatcher view = request.getRequestDispatcher("WEB-INF/Main.jsp");
		//RequestDispatcher view = request.getRequestDispatcher("pages/index.html");
		view.forward(request,response);
    }
    
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("Atendiendo post Main");
		HttpSession session = request.getSession();
		System.out.println("Session id: "+session.getId());
		
		
	}
}
	[/file]
[/template]





[template public generateDashboardTopicLectureServlet(anEnvironment : Environment)]
[comment @main/]
	[file ('dashboard/dashboard2/src/main/java/dashboard2/TopicLecture.java', false, 'UTF-8')]
package dashboard2;

import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.JSONObject;


@WebServlet("/TopicLecture")
public class TopicLecture extends HttpServlet {
	
	public static int getPortTopic(String topicname){
		BufferedReader reader;
		String topic="";
		boolean encontrado=false;
		int port=4000;
		
		try {
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/topicports.txt"))));

			String line;
	    
			for (int i = 0; !encontrado && ((line = reader.readLine()) != null); i++)
			{
			  if(line.equals(topicname)) {
				  encontrado=true;
			  }
			  if(line.length()>2 && line.substring(0, 2).equals("40")) {
				  port = port + 1;
			  }
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	        
	    return port;
	}
	
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//        response.setContentType("text/html");
//        PrintWriter out = response.getWriter();
//        out.println("<h3>Hello World!</h3>");
        
		//logger.info("Atendiendo GET Bienvenida");
		System.out.println("Atendiendo get Bienvenida");
		HttpSession session = request.getSession();
		System.out.println("Session id: "+session.getId());
		
		System.out.println("*****"+getPortTopic(request.getParameter("top")));
	    URL urlForGetRequest = new URL("http://192.168.99.100:" + getPortTopic(request.getParameter("top")) + "/api/" + request.getParameter("top"));
	    String readLine = null;
	    HttpURLConnection conection = (HttpURLConnection) urlForGetRequest.openConnection();
	    conection.setRequestMethod("GET");
	    conection.setRequestProperty("userId", "a1bcdef"); // set userId its a sample here
	    int responseCode = conection.getResponseCode();
	    Object obj = null;
	    JSONObject jsonobject = null;
        List<JSONObject> ldata = new ArrayList<JSONObject>();
        String result = "";
       
	    if (responseCode == HttpURLConnection.HTTP_OK) {
	        BufferedReader in = new BufferedReader(
	            new InputStreamReader(conection.getInputStream()));
	        StringBuffer responsee = new StringBuffer();
	        
	        for (int i = 0; (readLine = in .readLine()) != null; i++) {
	        	//jsonobject = new JSONObject(readLine);
	    	    //ldata.add(jsonobject);
	            responsee.append(readLine);
	        } in .close();
	        // print result
	        result = responsee.toString();
	        result = result.substring(1, result.length()-1);
	        String['['/]] ldatastring = result.split("},");
	        for (int i = 1; i < ldatastring.length; i++) {
	        	jsonobject = new JSONObject(ldatastring['['/]i] + "}");
	        	ldata.add(jsonobject);
	        }
//	        ldata.get(0).get("value");
//	        System.out.println("JSON String Result " + ldata.size() + " " + ldata.get(0).getString("value").toString());
		    request.setAttribute("ldata", ldata);
		    request.setAttribute("size", ldata.size());
		    //ldata = (List<JSONObject>) request.getAttribute("ldata");
	//	    System.out.println(ldata.size());
	        //GetAndPost.POSTRequest(response.toString());

	    } else {
	        System.out.println("GET NOT WORKED");
	    }
				
		//logger.info("Session new? "+session.isNew());
		RequestDispatcher view = request.getRequestDispatcher("WEB-INF/topicLecture.jsp");
		view.forward(request,response);
    }
}
	[/file]
[/template]




[template public generateDashboardDockerfile(anEnvironment : Environment)]
[comment @main/]
	[file ('dashboard/Dockerfile', false, 'UTF-8')]
FROM dashboard:1

COPY . //


ENTRYPOINT ['['/]"sh", "executedash.sh"]
	[/file]
[/template]




[template public generateDashboardTopicPorts(anEnvironment : Environment)]
[comment @main/]
	[file ('dashboard/dashboard2/src/main/resources/topicports.txt', false, 'UTF-8')]
		[for (pnode : ProcessNode | anEnvironment.node->selectByKind(ProcessNode))]
			[if(pnode.component->selectByKind(DataBase)->size()>0)]
				[for (topic : Topic | pnode.create_topic)]
[topic.name/]
				[/for]
[3999+i/]
			[/if]
		[/for]
	[/file]
[/template]


[template public generatePomXML(anEnvironment : Environment)]
[comment @main/]
	[file ('dashboard/dashboard2/pom.xml', false, 'UTF-8')]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>dashboard.iot</groupId>
  <artifactId>dashboard2</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>dashboard2 Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
   <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
	<dependency>
	  <groupId>javax.servlet</groupId>
	  <artifactId>javax.servlet-api</artifactId>
	  <version>3.0.1</version>
	  <scope>provided</scope>
	</dependency>
			<!-- JSTL libraries for JSP pages -->
	<dependency>
		<groupId>jstl</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
	</dependency>
	<dependency>
		<groupId>taglibs</groupId>
		<artifactId>standard</artifactId>
		<version>1.1.2</version>
	</dependency>
<!-- https://mvnrepository.com/artifact/org.json/json -->
	<dependency>
	    <groupId>org.json</groupId>
	    <artifactId>json</artifactId>
	    <version>20160810</version>
	</dependency>
  </dependencies>
  <build>
    <finalName>dashboard2</finalName>
    <plugins>
    <!-- https://mvnrepository.com/artifact/org.apache.tomcat.maven/tomcat7-maven-plugin -->
		<plugin>
          <groupId>org.apache.tomcat.maven</groupId>
          <artifactId>tomcat7-maven-plugin</artifactId>
          <version>2.2</version>
        </plugin>
    </plugins>
  </build>
</project>
	[/file]
[/template]



[template public generateWebXML(anEnvironment : Environment)]
[comment @main/]
	[file ('dashboard/dashboard2/src/main/webapp/WEB-INF/web.xml', false, 'UTF-8')]
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
  
  <welcome-file-list>
    <welcome-file>Main</welcome-file>
  </welcome-file-list>
  
</web-app>
	[/file]
[/template]



[comment ----------END DASHBOARD----------------------------------------------------------------------------------------------/]




[comment ----------FIWARE CONFIGURATION----------------------------------------------------------------------------------------------/]

[template public generateFiwareDeviceConfiguration(anEnvironment : Environment)]
[comment @main/]
[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/Fiware/configurationFiware/'+pnode.name.replaceAll('_','')+pnode.id+'.sh', false, 'UTF-8')]
#!/bin/bash

[comment]IP=$((100 + [i/]))[/comment]
[comment]PORT=$((5149 + [i/]))[/comment]

curl -iX POST \
  'http://localhost:4041/iot/services' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: openiot' \
  -H 'fiware-servicepath: /' \
  -d '{
 "services": ['['/]
   {
     "apikey":      "",
     "cbroker":     "http://orion:8082",
     "entity_type": "Devices",
     "resource":    ""
   }
 ]
}'

		[for(sensor: Sensor | pnode.edge_node->selectByKind(Sensor))]
curl -iX POST \
  'http://localhost:4041/iot/devices' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: openiot' \
  -H 'fiware-servicepath: /' \
  -d '{
 "devices": ['['/]
   {
     "device_id":   "[sensor.name +'_'+sensor.id/]",
     "entity_name": "urn:ngsi-ld:[sensor.name/]:[sensor.id/]",
     "entity_type": "[if (sensor.additionalconfiguration->selectByKind(RedirectionConfiguration)->size() > 0)][sensor.additionalconfiguration->selectByKind(RedirectionConfiguration).topic.name/][/if][if (sensor.additionalconfiguration->selectByKind(RedirectionConfiguration)->size() = 0)][sensor.publish_on_topic.name/][/if]",
     "protocol":    "JSON",
     "transport":   "MQTT",
     "timezone":    "Europe/Berlin",
     "attributes": ['['/]
       { "object_id": "v", "name": "value", "type": "Integer" }
     ],
     "static_attributes": ['['/]
       { "name":"name", "type": "String", "value": "[sensor.name/]"}
     ]
   }
 ]
}'
		[/for]

    

	[for(actuator: Actuator | pnode.edge_node->selectByKind(Actuator))]
curl -iX POST \
  'http://localhost:4041/iot/devices' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: openiot' \
  -H 'fiware-servicepath: /' \
  -d '{
 "devices": ['['/]
   {
     "device_id":   "[actuator.name +'_'+actuator.id/]",
     "entity_name": "urn:ngsi-ld:[actuator.name/]:[actuator.id/]",
     "entity_type": "Actuator",
     "protocol":    "JSON",
     "transport":   "MQTT",
     "timezone":    "Europe/Berlin",
     "static_attributes": ['['/]
       { "name":"name", "type": "String", "value": "[actuator.name/]"}
     ]
   }
 ]
}'
		[/for]

		[for(topic: Topic | pnode.component->selectByKind(ProcessEngine).rule.apply_to->asSet())]
curl -iX POST \
  'http://localhost:4041/iot/devices' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: openiot' \
  -H 'fiware-servicepath: /' \
  -d '{
 "devices": ['['/]
   {
     "device_id":   "['Topic' +'_'+topic.name/]",
     "entity_name": "urn:ngsi-ld:['Topic_'+topic.name/]:0",
     "entity_type": "Topic",
     "protocol":    "JSON",
     "transport":   "MQTT",
     "timezone":    "Europe/Berlin",
     "attributes": ['['/]
       { "object_id": "v", "name": "value", "type": "Integer" }
     ],
     "static_attributes": ['['/]
       { "name":"name", "type": "String", "value": "['Topic_'+topic.name/]"}
     ]
   }
 ]
}'
		[/for]

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
		[for(topic: Topic | pnode.component->selectByKind(ProcessEngine).rule.apply_to->asSet())]			
--------------------------------------------------------
curl -iX POST \
  --url 'http://localhost:8082/v2/subscriptions' \
  --header 'content-type: application/json' \
  -H 'fiware-service: openiot' \
  --data '{
  "description": "Suscription description",
  "subject": {
    "entities": ['['/]{"idPattern": "urn:ngsi-ld:['Topic_'+topic.name/]:0"}],
    "condition": {
      "attrs": ['['/] "value" ]
    }
  },
  "notification": {
    "http": {
      "url": "http://perseo-fe-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:9090/notices"
    }
  }
}'
		[/for]

		[for(rule : Rule | pnode.component->selectByKind(ProcessEngine).rule)]
------------
curl -iX POST \
  'http://localhost:9090/rules' \
  -H 'fiware-service: openiot' \
  -H 'fiware-servicepath: /' \
  -H 'Content-Type: application/json' \
  -d '{
  "name": "rule[rule.id + '_' +rule.apply_to.name.toLowerCase()/]",
  "text":"select *,\"rule[rule.id + '_' +rule.apply_to.name.toLowerCase()/]\" as ruleName from pattern ['['/]every [rule.rule/] and id=\"urn:ngsi-ld:['Topic_'+rule.apply_to.name/]:0\")]",
  "action": {
        "type": "post",
        "template": "{\"value\":${value}}",
        "parameters": {
            "url": "http://mnc[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:5150/[rule.generates_notification->selectByKind(TopicNotification).publish_on_topic.name + '_' + rule.id/]",
            "headers": {
                        "Content-type": "application/json"
            }
        }
    }
}'
		[/for]			

	[/file]
[/for]
[/template] 




[template public generateFiwareMiddlewareNodeComponent(anEnvironment : Environment)]
[comment @main/]
[for(fog: FogNode | anEnvironment.node->filter(FogNode))]
	[if (fog.component->selectByKind(ProcessEngine)->size()>0)]
		[file ('/Fiware/MiddlewareNodeComponent/MNC'+fog.name+ '/MNC'+fog.name.replaceAll('_','') +'.js', false, 'UTF-8')]
var express = require('express');
var app = express();
var router = express.Router();
var mqtt = require('mqtt')

[comment]var client[fogi.name+fogi.id/]  = mqtt.connect('tcp://192.168.99.[100+i/]:1883')[/comment]
var client[fog.name+fog.id/]  = mqtt.connect('tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883')
client[fog.name+fog.id/].on('connect', function () {
  console.log('Connected to Mosquitto of Swarm [fog.name+fog.id/] : tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883')
})


		[for (rule : Rule | fog.component->selectByKind(ProcessEngine).rule)]
router.post('/[rule.generates_notification->selectByKind(TopicNotification).publish_on_topic.name + '_' + rule.id/]', function(req, res) {
 console.log('Handling post request [rule.generates_notification->selectByKind(TopicNotification).publish_on_topic.name + '_' + rule.id/]');
 client[fog.name+fog.id/].publish('[rule.generates_notification->selectByKind(TopicNotification).publish_on_topic.name/]', '[rule.generates_notification.name/]: [rule.generates_notification.message/]');
 return res.json({
    success: true
});
});
		[/for]


//module.exports = router;

app.use("/",router);

app.listen(5150);
		[/file]
	[/if]
[/for]
[/template]




[template public generateFiwareOrionTopicManager(anEnvironment : Environment)]
[comment @main/]
[for(fog: FogNode | anEnvironment.node->filter(FogNode))]
	[comment][if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0 or anEnvironment.node->filter(FogNode).edge_node->selectByKind(Sensor).additionalconfiguration->selectByKind(RedirectionConfiguration).topic->asOrderedSet()->intersection(fog.component->selectByKind(ProcessEngine).rule.apply_to->asOrderedSet())->size()>0)] [/comment]	
	[if (fog.component->selectByKind(ProcessEngine)->size()>0)]		
		[file ('/Fiware/OrionTopicManager/OTM'+fog.name+ '/OTM'+fog.name.replaceAll('_','') +'.js', false, 'UTF-8')]
var mqtt = require('mqtt')
var client  = mqtt.connect('tcp://mosquitto-[fog.name.replaceAll('_','').toLowerCase()+fog.id/]:1883')

client.on('connect', function () {
  console.log('Connected to Mosquitto!')
})

			[for(topic : Topic | fog.component->selectByKind(ProcessEngine).rule.apply_to->asSet())]
client.subscribe("[topic.name/]",{qos:1});
console.log('Suscribed to topic [topic.name/]!')
			[/for]

			
client.on('message',function(topic, message, packet){
			[for(topic : Topic | fog.component->selectByKind(ProcessEngine).rule.apply_to->asSet())]
				[if(i=1)]
	if(topic === '[topic.name/]'){
		console.log("Message received: " + message + " --- Publishing to Orion.");
		client.publish('/1234/Topic_[topic.name.replaceAll('_','')/]/attrs', message);
				[/if]
				[if i>1 and i<>fog.component->selectByKind(ProcessEngine).rule.apply_to->asSet()->size()+1]
	} else if(topic === '[topic.name/]'){
		console.log("Message received: " + message + " --- Publishing to Orion.");
		client.publish('/1234/Topic_[topic.name.replaceAll('_','')/]/attrs', message);
				[/if]
				[if i=(fog.component->selectByKind(ProcessEngine).rule.apply_to->asSet()->size())]
	}
				[/if]
			[/for]
	
});
			

		[/file]
	[/if]
[/for]
[/template]




[template public generateFiwareMiddlewareNodeComponentDockerfile(anEnvironment : Environment)]
[comment @main/]
[for(fog: FogNode | anEnvironment.node->filter(FogNode))]
	[if (fog.component->selectByKind(ProcessEngine)->size()>0)]		
		[file ('/Fiware/MiddlewareNodeComponent/MNC'+fog.name+ '/Dockerfile', false, 'UTF-8')]
FROM nodebase:1
COPY /['MNC'+fog.name.replaceAll('_','') +'.js'/] /
ENTRYPOINT ['['/]"node", "['MNC'+fog.name.replaceAll('_','') +'.js'/]"]
		[/file]
	[/if]
[/for]
[/template]




[template public generateFiwareOrionTopicManagerDockerfile(anEnvironment : Environment)]
[comment @main/]
[for(fog: FogNode | anEnvironment.node->filter(FogNode))]
	[if (fog.component->selectByKind(ProcessEngine)->size()>0)]		
		[file ('/Fiware/OrionTopicManager/OTM'+fog.name+ '/Dockerfile', false, 'UTF-8')]
FROM nodebase:1
COPY /['OTM'+fog.name.replaceAll('_','') +'.js'/] /
ENTRYPOINT ['['/]"node", "['OTM'+fog.name.replaceAll('_','') +'.js'/]"]
		[/file]
	[/if]
[/for]
[/template]




[template public generateFiwareDCompose(anEnvironment : Environment)]
[comment @main/]
[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/Fiware/Compose/'+pnode.name.replaceAll('_','')+pnode.id+'/docker-compose.yml', false, 'UTF-8')]
version: "3.5"
services:
  # Orion is the context broker
  orion-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:
    image: fiware/orion:2.0.0
    hostname: orion-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
    container_name: fiware-orion
    depends_on:
      - mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
    networks:
      - my-network
    expose:
      - "1026"
    ports:
      - "8082:1026"
    command: -dbhost mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/] -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1


  # JSON IoTAgent
  iot-agent-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:
    image: fiware/iotagent-json
    hostname: iot-agent-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
      - mosquitto-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
    networks:
      - my-network
    expose:
      - "4041"
    ports:
      - "4041:4041"
    environment:
      - IOTA_CB_HOST=orion-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
      - IOTA_CB_PORT=1026
      - IOTA_NORTH_PORT=4041
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_REGISTRY_TYPE=mongodb
      - IOTA_MONGO_HOST=mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
      - IOTA_MONGO_PORT=27017
      - IOTA_MONGO_DB=iotagent-json
      - IOTA_MQTT_HOST=mosquitto-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/] # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
      - IOTA_PROVIDER_URL=http://iot-agent:4041


  # Database
  mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:
    image: mongo:3.6
    hostname: mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
    container_name: db-mongo
    expose:
      - "27017"
    ports:
      - "27017:27017"
    networks:
      - my-network
    command: --bind_ip_all --smallfiles
    volumes:
      - mongo-db:/data

[if (pnode.component->selectByKind(ProcessEngine)->size()>0)]
  perseo-core-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:
    image: fiware/perseo-core
    environment:
      - PERSEO_FE_URL=http://perseo-fe-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:9090
      - MAX_AGE=6000
    networks:
      - my-network
    depends_on:
      - mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure


  perseo-fe-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:
    image: fiware/perseo
    networks:
      - my-network
    ports:
      - 9090:9090
    depends_on:
      - perseo-core-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
    environment:
      - PERSEO_MONGO_ENDPOINT=mongo-db-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
      - PERSEO_CORE_URL=http://perseo-core-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:8080
      - PERSEO_LOG_LEVEL=debug
      - PERSEO_ORION_URL=http://orion-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:1026/
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
[/if]

  # Other services
  mosquitto-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]:
    image: eclipse-mosquitto
    hostname: mosquitto-[pnode.name.replaceAll('_','').toLowerCase()+pnode.id/]
    container_name: mosquitto
    expose:
      - "1883"
      - "9001"
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - my-network

networks:
  my-network:
    external:
      name: my-network

volumes:
  mongo-db: ~
	[/file]
[/for]
[/template]




[template public generateDeployFiware(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/DeployFiware.sh', false, 'UTF-8')]
#!/bin/bash

echo "
   _   _   _   _   _   _   _   _   _     _   _   _   _   _   _   _   _   _   _  
  / \ / \ / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ 
 ( I | n | i | c | i | a | n | d | o ) ( d | e | s | p | l | i | e | g | u | e )
  \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ 
"
echo "
   _   _   _   _   _   _   _     _   _   _   _   _  
  / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ 
 ( C | r | e | a | n | d | o ) ( S | w | a | r | m )
  \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/  
"

parent_path=$( cd "$(dirname "${BASH_SOURCE['['/]0]}")" ; cd .. ; cd .. ; pwd -P )
ip=158.49.189.138:5000
pass=pepita123*

rm "$parent_path"/gencode/token
rm "$parent_path"/gencode/tabladirecciones
rm "$parent_path"/gencode/ipenvironment
echo y | docker-machine rm [for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))][pnode.name.replaceAll('_', '') + pnode.id/] [/for]Environment

docker-machine create --driver virtualbox Environment

docker-machine ls >> "$parent_path"/gencode/ipenvironment
IPENV=$(grep -oE "\b(['['/]0-9]{1,3}\.){3}['['/]0-9]{1,3}\b" "$parent_path"/gencode/ipenvironment)
docker-machine ssh Environment "docker swarm init --advertise-addr "$IPENV";exit" >> "$parent_path"/gencode/token
docker-machine ssh Environment "docker network create --driver overlay --attachable my-network;docker service create --name=viz --publish=8080:8080/tcp --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer;exit"

i=0
while IFS= read -r line; do
  ((i++))
  if ['['/]['['/] "$i" == '5' ]]; then
    echo $line
    TOKEN=$line
  fi
done < "$parent_path"/gencode/token

	[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
docker-machine create --driver virtualbox --virtualbox-memory "2000" [pnode.name.replaceAll('_', '') + pnode.id/]
docker-machine scp "$parent_path"/gencode/daemon.json [pnode.name.replaceAll('_', '') + pnode.id/]:~
docker-machine scp -r "$parent_path"/tutorials.IoT-over-MQTT [pnode.name.replaceAll('_', '') + pnode.id/]:~
docker-machine scp "$parent_path"/gencode/Fiware/configurationFiware/[pnode.name.replaceAll('_', '') + pnode.id/].sh [pnode.name.replaceAll('_', '') + pnode.id/]:~
docker-machine scp "$parent_path"/gencode/Fiware/Compose/[pnode.name.replaceAll('_', '') + pnode.id/]/docker-compose.yml [pnode.name.replaceAll('_', '') + pnode.id/]:~/tutorials.IoT-over-MQTT
docker-machine ssh [pnode.name.replaceAll('_', '') + pnode.id/] "$TOKEN;sudo cp ~/daemon.json /etc/docker;sudo /etc/init.d/docker restart;exit"
docker-machine ssh Environment "docker service create --network my-network --replicas 1 -p 1111:1883 --constraint node.hostname==[pnode.name.replaceAll('_', '') + pnode.id/] --name enablingnetwork eclipse-mosquitto;exit"
docker-machine ssh [pnode.name.replaceAll('_', '') + pnode.id/] "sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose;sudo chmod +x /usr/local/bin/docker-compose;cd ~/tutorials.IoT-over-MQTT; sudo bash services start;sleep 10s;bash ~/[pnode.name.replaceAll('_', '') + pnode.id/].sh;exit"
docker-machine ssh Environment "docker service rm enablingnetwork;exit"
	[/for]
echo "
   _   _   _   _   _     _   _   _   _   _   _  
  / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ 
 ( S | w | a | r | m ) ( c | r | e | a | d | o )
  \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/  
"

	[for(sensor : Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
		[if sensor.data.datasource.oclIsTypeOf(CSVload)]
echo "$pass" | cp "$parent_path"/gencode/[sensor.data.datasource->filter(LoadFromFile).FileName/].csv "$parent_path"/gencode/[sensor.name + sensor.id/]/src/main/resources
		[/if]
	[/for]

echo *Dockerizando todos los componentes generados  ----------------
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
cd "$parent_path"/gencode/[actuator.name + actuator.id/]
echo "$pass" | sudo mvn clean package docker:build
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
cd "$parent_path"/gencode/[device.name + device.id/]
echo "$pass" | sudo mvn clean package docker:build
	[/for]
	[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
cd "$parent_path"/gencode/[pnode.name.replaceAll('_', '') + pnode.id/]
echo "$pass" | sudo mvn clean package docker:build
	[/for] 
	[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if (pnode.component->selectByKind(ProcessEngine)->size()>0)]		
cd "$parent_path"/gencode/Fiware/MiddlewareNodeComponent/['MNC'+pnode.name/]
echo "$pass" | sudo docker build -t localhost:5000/mnc[pnode.name.replaceAll('_', '').toLowerCase()/] .

cd "$parent_path"/gencode/Fiware/OrionTopicManager/['OTM'+pnode.name/]
echo "$pass" | sudo docker build -t localhost:5000/otm[pnode.name.replaceAll('_', '').toLowerCase()/] .
		[/if]
	[/for]
	[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[comment ESTE IF ESTABA COMENTADO, LO ANOTO PORQUE NO SE EL MOTIVO/]
		[if(pnode.component->selectByKind(DataBase)->size()>0)]
cd "$parent_path"/gencode/apis/api[pnode.name.replaceAll('_', '') + pnode.id/]
echo "$pass" | sudo docker build -t localhost:5000/api[pnode.name.replaceAll('_', '').toLowerCase() + pnode.id/] .
		[/if]
	[/for]
cd "$parent_path"/gencode/dashboard/dashboard2
mvn clean install
cd ..
echo "$pass" | sudo docker build . -t localhost:5000/dashboard
 
echo *Componentes Dockerizados! ---------------

echo *Subiendo imagenes a DockerHub ----------------
echo "$pass" |sudo docker login --username joseinformatica96 --password-stdin
	[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
echo "$pass" | sudo -S docker push localhost:5000/[pnode.name.replaceAll('_', '').toLowerCase() + pnode.id/]
		[comment ESTE IF ESTABA COMENTADO, LO ANOTO PORQUE NO SE EL MOTIVO/]
		[if(pnode.component->selectByKind(DataBase)->size()>0)]
echo "$pass" | sudo -S docker push localhost:5000/api[pnode.name.replaceAll('_', '').toLowerCase() + pnode.id/]
		[/if]
	[/for]
	[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if (pnode.component->selectByKind(ProcessEngine)->size()>0)]
echo "$pass" | sudo -S docker push localhost:5000/mnc[pnode.name.replaceAll('_', '').toLowerCase()/]

echo "$pass" | sudo -S docker push localhost:5000/otm[pnode.name.replaceAll('_', '').toLowerCase()/]
		[/if]
	[/for] 
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
echo "$pass" | sudo -S docker push localhost:5000/[actuator.name.toLowerCase() + actuator.id/]
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
echo "$pass" | sudo -S docker push localhost:5000/[device.name.toLowerCase() + device.id/]
	[/for]
echo "$pass" | sudo -S docker push localhost:5000/dashboard
echo *Subida de imagenes finalizada! ----------------
echo *Bajando imagenes ----------------
	[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]
[comment]COMENTO EL TEMA DE LA API PRA ENCARGARME MÃ�S TARDE: CONTROLAR QUE SOLO SE GENERE SI EXISTE DB EN EL PROCESS NODE[/comment]
docker-machine ssh [pnode.name.replaceAll('_', '') + pnode.id/] "echo "$pass" | docker login --username joseinformatica96 --password-stdin;[if (pnode.component->selectByKind(DataBase)->size()>0)]docker pull 158.49.189.138:5000/api[pnode.name.replaceAll('_', '').toLowerCase() + pnode.id/];[/if]docker pull 158.49.189.138:5000/[pnode.name.replaceAll('_', '').toLowerCase() + pnode.id/];[if (pnode.component->selectByKind(ProcessEngine)->size()>0)]docker pull 158.49.189.138:5000/mnc[pnode.name.replaceAll('_', '').toLowerCase()/];docker pull 158.49.189.138:5000/otm[pnode.name.replaceAll('_', '').toLowerCase()/];[/if][for(actuator: Actuator | pnode.edge_node->filter(Actuator))]docker pull 158.49.189.138:5000/[actuator.name.toLowerCase() + actuator.id/];[/for][for(device: Sensor | pnode.edge_node->filter(Sensor))]docker pull 158.49.189.138:5000/[device.name.toLowerCase() + device.id/];[/for]exit"
	[/for]

echo *Imagenes bajadas!----------------

echo *Deplegando entorno IoT!----------------
	docker-machine ssh Environment "[for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))][if (pnode.component->selectByKind(DataBase)->size()>0)]docker service create --network my-network --replicas 1 -p [i+3999/]:4000 --constraint node.hostname==[pnode.name.replaceAll('_', '') + pnode.id/] --name api[pnode.name.replaceAll('_', '') + pnode.id/] "$ip"/api[pnode.name.replaceAll('_', '').toLowerCase() + pnode.id/];[/if][/for][for(pnode: ProcessNode | anEnvironment.node->filter(ProcessNode))]docker service create --network my-network --replicas 1 --constraint node.hostname==[pnode.name.replaceAll('_', '') + pnode.id/] --name [pnode.name.replaceAll('_', '') + pnode.id/] "$ip"/[pnode.name.replaceAll('_', '').toLowerCase() + pnode.id/];[if (pnode.component->selectByKind(ProcessEngine)->size()>0)]docker service create --network my-network --hostname mnc[pnode.name.replaceAll('_', '').toLowerCase()+pnode.id/] --replicas 1 --constraint node.hostname==[pnode.name.replaceAll('_', '') + pnode.id/] --name mnc[pnode.name.replaceAll('_', '').toLowerCase()+pnode.id/] "$ip"/mnc[pnode.name.replaceAll('_', '').toLowerCase()/];docker service create --network my-network --hostname otm[pnode.name.replaceAll('_', '').toLowerCase()+pnode.id/] --replicas 1 --constraint node.hostname==[pnode.name.replaceAll('_', '') + pnode.id/] --name otm[pnode.name.replaceAll('_', '').toLowerCase()+pnode.id/] "$ip"/otm[pnode.name.replaceAll('_', '').toLowerCase()/];[/if][for(actuator: Actuator | pnode.edge_node->filter(Actuator))]docker service create --network my-network --replicas [actuator.quantity/] --constraint node.hostname==[pnode.name.replaceAll('_', '') + pnode.id/] --name [actuator.name.toLowerCase() + actuator.id/] "$ip"/[actuator.name.toLowerCase() + actuator.id/];[/for][for(device: Sensor | pnode.edge_node->filter(Sensor))]docker service create --network my-network --replicas [device.quantity/] --constraint node.hostname==[pnode.name.replaceAll('_', '') + pnode.id/] --name [device.name.toLowerCase() + device.id/] "$ip"/[device.name.toLowerCase() + device.id/];[/for][/for]echo "$pass" | docker login --username joseinformatica96 --password-stdin;docker pull 158.49.189.138:5000/dashboard;docker service create --constraint node.hostname==Environment -p 8081:8080 --replicas 1 --name Dashboard "$ip"/dashboard;exit"
echo *Entorno IoT desplegado!----------------
	[/file]
[/template]



[template public generateParalelDeployFiware(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/ParalelDeploy/ParalelDeployFiware.sh', false, 'UTF-8')]
#!/bin/bash

rm "$parent_path"/gencode/token &
echo y | docker-machine rm [for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))][fog.name.replaceAll('_','') + fog.id/] [/for]Environment 

bash "$parent_path"/gencode/Fiware/ParalelDeploy/Dockerize.sh

wait

echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
echo ------------------------------------------------------- UPLOADING DOCKERS TO REGISTRY -----------------------------------------------------------------------
echo -------------------------------------------------------------------------------------------------------------------------------------------------------------

bash "$parent_path"/gencode/Fiware/ParalelDeploy/Pushing.sh

wait


bash "$parent_path"/gencode/Fiware/ParalelDeploy/CreateMachines.sh

wait

docker-machine ssh Environment "docker swarm init --advertise-addr 192.168.99.100;exit" >> "$parent_path"/gencode/token
docker-machine ssh Environment "docker network create --driver overlay --attachable my-network;docker service create --name=viz --publish=8080:8080/tcp --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer;exit"

i=0
while IFS= read -r line; do
  ((i++))
  if ['['/]['['/] "$i" == '5' ]]; then
    echo $line
    TOKEN=$line
  fi
done < "$parent_path"/gencode/token

	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
bash "$parent_path"/gencode/Fiware/ParalelDeploy/ConfigureMachine_[fog.name.replaceAll('_','') + fog.id/].sh "$TOKEN" &
	[/for]

wait

[comment]TO DO - paralelize clouds machines [/comment]
	[for(fog: CloudNode | anEnvironment.node->filter(ProcessNode)->filter(CloudNode))]
docker-machine create --driver virtualbox [fog.name.replaceAll('_','') + fog.id/]
	[/for]



echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
echo ------------------------------------------------------- DOWNLOADING DOCKERS TO REGISTRY ---------------------------------------------------------------------
echo -------------------------------------------------------------------------------------------------------------------------------------------------------------

bash "$parent_path"/gencode/Fiware/ParalelDeploy/Pulling.sh

wait

echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
echo ------------------------------------------------------- DEPLOYING IoT ENVIRONMENT ---------------------------------------------------------------------------
echo -------------------------------------------------------------------------------------------------------------------------------------------------------------

bash "$parent_path"/gencode/Fiware/ParalelDeploy/ServicesDeploy.sh

	[/file]
[/template]


[template public ParalelizableProcess(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/ParalelDeploy/ParalelizableProcess.sh', false, 'UTF-8')]

bash "$parent_path"/gencode/Fiware/ParalelDeploy/CreateMachines.sh

wait

bash "$parent_path"/gencode/Fiware/ParalelDeploy/Dockerize.sh

	[/file]
[/template]




[template public ConfigureMachines(anEnvironment : Environment)]
[comment @main/]
[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
	[file ('/Fiware/ParalelDeploy/ConfigureMachine_'+ fog.name.replaceAll('_','') + fog.id +'.sh', false, 'UTF-8')]

#!/bin/bash

docker-machine scp "$parent_path"/gencode/daemon.json [fog.name.replaceAll('_','') + fog.id/]:~
docker-machine scp -r "$parent_path"/tutorials.IoT-over-MQTT [fog.name.replaceAll('_','') + fog.id/]:~
docker-machine scp "$parent_path"/gencode/Fiware/configurationFiware/[fog.name.replaceAll('_','') + fog.id/].sh [fog.name.replaceAll('_','') + fog.id/]:~
docker-machine scp "$parent_path"/gencode/Fiware/Compose/[fog.name.replaceAll('_','') + fog.id/]/docker-compose.yml [fog.name.replaceAll('_','') + fog.id/]:~/tutorials.IoT-over-MQTT
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] ""$1";sudo cp ~/daemon.json /etc/docker;sudo /etc/init.d/docker restart;exit"
docker-machine ssh Environment "docker service create --network my-network --replicas 1 -p [1110 + i/]:1883 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name enablingnetworkfog[fog.name.replaceAll('_','').toLowerCase()+fog.id/] eclipse-mosquitto;exit"
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] "sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose;sudo chmod +x /usr/local/bin/docker-compose;cd ~/tutorials.IoT-over-MQTT; sudo ./services start;sleep 10s;bash ~/[fog.name.replaceAll('_','') + fog.id/].sh;exit"
docker-machine ssh Environment "docker service rm enablingnetworkfog[fog.name.replaceAll('_','').toLowerCase()+fog.id/];exit"

	[/file]
[/for]
[/template]



[template public InitMASCreateMachines(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/ParalelDeploy/CreateMachines.sh', false, 'UTF-8')]
echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
echo ------------------------------------------------------- CREATING SWARM CLUSTER ------------------------------------------------------------------------------
echo -------------------------------------------------------------------------------------------------------------------------------------------------------------

docker-machine create --driver virtualbox Environment
		[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
docker-machine create --driver virtualbox [fog.name.replaceAll('_','') + fog.id/] &
		[/for]

wait

echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
echo ------------------------------------------------------- SWARM CLUSTER CREATED -------------------------------------------------------------------------------
echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
	[/file]
[/template]



[template public ConfigureManager(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/ParalelDeploy/ConfigureManager.sh', false, 'UTF-8')]
#!/bin/bash

docker-machine ssh Environment "docker swarm init --advertise-addr 192.168.99.100;exit" >> "$parent_path"/gencode/token
docker-machine ssh Environment "docker network create --driver overlay --attachable my-network;docker service create --name=viz --publish=8080:8080/tcp --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer &;exit"

i=0
while IFS= read -r line; do
  ((i++))
  if ['['/]['['/] "$i" == '5' ]]; then
    echo $line
    TOKEN=$line
  fi
done < "$parent_path"/gencode/token
	[/file]
[/template]





[template public Dockerize(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/ParalelDeploy/Dockerize.sh', false, 'UTF-8')]

echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
echo ------------------------------------------------------- DOCKERIZANDO COMPONENTES ----------------------------------------------------------------------------
echo -------------------------------------------------------------------------------------------------------------------------------------------------------------

	[for(sensor : Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
		[if sensor.data.datasource.oclIsTypeOf(CSVload)]
echo pepita123* | cp "$parent_path"/gencode/[sensor.data.datasource->filter(LoadFromFile).FileName/].csv "$parent_path"/gencode/[sensor.name + sensor.id/]/src/main/resources &
		[/if]
	[/for]

echo *Dockerizando todos los componentes generados  ----------------
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
cd "$parent_path"/gencode/[actuator.name + actuator.id/]
echo pepita123* | sudo mvn clean package docker:build &
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
cd "$parent_path"/gencode/[device.name + device.id/]
echo pepita123* | sudo mvn clean package docker:build &
	[/for]
wait
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
cd "$parent_path"/gencode/[fog.name.replaceAll('_','') + fog.id/]
echo pepita123* | sudo mvn clean package docker:build &
	[/for] 
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if (fog.component->selectByKind(ProcessEngine)->size()>0)]		
cd "$parent_path"/gencode/Fiware/MiddlewareNodeComponent/['MNC'+fog.name/]
echo pepita123* | sudo docker build -t localhost:5000/mnc[fog.name.replaceAll('_','').toLowerCase()/] . &
wait
cd "$parent_path"/gencode/Fiware/OrionTopicManager/['OTM'+fog.name/]
echo pepita123* | sudo docker build -t localhost:5000/otm[fog.name.replaceAll('_','').toLowerCase()/] . &
		[/if]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
[comment]		[if(fog.component->selectByKind(DataBase)->size()>0)][/comment]
cd "$parent_path"/gencode/apis/api[fog.name.replaceAll('_','') + fog.id/]
echo pepita123* | sudo docker build -t localhost:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/] . &
[comment]		[/if][/comment]
	[/for]
[comment] cd "$parent_path"/gencode/dashboard/dashboard2[/comment]
[comment] mvn clean install[/comment]
[comment] cd ..[/comment]
[comment] echo pepita123* | sudo docker build . -t localhost:5000/dashboard &[/comment]

wait

echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
echo ------------------------------------------------------- COMPONENTES DOCKERIZADOS ----------------------------------------------------------------------------
echo -------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	[/file]
[/template]



[template public Pushing(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/ParalelDeploy/Pushing.sh', false, 'UTF-8')]
#!/bin/bash
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
echo pepita123* | sudo -S docker push localhost:5000/[fog.name.replaceAll('_','').toLowerCase() + fog.id/] &
[comment]		[if(fog.component->selectByKind(DataBase)->size()>0)] [/comment]
[comment]echo pepita123* | sudo -S docker push localhost:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/] &[/comment]
[comment]		[/if] [/comment]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if (fog.component->selectByKind(ProcessEngine)->size()>0)]
echo pepita123* | sudo -S docker push localhost:5000/mnc[fog.name.replaceAll('_','').toLowerCase()/] &

echo pepita123* | sudo -S docker push localhost:5000/otm[fog.name.replaceAll('_','').toLowerCase()/] &
		[/if]
	[/for]
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
echo pepita123* | sudo -S docker push localhost:5000/[actuator.name.toLowerCase() + actuator.id/] &
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
echo pepita123* | sudo -S docker push localhost:5000/[device.name.toLowerCase() + device.id/] &
	[/for]
[comment]echo pepita123* | sudo -S docker push localhost:5000/dashboard &[/comment]
	[/file]
[/template]
 


[template public Pulling(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/ParalelDeploy/Pulling.sh', false, 'UTF-8')]
#!/bin/bash
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] "echo pepita123* | docker login --username joseinformatica96 --password-stdin;[comment]docker pull 158.49.189.138:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/];docker pull 158.49.189.138:5000/[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/comment][if (fog.component->selectByKind(ProcessEngine)->size()>0)]docker pull 158.49.189.138:5000/mnc[fog.name.replaceAll('_','').toLowerCase()/];docker pull 158.49.189.138:5000/otm[fog.name.replaceAll('_','').toLowerCase()/];[/if][for(actuator: Actuator | fog.edge_node->filter(Actuator))]docker pull 158.49.189.138:5000/[actuator.name.toLowerCase() + actuator.id/];[/for][for(device: Sensor | fog.edge_node->filter(Sensor))]docker pull 158.49.189.138:5000/[device.name.toLowerCase() + device.id/];[/for]exit"
	[/for]

	[/file]
[/template]



[template public ServicesDeploy(anEnvironment : Environment)]
[comment @main/]
	[file ('/Fiware/ParalelDeploy/ServicesDeploy.sh', false, 'UTF-8')]
#!/bin/bash
	docker-machine ssh Environment "[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))][comment]docker service create --replicas 1 -p [i+3999/]:4000 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name api[fog.name.replaceAll('_','') + fog.id/] 158.49.189.138:5000/api[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[/comment][/for][for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]docker service create --network my-network --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name [fog.name.replaceAll('_','') + fog.id/] 158.49.189.138:5000/[fog.name.replaceAll('_','').toLowerCase() + fog.id/];[if (fog.component->selectByKind(ProcessEngine)->size()>0)]docker service create --network my-network --hostname mnc[fog.name.replaceAll('_','').toLowerCase()+fog.id/] --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name mnc[fog.name.replaceAll('_','').toLowerCase()+fog.id/] 158.49.189.138:5000/mnc[fog.name.replaceAll('_','').toLowerCase()/];docker service create --network my-network --hostname otm[fog.name.replaceAll('_','').toLowerCase()+fog.id/] --replicas 1 --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name otm[fog.name.replaceAll('_','').toLowerCase()+fog.id/] 158.49.189.138:5000/otm[fog.name.replaceAll('_','').toLowerCase()/];[/if][for(actuator: Actuator | fog.edge_node->filter(Actuator))]docker service create --network my-network --replicas [actuator.quantity/] --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name [actuator.name.toLowerCase() + actuator.id/] 158.49.189.138:5000/[actuator.name.toLowerCase() + actuator.id/];[/for][for(device: Sensor | fog.edge_node->filter(Sensor))]docker service create --network my-network --replicas [device.quantity/] --constraint node.hostname==[fog.name.replaceAll('_','') + fog.id/] --name [device.name.toLowerCase() + device.id/] 158.49.189.138:5000/[device.name.toLowerCase() + device.id/];[/for][/for][comment]echo pepita123* | docker login --username joseinformatica96 --password-stdin;docker pull 158.49.189.138:5000/dashboard;docker service create --constraint node.hostname==Environment -p 8081:8080 --replicas 1 --name Dashboard 158.49.189.138:5000/dashboard;[/comment]exit"

	[/file]
[/template]

[comment ----------END FIWARE CONFIGURATION----------------------------------------------------------------------------------------------/]





[comment ----------TOKEN SECURITY SERVICE----------------------------------------------------------------------------------------------/]

[template public generateMainTSS(anEnvironment : Environment)]
[comment @main/]

[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/MobilityArchitecture/TSS/'+ fog.name.replaceAll('_','') +'/main.py', false, 'UTF-8')]
import threading

import mqttclient
import time
import TokenManagement as tmn
import datetime

def readIP(nodeName):
    lines = ['['/]]
    with open('/TSS/tabladirecciones') as f:
        lines = f.readlines()

    count = 0
    for line in lines:
        if line.lower().rstrip("\n") == nodeName.lower():
            ip = lines['['/]count + 1].rstrip("\n")
            port = count/2
        count += 1

    return ip, int(port)

def TMN():
    tokenList = ['['/]'135315987', '1354315456657', '425654765', '426547899', '45687965734', '4564356456776', '4354354678890']
    tokenMN = tmn.TokenManagement(tokenList)

    ######################################################### Mosquitto start and configuration
    suscribeTopics = ['['/]"TMN"]
    mqttc = mqttclient.MyMQTTClass("TMN")
    mqttc.setTokenManagerNode(tokenMN)

    tokenManagementThread = threading.Thread(target=tokenMN.tokenLifeManagement)
    tokenManagementThread.start()

    print("Triying connection with Broker Mosquitto at: ")
    connected = False
    while connected != True:
        try:
            ip, port = readIP('[fog.name.replaceAll('_','').toLower()  + fog.id/]')
            mqttc.connect(ip, 1883+port, 60)
            #mqttc.connect("localhost", 1883, 60)
            print("Connection with Broker Mosquitto stablished!")
            connected = True
        except:  # al menos una
            print("No available Mosquitto, triying new connection in 10 seconds...")
            time.sleep(10)

    print("Subscribing to topics: {}".format(suscribeTopics))
    for x in suscribeTopics:
        mqttc.subscribe(x, 0)
        print("Subscribed to topic: {}".format(x))
    print("Suscribed to Topics!")
    #########################################################

    rc = mqttc.run()

def main():
    x = threading.Thread(target=TMN)
    x.start()


main()
	[/file]
[/for]
[/template]



[template public generateMQTTClientTSS(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/MobilityArchitecture/TSS/'+ fog.name.replaceAll('_','') +'/mqttclient.py', false, 'UTF-8')]
from builtins import print
import paho.mqtt.client as mqtt
import json


class MyMQTTClass(mqtt.Client):

    def setTokenManagerNode(self, _tmn):
        self.tmn = _tmn

    def on_connect(self, mqttc, obj, flags, rc):
        print("rc: " + str(rc))

    def on_message(self, mqttc, obj, msg):
        jsonmsg = json.loads(msg.payload.decode("utf-8"))
        print("---------------- DATA RECEPTION, Executing Token Management Response ----------------")
        print("Received Token request from topic {}".format(jsonmsg['['/]"sensorname"]))
        publishOn = jsonmsg['['/]"sensorname"] + 'TMN'
        deviceToken = jsonmsg['['/]"token"]
        response = self.tmn.checkToken(deviceToken)
        mqttresponse = self.tmn.prepareResponseMQTT(response)
        self.publish(publishOn, mqttresponse)
        # response = requests.post(self.url, data=msg.payload)
        # print(response.text)
        # for top in self.publishTopics:
        # self.publish(top, response.text)

    def on_publish(self, mqttc, obj, mid):
        print("mid: " + str(mid))

    def on_subscribe(self, mqttc, obj, mid, granted_qos):
        print("Subscribed: " + str(mid) + " " + str(granted_qos))

    def on_log(self, mqttc, obj, level, string):
        print(string)

    def run(self):
        rc = 0
        while rc == 0:
            rc = self.loop()
        return rc


# If you want to use a specific client id, use
# mqttc = MyMQTTClass("client-id")
# but note that the client id must be unique on the broker. Leaving the client
# id parameter empty will generate a random id for you.

mqttc = MyMQTTClass("TMN")
rc = mqttc.run()

# print("rc: "+str(rc))
	[/file]
[/for]
[/template]



[template public generateTokenManagementTSS(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/MobilityArchitecture/TSS/'+ fog.name.replaceAll('_','') +'/TokenManagement.py', false, 'UTF-8')]
import time


class TokenManagement:

    def __init__(self, tokenList):
        self.tokenList = tokenList
        self.currentToken = tokenList['['/]1]
        self.previousToken = tokenList['['/]0]

    def checkToken (self, token):
        if token == self.currentToken:
            response = 'OK'
        elif token != self.currentToken:
            if token == self.previousToken:
                response = self.currentToken
            else:
                response = 'disconnect'
                print(token, '---', self.previousToken, '---', self.currentToken)
        return response

    def prepareResponseMQTT(self, message):
        mqttresponse = "{ 'token' : '" + message + "'}"
        return mqttresponse


    def tokenLifeManagement(self):
        i=1
        while i < len(self.tokenList):
            self.currentToken = self.tokenList['['/]i]
            self.previousToken = self.tokenList['['/]i-1]
            i=i+1
            time.sleep(200000000)
	[/file]
[/for]
[/template]



[template public generateDockerfileTSS(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/MobilityArchitecture/TSS/'+ fog.name.replaceAll('_','') +'/Dockerfile', false, 'UTF-8')]
FROM joseinformatica96/tss-tds-base:1

COPY . //TSS

ENTRYPOINT ['['/]"python", "/TSS/main.py"]
	[/file]
[/for]
[/template]

[comment ----------END TOKEN SECURITY SYSTEM----------------------------------------------------------------------------------------------/]



[comment ----------TOPIC DISCOVERY SERVICE----------------------------------------------------------------------------------------------/]

[template public generateMainTDS(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/MobilityArchitecture/TDS/'+ fog.name.replaceAll('_','') +'/main.py', false, 'UTF-8')]
import threading

import mqttclient
import time
import mongoclient
import datetime

def readIP(nodeName):
    lines = ['['/]]
    with open('/TDS/tabladirecciones') as f:
        lines = f.readlines()

    count = 0
    for line in lines:
        if line.lower().rstrip("\n") == nodeName.lower():
            ip = lines['['/]count + 1].rstrip("\n")
            port = count/2
        count += 1

    return ip, int(port)

def TDN():
    ######################################################### Create the mongoDB client and inserts the topics wich can be discover by nodes
    ipMongo, port = readIP('[fog.name.replaceAll('_','').toLower() + fog.id/]')

    topicscoll = [for(topic: Topic | fog.create_topic) before ('[') separator (',') after (']')]{"name": "[topic.name/]", "sipnosis": "Future, work", "tags": ['['/]"Future", "Work"],"date": datetime.datetime.utcnow()}
				 [/for]
                  

    clientmongo = mongoclient.mongoclient(ipMongo + ':' + str(27017+port), topicscoll)
    #########################################################

    ######################################################### Mosquitto start and configuration
    suscribeTopics = ['['/]"TDN"]

    mqttc = mqttclient.MyMQTTClass("TDS")
    mqttc.setMongoClient(clientmongo)

    print("Triying connection with Broker Mosquitto at: ")
    connected = False
    while connected != True:
        try:
            ip, port = readIP('[fog.name.replaceAll('_','').toLower() + fog.id/]')
            mqttc.connect(ip, 1883+port, 60)
            #mqttc.connect("localhost", 1883, 60)
            print("Connection with Broker Mosquitto stablished!")
            connected = True
        except:  # al menos una
            print("No available Mosquitto, triying new connection in 10 seconds...")
            time.sleep(10)

    print("Subscribing to topics: {}".format(suscribeTopics))
    for x in suscribeTopics:
        mqttc.subscribe(x, 0)
        print("Subscribed to topic: {}".format(x))
    print("Suscribed to Topics!")
    #########################################################

    rc = mqttc.run()

def main():
    x = threading.Thread(target=TDN)
    x.start()

    # p.start()

main()
	[/file]
[/for]
[/template]



[template public generateMQTTClientTDS(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/MobilityArchitecture/TDS/'+ fog.name.replaceAll('_','') +'/mqttclient.py', false, 'UTF-8')]
from builtins import print
import paho.mqtt.client as mqtt
import json


class MyMQTTClass(mqtt.Client):
    #url = 'http://localhost:6750/predecir'
    publishTopics = ['['/]]

    def setMongoClient(self, _mongoclient):
        self.mongoclient = _mongoclient

    def setPublishTopics(self, _publishTopics):
        self.publishTopics = _publishTopics


    def on_connect(self, mqttc, obj, flags, rc):
        print("rc: " + str(rc))

    def on_message(self, mqttc, obj, msg):
        jsonmsg = json.loads(msg.payload.decode("utf-8"))
        print("---------------- DATA RECEPTION, Executing Topic Discovery Response ----------------")
        print("Received discoveryRequest from topic {}".format(jsonmsg['['/]"sensorname"]))
        publishOn=jsonmsg['['/]"sensorname"]+'TDN'
        response = self.mongoclient.getTopics()
        self.publish(publishOn, response)
        #response = requests.post(self.url, data=msg.payload)
        #print(response.text)
        #for top in self.publishTopics:
            #self.publish(top, response.text)

    def on_publish(self, mqttc, obj, mid):
        print("mid: " + str(mid))

    def on_subscribe(self, mqttc, obj, mid, granted_qos):
        print("Subscribed: " + str(mid) + " " + str(granted_qos))

    def on_log(self, mqttc, obj, level, string):
        print(string)

    def run(self):
        rc = 0
        while rc == 0:
            rc = self.loop()
        return rc


# If you want to use a specific client id, use
# mqttc = MyMQTTClass("client-id")
# but note that the client id must be unique on the broker. Leaving the client
# id parameter empty will generate a random id for you.

mqttc = MyMQTTClass("faceMLcomp")
rc = mqttc.run()

# print("rc: "+str(rc))
	[/file]
[/for]
[/template]



[template public generateMongoClientTDS(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/MobilityArchitecture/TDS/'+ fog.name.replaceAll('_','') +'/mongoclient.py', false, 'UTF-8')]
from pymongo import MongoClient
import datetime

class mongoclient():
    #Create the mongoDB client and inserts the topics wich can be discover by nodes
    def __init__(self, ipMongo, topicscoll):
        self.client = MongoClient(ipMongo, 27017)
        self.db = self.client.tdn
        self.collection = self.db.topics
        self.topicscoll = topicscoll
        result = self.collection.insert_many(topicscoll)
        result.inserted_ids

    def getTopics(self):
        cursor = self.collection.find({})
        result='['['/]'
        for document in cursor:
            del document['['/]'date']
            result = result+str(document)+','
        result = result['['/]:len(result)-1]+']'
        return result
	[/file]
[/for]
[/template]



[template public generateDockerfileTDS(anEnvironment : Environment)]
[comment @main/]
[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/MobilityArchitecture/TDS/'+ fog.name.replaceAll('_','') +'/Dockerfile', false, 'UTF-8')]
FROM joseinformatica96/tss-tds-base:1

COPY . //TDS

ENTRYPOINT ['['/]"python", "/TDS/main.py"]
	[/file]
[/for]
[/template]

[comment ----------END TOPIC DISCOVERY SERVICE----------------------------------------------------------------------------------------------/]



[comment ----------MOBILE DEVICE----------------------------------------------------------------------------------------------/]

[template public generateMainMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/Main.java', false, 'UTF-8')]
package Gestores;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import org.eclipse.paho.client.mqttv3.MqttClient;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import java.io.InputStreamReader;

public class Main {


	public static String getIpOfHost(String hostname, int format){
		BufferedReader reader;
		String ip="";
		boolean encontrado=false;
		int port=0;
		try {
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/tabladirecciones"))));

	    String line;
	    
			for (int i = 0; !encontrado && ((line = reader.readLine()) != null); i++)
			{
			  if(line.toLowerCase().equals(hostname.toLowerCase())) {
				  ip=reader.readLine();
				  encontrado=true;
				  port = i/2;
			  }
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    if(format==1) {
	    	ip = "tcp://"+ip+":"+String.valueOf(1883+port);
	    }else {
	    	if(format==2) {
		    	ip = ip+":"+String.valueOf(27017+port);
		    }
	    }
	        
	    return ip;
	}


	public static List<String> LoadCsv(int messagesAmount, String csvName){
		BufferedReader reader;
		List<String> ldata = new ArrayList<>();

		try {
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/" + csvName + ".csv"))));

			String line;
	    
			for (int i = 0; ((line = reader.readLine()) != null) && i<messagesAmount; i++)
			{
			  ldata.add(line);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	        
	    return ldata;
	}


	public static String getRoute(String hostnames){
		String route = "['['/] ";
		
		hostnames = hostnames.replaceAll("\\s+","");
		String['['/]] lhostnames = hostnames.split(",");
		
		for(int i=0; i < lhostnames.length; i++) {
			if(i!=lhostnames.length-1)
				route = route + "\"" + getIpOfHost(lhostnames['['/]i], 1) +"\", ";
			else
				route = route + "\"" + getIpOfHost(lhostnames['['/]i], 1) +"\" ]";
		}
		
		return route;
	}
	
	
	public static void main(String ['['/] ] args) throws UnknownHostException {
		List<Topic> Ltopic = new ArrayList<Topic>();
		Topic topic;

		[for (topic : Topic | edgenode.publish_on_topic)]
		topic = new Topic("[topic.name/]",   false ,  true  );
		Ltopic.add(topic);
		[/for]
		[for (topic : Topic | edgenode.suscribe_on_topic)]
		topic = new Topic("[topic.name/]",   true ,  false);
		Ltopic.add(topic);
		[/for]

		//Static topics to interact with the TSS and the TDS
		topic = new Topic("[edgenode.name+'_'+edgenode.id+'TDN'/]",   true ,  false);
		Ltopic.add(topic);
		topic = new Topic("[edgenode.name+'_'+edgenode.id+'TMN'/]",   true ,  false);
		Ltopic.add(topic);
		
		[if edgenode.route.oclIsKindOf(FogCloudRoute)]
		List<Broker> Lbroker = new ArrayList<Broker>();
		Broker broker;
			[for (node : ProcessNode | edgenode.route->selectByKind(FogCloudRoute).processnode)]
		broker = new Broker(getIpOfHost("[node.name + node.id/]",1), Ltopic,[node.coordinates.latitude/], [node.coordinates.longitude/], [node.CoverageSignalPower/], false);
		Lbroker.add(broker);
			[/for]
		[/if]
	
		//int randId = ThreadLocalRandom.current().nextInt(0, 9999999);
		//GestorDeConexiones gestorconexiones = new GestorDeConexiones("sensorA1_0_"+randId, Lbroker);
		//gestorconexiones.Iniciar();
		String name="[edgenode.name+'_'+edgenode.id/]";
		DeviceCore devCore = new DeviceCore(name, Ltopic,Lbroker, [edgenode.coordinates.latitude/], [edgenode.coordinates.longitude/],[edgenode.IntermediateBufferSize/]);
		
		
		//Publisher publisher = new Publisher();
		//Receiver receiver = new Receiver(gestorconexiones, publisher);
		

///////Para la publicacion de datos
		String value;
		String topicName;
		String idCliente;
		MqttClient client;
		Publisher publisher;
		//List<MqttClient> Lclient = gestorconexiones.getLclient();
		//String event;
		int randomNum;
		
		int leavingBrokerRange = 1;
		
//////GestiÃ³n del mvimiento
		MobilityManager MMThread = devCore.getMobilityManager();
		MMThread.start();
		
		try {
			TimeUnit.MILLISECONDS.sleep((int)(2000));
		} catch (InterruptedException e) { 
			e.printStackTrace();
		}
		
		System.out.println(MMThread.getRoute().size());
		
/////Inicio simulaciÃ³n
		//21*6*2
		for (int i=0; i<2000; i++) {
			//devCore.getMobilityManager().LeftAndRight(0, 60, 0, devCore.getMobilityManager().getDirection());
			//devCore.getMobilityManager().followRoute();
			devCore.getMobilityManager().printPosition();


			//DESCONECTAR DE UN BROKER DEL QUE NO SOMOS COMPATIBLES Y MARCARLO COMO INCOMPATIBLE
			if(!devCore.gestorconexiones.isConnectedToCompatibleBroker() && devCore.gestorconexiones.getLclient().size() > 0){
				String url = devCore.gestorconexiones.getLclient().get(0).getServerURI();
				for (int index = 0; index<devCore.gestorconexiones.getLbroker().size(); index++) {
					if (devCore.gestorconexiones.getLbroker().get(index).getUrl().equals(url)) {
						devCore.gestorconexiones.getLbroker().get(index).setCompatible(false);
					}
				}
				devCore.gestorconexiones.dissconnectFromBrokers();
			}


			if(!devCore.getMobilityManager().inBrokerRange()) {
				if (leavingBrokerRange == 0) {
					devCore.getGestorDeConexiones().setConnectedToCompatibleBroker(false);
					devCore.getGestorDeConexiones().dissconnectFromBrokers();
					leavingBrokerRange++;
				}	
				devCore.startMobilityToAnotherBroker();
				devCore.getIBuffer().savePublicationInBuffer();
			}else if(devCore.gestorconexiones.isConnectedToCompatibleBroker()){
				if (leavingBrokerRange > 0)
					leavingBrokerRange = 0;
				//event = "{\"event\":{\"value\":"+ randomNum +"}}";
				randomNum = ThreadLocalRandom.current().nextInt(-100, 100 + 1);
				//TEMPORAL devCore.getPublisher().Publish("{ \"value\" : " + randomNum + "" +" }", devCore.getGestorDeConexiones().getIDcliente(), "/1234/"+devCore.getName()+"/attrs", devCore.getGestorDeConexiones().getLclient().get(0));
				for(int j=0; j<devCore.getLTopic().size(); j++) {
					if(devCore.getLTopic().get(j).isPublicar()) {
						publisher = devCore.getPublisher();
						value = Integer.toString(randomNum);
						topicName = devCore.getLTopic().get(j).getNombre();
						idCliente = devCore.getGestorDeConexiones().getIDcliente();
						client = devCore.getGestorDeConexiones().getLclient().get(devCore.getGestorDeConexiones().getLclient().size()-1);
						if (devCore.getIBuffer().getBuffer().size()>0) {
							devCore.getIBuffer().publishBufferContent(publisher, topicName, idCliente, client);
							devCore.getStadisticalloginfo().printIntermediateBufferInfo();
							devCore.getIBuffer().set0LossPackets();
						}
						// publisher.Publish("{ \"value\" : \"" + value + "\"" +" }", idCliente, topicName, client);
						publisher.Publish("{ \"value\" : \"" + value + "\"" + ", " + "\"sensorname\" : \"" + "A" + "\"" +" }", idCliente, topicName, client);
					}
				}
			}
			devCore.getBatterymanager().BatteryManagementV2();
			//System.out.println("Remainin Battery: " + devCore.getBatterymanager().getRemainingBattery() + "/5000");
			try {
				TimeUnit.MILLISECONDS.sleep((int)(500));
			} catch (InterruptedException e) { 
				e.printStackTrace();
			}
		}
	}
}
	[/file]
[/for]
[/comment]
[/template]



[template public generateBatteryManagerMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/BatteryManager.java', false, 'UTF-8')]
package Gestores;

import java.util.concurrent.TimeUnit;

//----- Gastos de baterÃ­a que se cubre actualmente para su simulaciÃ³n -----
//Cada segundo se gastan 0.1mah, si se estÃ¡ conectado a un Broker 0.3mah
//ConexiÃ³n con Broker 1mah
//DesconexiÃ³n con Broker 1mah
//PublicaciÃ³n 3mah
//RecepciÃ³n 1mah

public class BatteryManager {
	float Battery;
	float RemainingBattery;
	float StandByBatteryUsed;
	float simulationspeed;
	Publisher publisher;
	GestorDeConexiones gestordeconexiones;
	
	public BatteryManager(float battery, Publisher publisher, GestorDeConexiones gestordeconexiones) {
		Battery = battery;
		RemainingBattery = battery;
		StandByBatteryUsed = 0;
		simulationspeed = 6;
		this.publisher = publisher;
		this.gestordeconexiones = gestordeconexiones;
	}

	public float getBattery() {
		return Battery;
	}

	public void setBattery(float battery) {
		Battery = battery;
	}

	public float getRemainingBattery() {
		return RemainingBattery;
	}

	public void setRemainingBattery(float remainingBattery) {
		RemainingBattery = remainingBattery;
	}
	
	public void BatteryManagement() {
		if (RemainingBattery > 0) {
			
			if (gestordeconexiones.isConnectedToCompatibleBroker()) {
				StandByBatteryUsed = (float) (StandByBatteryUsed + 0.3);
			} else {
				StandByBatteryUsed = (float) (StandByBatteryUsed + 0.1);
			}
			
			RemainingBattery = (float) (Battery - (publisher.getPublishedmessages()*3 + gestordeconexiones.getTotalConnections() + gestordeconexiones.getTotalDisconnections() + StandByBatteryUsed*(1.0/6)));
		} else {
			System.out.println("NO Battery");
		}
	}
	
	
	//Se cuentan las interacciones
	public void BatteryManagementV2() {
		if (RemainingBattery > 0) {
			
			if (gestordeconexiones.isConnectedToCompatibleBroker()) {
				StandByBatteryUsed = (float) (StandByBatteryUsed + 1);
			}
			
			System.out.println("Tiempo de conexiÃ³n: " + StandByBatteryUsed + " --- " + "mensajes publicados: " + publisher.getPublishedmessages() + " " + "Total de conexiones y desconexiones a gateways: " + gestordeconexiones.getTotalConnections());
			
			RemainingBattery = (float) (Battery - (publisher.getPublishedmessages()*3 + gestordeconexiones.getTotalConnections() + gestordeconexiones.getTotalDisconnections() + StandByBatteryUsed*(1.0/6)));
		} else {
			System.out.println("NO Battery");
		}
	}
}
	[/file]
[/for]
[/comment]
[/template]




[template public generateBrokerMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/Broker.java', false, 'UTF-8')]
package Gestores;

import java.util.List;

public class Broker{
	String url;
	List<Topic> Ltopic;
	///////
	int x;
	int y;
	int radiousOfAction;
	boolean connect;//False, ni esta conectado ni se quiere conectar, true, esta conectado o quiere conectarse
	///////
	boolean compatible;

	
//	public Broker(String url, List<Topic> ltopic) {
//		super();
//		this.url = url;
//		Ltopic = ltopic; 
//	}
	
	public Broker(String url, List<Topic> ltopic, int x, int y, int radiousOfAction, boolean connect) {
		super();
		this.url = url;
		Ltopic = ltopic; 
		this.x=x;
		this.y=y;
		this.radiousOfAction=radiousOfAction;
		this.connect=connect;
		this.compatible=true;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public List<Topic> getLtopic() {
		return Ltopic;
	}

	public void setLtopic(List<Topic> ltopic) {
		Ltopic = ltopic;
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public int getRadiousOfAction() {
		return radiousOfAction;
	}

	public void setRadiousOfAction(int radiousOfAction) {
		this.radiousOfAction = radiousOfAction;
	}

	public boolean isConnect() {
		return connect;
	}

	public void setConnect(boolean connect) {
		this.connect = connect;
	}

	public boolean isCompatible() {
		return compatible;
	}

	public void setCompatible(boolean compatible) {
		this.compatible = compatible;
	}	
	
}

	[/file]
[/for]
[/comment]
[/template]




[template public generateCoordMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/Coord.java', false, 'UTF-8')]
package Gestores;

public class Coord {
	int x;
	int y;
	
	
	public Coord(int x, int y) {
		this.x = x;
		this.y = y;
	}
	
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}	

}
	[/file]
[/for]
[/comment]
[/template]





[template public generateDeviceCoreMobileDevice(anEnvironment : Environment)]
[comment @main/]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/DeviceCore.java', false, 'UTF-8')]
package Gestores;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

public class DeviceCore {
	List<Topic> Ltopic = new ArrayList<Topic>();
	List<Broker> Lbroker = new ArrayList<Broker>();
	GestorDeConexiones gestorconexiones;
	MobilityManager mobmanager;
	Publisher publisher;
	Receiver receiver;
	String name;
	TokenManager tokenManager = new TokenManager();
	IntermediateBuffering IBuffer;
	StadisticalLogInfo stadisticalloginfo;
	BatteryManager batterymanager;

	
	public DeviceCore(String name, List<Topic> Ltopic, List<Broker> Lbroker, int x, int y, int ibuffersize) {
		this.name=name;
		this.Ltopic=Ltopic;
		this.Lbroker=Lbroker;
		this.mobmanager = new MobilityManager(x, y, Lbroker);
		int randId = ThreadLocalRandom.current().nextInt(0, 9999999);
		gestorconexiones = new GestorDeConexiones(this.name+"_"+randId, Lbroker, false);
		//gestorconexiones.Iniciar();
		publisher = new Publisher();
		IBuffer = new IntermediateBuffering(ibuffersize);
		batterymanager = new BatteryManager(5000, publisher, gestorconexiones);
		stadisticalloginfo = new StadisticalLogInfo(publisher, IBuffer);
		receiver = new Receiver(this.gestorconexiones, this.tokenManager, this.publisher, this.Ltopic);
	}
	
	public void startMobilityToAnotherBroker() {
		String newBorkerURL=this.mobmanager.chooseNewBroker();
		if(newBorkerURL!="none") {
			System.out.println("------------ STARTING MOBILITY ------------");
			this.gestorconexiones.checkReachableBroker(name, newBorkerURL);
			this.receiver.updateCallback();
			///Token interaction
			this.tokenManager.requestTokenManagerNode(this.publisher, this.name, this.gestorconexiones.getIDcliente(), this.gestorconexiones.getLclient().get(0));
			///end Token interaction
			this.publisher.Publish("{ \"sensorname\" : \"" + this.name + "\"" +" }", this.gestorconexiones.getIDcliente(), "TDN", this.gestorconexiones.getLclient().get(0));
		}else {
			System.out.println("No Broker within range");
		}
	}
	
	public GestorDeConexiones getGestorDeConexiones() {
		return this.gestorconexiones;
	}
	
	public Publisher getPublisher() {
		return this.publisher;
	}
	public MobilityManager getMobilityManager() {
		return this.mobmanager;
	}
	
	public String getName() {
		return this.name;
	}
	
	public List<Topic> getLTopic(){
		return this.Ltopic;
	}

	public IntermediateBuffering getIBuffer() {
		return IBuffer;
	}

	public void setIBuffer(IntermediateBuffering iBuffer) {
		IBuffer = iBuffer;
	}

	public StadisticalLogInfo getStadisticalloginfo() {
		return stadisticalloginfo;
	}

	public void setStadisticalloginfo(StadisticalLogInfo stadisticalloginfo) {
		this.stadisticalloginfo = stadisticalloginfo;
	}

	public BatteryManager getBatterymanager() {
		return batterymanager;
	}

	public void setBatterymanager(BatteryManager batterymanager) {
		this.batterymanager = batterymanager;
	}
}
	[/file]
[/for]
[/template]






[template public generateGestorDeConexionesMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/GestorDeConexiones.java', false, 'UTF-8')]
package Gestores;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions; 
import org.eclipse.paho.client.mqttv3.MqttException;
import org.json.JSONArray;

public class GestorDeConexiones {
	private String IDcliente;
	private List<Broker> Lbroker;
	private List<MqttClient> Lclient;
	private boolean connectedToCompatibleBroker;
	private int totalDisconnections;
	private int totalConnections;
	
	public GestorDeConexiones(String IDcliente, List<Broker> Lbroker, boolean connectedToCompatibleBroker ) {
		this.IDcliente = IDcliente;
		this.Lbroker = Lbroker;
		this.totalConnections = 0;
		this.totalDisconnections = 0;
		Lclient = new ArrayList<MqttClient>();
		connectedToCompatibleBroker=false;
	}
	
	
	
//	public void Iniciar () {
//		MqttClient myClient;
//		MqttConnectOptions connOpt;
//		
//		connOpt = new MqttConnectOptions();
//		connOpt.setCleanSession(true);
//		connOpt.setKeepAliveInterval(30);
//
//		for(int i=0; i<Lbroker.size() && Lbroker.get(i).isConnect()==true; i++) {
//			try {
//				myClient = new MqttClient(Lbroker.get(i).getUrl(), this.IDcliente);
//				myClient.connect(connOpt);
//				Lclient.add(myClient);
//				System.out.println("Connected to " + Lbroker.get(i).getUrl());
//				} catch (MqttException e) {
//					System.out.println("PROBLEMs to connect " + Lbroker.get(i).getUrl());
//					e.printStackTrace();
//					System.exit(-1);
//				}
//			for(int j=0; j<Lbroker.get(i).getLtopic().size(); j++) {
//				if(Lbroker.get(i).getLtopic().get(j).isSuscribir()) {
//					try {
//						Lclient.get(i).subscribe(Lbroker.get(i).getLtopic().get(j).getNombre(), 0);
//					} catch (MqttException e) {
//						e.printStackTrace();
//					}
//				}
//			}
//		}
//	}
	
	//////////////////////////////
	
	public int getTotalDisconnections() {
		return totalDisconnections;
	}



	public void setTotalDisconnections(int totalDisconnections) {
		this.totalDisconnections = totalDisconnections;
	}



	public int getTotalConnections() {
		return totalConnections;
	}



	public void setTotalConnections(int totalConnections) {
		this.totalConnections = totalConnections;
	}



	public void dissconnectFromBrokers() {
		for(int i=0; i<Lbroker.size(); i++) {
			Lbroker.get(i).setConnect(false);
		}
		for(int i=0; i<Lclient.size(); i++) {
			try {
				Lclient.get(i).disconnect();
				Lclient.remove(i);
			} catch (MqttException e) {
				System.out.println("Failure dissonnecting from brokers");
			}
		}
		System.out.println("Device desconnected from all Brokers");
		this.totalDisconnections++;
	}
	public void TransitionToNewBroker() {
//		for(int i=0; i<Lbroker.size()-1; i++) {
//			Lbroker.remove(i);
//		}

		System.out.println("Starting transition to new Broker");
		for(int i=0; i<Lbroker.size(); i++) {
			if(Lbroker.get(i).isConnect() && false) {
				for(int j=0; j<Lbroker.get(i).getLtopic().size(); j++) {
					if(Lbroker.get(i).getLtopic().get(j).isSuscribir()) {
						try {
							//Lclient.get(0).subscribe(Lbroker.get(i).getLtopic().get(j).getNombre(), 0);
							Lclient.get(0).subscribe("HJK"+j, 0);
						} catch (MqttException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
		this.connectedToCompatibleBroker=true;
		//Reinicio la compatibilidad con el resto de Brokers por si se han actualizado
		for(int i =0; i<Lbroker.size();i++) {
			Lbroker.get(i).setCompatible(true);
		}
	}
	
//	public void updateSuscribeTopics(List<Topic> Ltopic) {
//		for(int i=0; i<Ltopic.size(); i++) {
//			if(Ltopic.get(i).isSuscribir()) {
//				try {
//					Lclient.get(i).subscribe(Ltopic.get(i).getNombre(), 0);
//				} catch (MqttException e) {
//					e.printStackTrace();
//				}
//			}
//		}
//	}
	
	public void checkReachableBroker(String sensorName, String BrokerURL) {
		MqttClient myClient;
		MqttConnectOptions connOpt;
		
		connOpt = new MqttConnectOptions();
		connOpt.setCleanSession(true);
		connOpt.setKeepAliveInterval(30);

		try {
			myClient = new MqttClient(BrokerURL, this.IDcliente);
			myClient.connect(connOpt);
			Lclient.add(myClient);
			System.out.println("Connected to " + BrokerURL);
			this.totalConnections++;
			} catch (MqttException e) {
				System.out.println("PROBLEMs to connect " + BrokerURL);
				e.printStackTrace();
				System.exit(-1);
			}
		
		try {
			Lclient.get(0).subscribe(sensorName+"TDN", 0);
			Lclient.get(0).subscribe(sensorName+"TMN", 0);
		} catch (MqttException e) {
			e.printStackTrace();
		}
		
		//Una vez conectados cambiamos el atributo connect del broker que nos hemos desconectado y al que nos hemos conectado
		for(int i=0;i<Lbroker.size();i++) {
			if(Lbroker.get(i).getUrl()==BrokerURL) {
				Lbroker.get(i).setConnect(true);
			}else
				Lbroker.get(i).setConnect(false);
				
		}
		//Broker broker = new Broker(BrokerURL, this.Lbroker.get(0).getLtopic());
		//Lbroker.add(broker);
	}
	
	
	public boolean checkCompatibleTopicFromTDNResponse(JSONArray jsonarr, List<Topic> Ltopic){
		int matches=0;
		boolean compatible=false; 
		
		//Compruebo que la respuesta contenga todos los topics que necesita X sensor para funcionar (el -1 es porque el topic donde recibe respuestas del tdn esta en la lista y no nos interesa compararlo)
		for (int i = 0; i < jsonarr.length() && matches<Ltopic.size()-2; i++) {
			for(int j = 0; j < Ltopic.size()-2 && matches<Ltopic.size()-2; j++) {
				//System.out.println(Ltopic.get(j).getNombre().toString()+" "+jsonarr.getJSONObject(i).get("name").toString());
				if (Ltopic.get(j).getNombre().equals(jsonarr.getJSONObject(i).get("name").toString())) {
					matches++;
				}
			}
		}
		if(matches==Ltopic.size()-2) {
			compatible=true;
		}
		System.out.println(compatible);
		return compatible;
	}
	//////////////////////////////
	
	public String getIDcliente() {
		return IDcliente;
	}

	public void setIDcliente(String iDcliente) {
		IDcliente = iDcliente;
	}

	public List<Broker> getLbroker() {
		return Lbroker;
	}

	public void setLbroker(List<Broker> lbroker) {
		Lbroker = lbroker;
	}

	public List<MqttClient> getLclient() {
		return Lclient;
	}

	public void setLclient(List<MqttClient> lclient) {
		Lclient = lclient;
	}
	
	
	public boolean isConnectedToCompatibleBroker() {
		return connectedToCompatibleBroker;
	}

	public void setConnectedToCompatibleBroker(boolean connectedToCompatibleBroker) {
		this.connectedToCompatibleBroker = connectedToCompatibleBroker;
	}

	public MqttClient getClientByTopicName(String topicName) {
		MqttClient client = null;
		boolean find=false;
		
		for(int i=0; i<Lbroker.size() && !find; i++) {
			for(int j=0; j<Lbroker.get(i).getLtopic().size() && !find; j++) {
				if(Lbroker.get(i).getLtopic().get(j).getNombre().equals(topicName)) {
					for(int k=0; k<Lclient.size() && !find; k++) {
						if(Lclient.get(k).getServerURI().equals(Lbroker.get(i).getUrl())) {
							find=true;
							client = Lclient.get(k);
						}
					}
				}
			}
		}
		
		return client;
	}
}
	[/file]
[/for]
[/comment]
[/template]






[template public generateIntermediateBufferingMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/IntermediateBuffering.java', false, 'UTF-8')]
package Gestores;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import org.eclipse.paho.client.mqttv3.MqttClient;

public class IntermediateBuffering {
	List<Integer> Buffer = new ArrayList<Integer>();
	int bufferSize;
	int losspackets;
	int totallosspackets;
	
	
	public int getBufferSize() {
		return bufferSize;
	}

	public void setBufferSize(int bufferSize) {
		this.bufferSize = bufferSize;
	}

	public int getLosspackets() {
		return losspackets;
	}

	public void setLosspackets(int losspackets) {
		this.losspackets = losspackets;
	}

	public int getTotallosspackets() {
		return totallosspackets;
	}

	public void setTotallosspackets(int totallosspackets) {
		this.totallosspackets = totallosspackets;
	}

	public void setBuffer(List<Integer> buffer) {
		Buffer = buffer;
	}

	public IntermediateBuffering(int buffersize) {
		this.bufferSize = buffersize;
		this.losspackets = 0;
		this.totallosspackets = 0;
	}
	
	public void set0LossPackets() {
		this.losspackets = 0;
	}
	
	public List<Integer> getBuffer() {
		return Buffer;
	}
	public void savePublicationInBuffer() {
		if(Buffer.size()==bufferSize) {
			Buffer.remove(0);
			losspackets++;
			totallosspackets++;
		}
		
		int randomNum = ThreadLocalRandom.current().nextInt(-100, 100 + 1);
		Buffer.add(randomNum);
	}
	
	public void publishBufferContent(Publisher publisher, String topicName, String idCliente, MqttClient client) {
		System.out.println("Publishing Intermediate Buffer Content");
		for (int i = 0; i < Buffer.size(); i++) {
			publisher.Publish("{ \"value\" : \"" + Buffer.get(i).toString() + "\"" +" }", idCliente, topicName, client);
		}
		System.out.println("Intermediate Buffer Content Published");
		//Vaciamos el buffer
		Buffer = new ArrayList<Integer>();
	}	
}
	[/file]
[/for]
[/comment]
[/template]






[template public generateMobilityManagerMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/MobilityManager.java', false, 'UTF-8')]
package Gestores;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class MobilityManager extends Thread{
	int x;
	int y;
	int direction;//La direcciÃ³n en la que va el sensor, 0 derecha/hacia delante, 1 izquierda/hacia detrÃ¡s
	List<Broker> LBroker;
	List<Coord> Route;
	int followRouteIndex;
	
	public MobilityManager(int x, int y, List<Broker> LBroker) {
		this.x=x;
		this.y=y;
		this.direction=0;
		this.LBroker=LBroker;
		this.Route = new ArrayList<Coord>();
		this.followRouteIndex = 0;
	}
	
	
	//Seguir la ruta siendo la rutauna lista
	public void followRoute() {
		if (this.followRouteIndex == this.Route.size()-1) {
			this.direction = 1;
		}
		if (this.followRouteIndex == 0) {
			this.direction = 0;
		}
		
		this.x = this.Route.get(followRouteIndex).getX();
		this.y = this.Route.get(followRouteIndex).getY();
		
		if (this.direction == 0) {
			this.followRouteIndex++;
		}else {
			this.followRouteIndex--;
		}
		
	}
	
	
	public void GenerateFogCloudRoute() {
		int xinterp = this.x;
		int yinterp = this.y;
		Coord c = new Coord(xinterp, yinterp);
		Route.add(c);

		for (int i = 0; i < this.LBroker.size(); i++) {
			c = new Coord(LBroker.get(i).getX(), LBroker.get(i).getY());
			
			while (xinterp != c.getX() || yinterp != c.getY()) {
				if (xinterp < c.getX()) {
					xinterp++;
				}else if (xinterp > c.getX()){
					xinterp--;
				}
				
				if (yinterp < c.getY()) {
					yinterp++;
				}else if (yinterp > c.getY()){
					yinterp--;
				}
				
				Coord cinterp = new Coord(xinterp, yinterp);
				Route.add(cinterp);	
			}	
		}
	}
	
	//Ruta simple izquierda a derecha y viceversa (para pruebas)
	public void LeftAndRight(int minX, int maxX, int y, int direction) {
		if(direction==0) {
			if(x==maxX) {
				x--;
				this.direction=1;
			}else 
				x++;
		}else {
		    if(x==minX) {
		    	x++;
		    	this.direction=0;
			}else
				x--;
		}
	}

	public String chooseNewBroker() {
		double miniumDistance=9999999;
		String BrokerURL="none";
		for(int i=0; i< LBroker.size();i++) {
			if (LBroker.get(i).isCompatible()!=false) {
				double cateto1 = x - LBroker.get(i).getX();
				double cateto2 = y - LBroker.get(i).getY();
				double distance = Math.sqrt(cateto1*cateto1 + cateto2*cateto2);
				if(distance<LBroker.get(i).getRadiousOfAction() && distance<miniumDistance && !LBroker.get(i).isConnect()) {
					miniumDistance=distance;
					BrokerURL=LBroker.get(i).getUrl();
				}
			}
		}
		return BrokerURL;
	}
	
	public boolean inBrokerRange() {
		boolean inRange=false;
		for(int i=0; i< LBroker.size();i++) {
			if(LBroker.get(i).isConnect()) {
				double cateto1 = x - LBroker.get(i).getX();
				double cateto2 = y - LBroker.get(i).getY();
				double distance = Math.sqrt(cateto1*cateto1 + cateto2*cateto2);
				if(LBroker.get(i).getRadiousOfAction()<distance)
					inRange=false;
				else
					inRange=true;
			}
		}
		return inRange;
	}
	
	public void printPosition() {
		String direction="derecha";
		if(this.direction==1)
			direction="izquierda";
		System.out.println("POSITION | X: " +this.x + "; Y: "+this.y+"; Direction: "+ direction );
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public int getDirection() {
		return direction;
	}

	public void setDirection(int direction) {
		this.direction = direction;
	}
	
	
	
	
	public List<Broker> getLBroker() {
		return LBroker;
	}


	public void setLBroker(List<Broker> lBroker) {
		LBroker = lBroker;
	}


	public List<Coord> getRoute() {
		return Route;
	}


	public void setRoute(List<Coord> route) {
		Route = route;
	}

	@Override
	public void run() {
[if (edgenode.route.oclIsKindOf(FogCloudRoute))]
		this.GenerateFogCloudRoute();
[/if]
[if (edgenode.route.oclIsKindOf(LinearRoute))]
	Coord coord;
	[for(coord : Coordinates | edgenode.route.oclAsType(LinearRoute).coordinates)]
	coord = new Coord([coord.latitude/],[coord.longitude/]);
	this.Route.add(coord);
	[/for]
[/if]
[if (edgenode.route.oclIsKindOf(LinearRoute))]
		try {
			BufferedReader reader;
			reader = new BufferedReader(new BufferedReader(new InputStreamReader(Main.class.getResourceAsStream("/[edgenode.route.name/].csv"))));

			String line;
			String['['/]] coordsSplit;
			Coord coords;
	    
			for (int i = 0; ((line = reader.readLine()) != null); i++)
			{
			  coordsSplit = line.split(",");
			  coords = new Coord(Integer.valueOf(coordsSplit['['/]0]), Integer.valueOf(coordsSplit['['/]1]));
			  this.Route.add(coords);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
[/if]

		for (int i = 0; i<2000; i++) {
			this.followRoute();
			
			System.out.println("----- movement ------");
			
			try {
				TimeUnit.MILLISECONDS.sleep((int)(3000));
			} catch (InterruptedException e) { 
				e.printStackTrace();
			}
			
		}
	}
	
	//TESTS
	public static void main(String ['['/] ] args){
		
		List<Topic> Ltopic = new ArrayList<Topic>();
		Topic topic;
		topic = new Topic("Topic1",   false ,  true  );
		Ltopic.add(topic);
		topic = new Topic("sensorA1_0TDN",   true ,  false);
		Ltopic.add(topic);
		topic = new Topic("sensorA1_0TMN",   true ,  false);
		Ltopic.add(topic);
		
		List<Broker> Lbroker2 = new ArrayList<Broker>();
		Broker broker;
		broker = new Broker("tcp://localhost:1883", Ltopic,5, 5, 5, false);
		Lbroker2.add(broker);
		broker = new Broker("tcp://localhost:1884", Ltopic,20, 10, 5, false);
		Lbroker2.add(broker);
		broker = new Broker("tcp://localhost:1885", Ltopic,10, 20, 5, false);
		Lbroker2.add(broker);
	
		MobilityManager mobManager = new MobilityManager(0, 0, Lbroker2);
		mobManager.GenerateFogCloudRoute();
		for (int i = 0; i < mobManager.getRoute().size(); i++) {
			System.out.println(mobManager.getRoute().get(i).getX() + " " + mobManager.getRoute().get(i).getY());
		}
		
//		for (int i = 0; i < 200; i++) {
//			mobManager.followRoute();
//			mobManager.printPosition();
//		}
	
	}	
}
	[/file]
[/for]
[/comment]
[/template]






[template public generatePublisherMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/Publisher.java', false, 'UTF-8')]
package Gestores;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttTopic;

public class Publisher {
	int publishedmessages = 0;
	
	
	
	public int getPublishedmessages() {
		return publishedmessages;
	}



	public void setPublishedmessages(int publishedmessages) {
		this.publishedmessages = publishedmessages;
	}



	public void Publish(String pubMessage, String myId, String topic, MqttClient myClient) {
		publishedmessages ++;
		MqttTopic myTopic = myClient.getTopic(topic);
		int pubQoS = 0;
		MqttMessage message = new MqttMessage(pubMessage.getBytes());
		message.setQos(pubQoS);
		message.setRetained(false);
		// Publish the message
		System.out.println("DEVICE " + myId + " | Publishing data = " + pubMessage + " | To topic " + myTopic + " | in Broker "+myClient.getServerURI());
		MqttDeliveryToken token = null;
		try {
			// publish message to broker
			token = myTopic.publish(message);
	    	// Wait until the message has been delivered to the broker
			//token.waitForCompletion();
			Thread.sleep(100);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

	[/file]
[/for]
[/comment]
[/template]







[template public generateReceiverMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/Receiver.java', false, 'UTF-8')]
package Gestores;

import java.util.List;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.json.*;

public class Receiver implements MqttCallback{
	Publisher pub;
	GestorDeConexiones gestorconexiones;
	TokenManager tokenmanager;
	///////////
	List<Topic> Ltopics;
	///////////
	
	public Receiver(GestorDeConexiones gestorconexiones, TokenManager tokenmanager, Publisher pub, List<Topic> Ltopics) {
		this.gestorconexiones = gestorconexiones;
		this.tokenmanager = tokenmanager;
		this.Ltopics=Ltopics;
		this.pub = pub;
		for( int i=0; i<this.gestorconexiones.getLclient().size(); i++) {
			this.gestorconexiones.getLclient().get(i).setCallback(this);
		}
	}

	public void connectionLost(Throwable cause) {
		// TODO Auto-generated method stub
		
	}
	
	//Si el dispositivo cambia de broker en tiempo real, es necesario realizar un callback para recibir datos del nuevo broker
	public void updateCallback() {
		for( int i=0; i<this.gestorconexiones.getLclient().size(); i++) {
			this.gestorconexiones.getLclient().get(i).setCallback(this);
		}
	}

	public void messageArrived(String topic, MqttMessage message) throws Exception {
		String dataReceived = new String(message.getPayload());
		System.out.println("DEVICE " +this.gestorconexiones.getIDcliente()+ " | Mensaje recibido: " + dataReceived + "| From topic: "+ topic);
		/////////////////////////
		if(topic.contains("TDN")) {
			try {
				JSONArray jsonarreceived = new JSONArray(dataReceived);
				if(gestorconexiones.checkCompatibleTopicFromTDNResponse(jsonarreceived, this.Ltopics))
					this.gestorconexiones.TransitionToNewBroker();
			} catch (Exception e) {
				System.out.println(e);
			}
		}
		
		if(topic.contains("TMN")) {
			try {
				JSONObject jsonreceived = new JSONObject(dataReceived);
				if(tokenmanager.checkTMNresponse(jsonreceived))
					System.out.println("TokenStatus OK | token: " + tokenmanager.getToken());
			} catch (Exception e) {
				System.out.println(e);
			}
		}
			
		//////////////////////
//		if(dataReceived.equals("hola"))
//			pub.Publish("recibido!", topic, gestorconexiones.getClientByTopicName(topic));
	}

	public void deliveryComplete(IMqttDeliveryToken token) {
		// TODO Auto-generated method stub
		
	}

}
	[/file]
[/for]
[/comment]
[/template]






[template public generateStadisticalLogInfoMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/StadisticalLogInfo.java', false, 'UTF-8')]
package Gestores;

public class StadisticalLogInfo {
	Publisher publisher;
	IntermediateBuffering intermediatebuffer;
	
	
	
	public StadisticalLogInfo(Publisher publisher, IntermediateBuffering intermediatebuffer) {
		this.publisher = publisher;
		this.intermediatebuffer = intermediatebuffer;
	}

	public float getIntermediateBufferLossPacketsRate() {
		return ((float)intermediatebuffer.getLosspackets())/(intermediatebuffer.getLosspackets()+intermediatebuffer.getBufferSize());
	}
	
	public float getTotalLossPacketRate() {
		return ((float)intermediatebuffer.getTotallosspackets())/(intermediatebuffer.getTotallosspackets()+publisher.getPublishedmessages());
	}
	
	public void printIntermediateBufferInfo() {
		System.out.println("IntermediateBuffer Info | Lost Packets: " + intermediatebuffer.getLosspackets() + 
				", IntermediateBuffer Packet Lost Rate: " + getIntermediateBufferLossPacketsRate() + ", Total Packet Loss Rate: " + getTotalLossPacketRate());
	}

}
	[/file]
[/for]
[/comment]
[/template]






[template public generateTokenManagerMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/TokenManager.java', false, 'UTF-8')]
package Gestores;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.json.JSONObject;

public class TokenManager {
	String token = "1354315456657";
	
	public String getToken() {
		return this.token;
	}
	
	public void requestTokenManagerNode(Publisher publisher, String sensorName, String idClient, MqttClient client ) {
		publisher.Publish("{ \"sensorname\" : \"" + sensorName + "\""       +      ", \"token\" : \"" + this.token + "\"" + " }", idClient, "TMN", client);
	}
	
	public boolean checkTMNresponse(JSONObject tmnresponse) {
		boolean tokenStatus = false;
		String response = tmnresponse.get("token").toString();

		if (response.equals("OK")) {
			tokenStatus = true;
		}
		else if (response.equals("disconnect")) {
			System.out.println("Lost Token, blocked device");
			token = "disconnect";
		}
		else {
			token = response;
			tokenStatus = true;
		}
		return tokenStatus;
	}

}
	[/file]
[/for]
[/comment]
[/template]







[template public generateTopicMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/src/main/java/Gestores/Topic.java', false, 'UTF-8')]
package Gestores;

public class Topic{
	String nombre;
	boolean suscribir;
	boolean publicar;
	
	public Topic(String nombre, boolean suscribir, boolean publicar) {
		super();
		this.nombre = nombre;
		this.suscribir = suscribir;
		this.publicar = publicar;
	}
	
	public String getNombre() {
		return nombre;
	}
	
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	
	public boolean isSuscribir() {
		return suscribir;
	}
	
	public void setSuscribir(boolean suscribir) {
		this.suscribir = suscribir;
	}
	
	public boolean isPublicar() {
		return publicar;
	}
	
	public void setPublicar(boolean publicar) {
		this.publicar = publicar;
	}
	
}
	[/file]
[/for]
[/comment]
[/template]




[template public generatePomMobileDevice(anEnvironment : Environment)]
[comment @main/]
[comment]
[for(edgenode: EdgeNode | anEnvironment.node->filter(EdgeNode)->select(self.route->size()>0))]
	[file ('/MobilityArchitecture/MobileNodes/'+ edgenode.name.replaceAll('_','') + edgenode.id +'/pom.xml', false, 'UTF-8')]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>sensorMobile</groupId>
  <artifactId>[edgenode.name + edgenode.id/]</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>[edgenode.name + edgenode.id/]</name>
  <url>http://maven.apache.org</url>

  <properties>
    <version.thorntail>2.4.0.Final</version.thorntail>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <failOnMissingWebXml>false</failOnMissingWebXml>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

	<repositories>
	    <repository>
	        <id>Eclipse Paho Repo</id>
	        <url>https://repo.eclipse.org/content/repositories/paho-releases/</url>
	    </repository>
	</repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.eclipse.paho</groupId>
        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
        <version>1.2.0</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.json/json -->
	<dependency>
	    <groupId>org.json</groupId>
	    <artifactId>json</artifactId>
	    <version>20190722</version>
	</dependency>
  </dependencies>
  
    <build>
      <plugins>
		  <plugin>
		    <groupId>io.thorntail</groupId>
		    <artifactId>thorntail-maven-plugin</artifactId>
		    <configuration>
			  <mainClass>Gestores.Main</mainClass>
			</configuration>
		    <version>${version.thorntail}</version> 
		    <executions>
		      <execution>
		        <goals>
		          <goal>package</goal>
		        </goals>
		      </execution>
		    </executions>
		  </plugin>
		  <plugin>
	      	<groupId>com.spotify</groupId>
	      	<artifactId>docker-maven-plugin</artifactId>
	      	<version>1.2.0</version>
	      	<configuration>
	      	<mainClass>Gestores.Main</mainClass>
	        <imageName>['localhost:5000/' + edgenode.name.toLowerCase() + edgenode.id.toString().toLowerCase()/]</imageName>
	        <baseImage>java</baseImage>
	        <entryPoint>['['/]"java", "-jar", "/${project.build.finalName}-thorntail.jar"]</entryPoint>
	        <!-- copy the service's jar file from target into the root directory of the image --> 
	        <resources>
	           <resource>
	             <targetPath>/</targetPath>
	             <directory>${project.build.directory}</directory>
	             <include>${project.build.finalName}-thorntail.jar</include>
	           </resource>
	        </resources>
	      </configuration>
	    </plugin>
      </plugins>
  </build>
</project>
	[/file]
[/for]
[/comment]
[/template]

[comment ----------END MOBILE DEVICE----------------------------------------------------------------------------------------------/]













[comment ----------START LAST DEPLOY----------------------------------------------------------------------------------------------/]


[template public generateSwarmDeployV2(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployV2/Swarm/deploySwarm.sh', false, 'UTF-8')]
#!/bin/bash

echo "
   _   _   _   _   _   _   _   _   _     _   _   _   _   _   _   _   _   _   _  
  / \ / \ / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ 
 ( I | n | i | c | i | a | n | d | o ) ( d | e | s | p | l | i | e | g | u | e )
  \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ 
"
echo "
   _   _   _   _   _   _   _     _   _   _   _   _  
  / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ 
 ( C | r | e | a | n | d | o ) ( S | w | a | r | m )
  \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/  
"
parent_path=$( cd "$(dirname "${BASH_SOURCE['['/]0]}")" ; pwd -P )

#Private IP of the machine where the registry is deployed (if registry is in local machine)
ip=$(ifconfig wlo1| grep 'inet ' | grep -oE "\b(['['/]0-9]{1,3}\.){3}['['/]0-9]{1,3}\b" | head -1):5000

#To accept pull dockers from registry woithout ssl certs
echo "{ \"insecure-registries\":['['/]\"$ip\"] }" > "$parent_path"/daemon.json

echo y | docker-machine rm [for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))][fog.name.replaceAll('_','') + fog.id/] [/for]Environment

docker-machine create --driver virtualbox Environment

IPENV=$(docker-machine ip Environment)
TOKEN=$(docker-machine ssh Environment "docker swarm init --advertise-addr "$IPENV";exit" | sed -n 5p)
#Uncomment for viz, a graphic visualiser of the orchestration
#docker-machine ssh Environment "docker service create --name=viz --publish=8080:8080/tcp --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer;exit"

	[for(fog: FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode))]
docker-machine create --driver virtualbox [fog.name.replaceAll('_','') + fog.id/]
docker-machine scp "$parent_path"/daemon.json [fog.name.replaceAll('_','') + fog.id/]:~
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] "$TOKEN;sudo cp ~/daemon.json /etc/docker;sudo /etc/init.d/docker restart;exit"
	[/for]


	[for(fog: CloudNode | anEnvironment.node->filter(ProcessNode)->filter(CloudNode))]
docker-machine create --driver virtualbox [fog.name.replaceAll('_','') + fog.id/]
docker-machine scp "$parent_path"/daemon.json [fog.name.replaceAll('_','') + fog.id/]:~
docker-machine ssh [fog.name.replaceAll('_','') + fog.id/] "$TOKEN;sudo cp ~/daemon.json /etc/docker;sudo /etc/init.d/docker restart;exit"
	[/for]
echo "
   _   _   _   _   _     _   _   _   _   _   _  
  / \ / \ / \ / \ / \   / \ / \ / \ / \ / \ / \ 
 ( S | w | a | r | m ) ( c | r | e | a | d | o )
  \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ \_/ \_/  
"

#rm "$parent_path"/daemon.json

[/file] 
[/template]

[template public generateMosquittoConfigFile(anEnvironment : Environment)]
[comment @main/]
[for(pn: ProcessNode | anEnvironment.node->filter(ProcessNode))]
	[file ('/DeployV2/mosquitto-'+ pn.name.replaceAll('_','') + pn.id +'.conf', false, 'UTF-8')]
allow_anonymous true
listener [1883+i/]
connection_messages true
	[/file]
[/for]
[/template]

[template public generateDockerCompose(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployV2/docker-compose.yaml', false, 'UTF-8')]
version: "3"
services:
	[for(pn: ProcessNode | anEnvironment.node->filter(ProcessNode))]
  #START Process Node [pn.name.replaceAll('_','') + pn.id/] environment configuration
  [pn.name.replaceAll('_','').toLowerCase() + pn.id/]:
    image: localhost:5000/[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    container_name: [pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    networks:
      - simulateiot
    #environment:
      #- "constraint:node==[pn.name.replaceAll('_','') + pn.id/]"

  mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]:
    image: eclipse-mosquitto
    container_name: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    ports:
      - "[1883+i/]:1883"
    restart: always
    volumes:
      - ./mosquitto-[pn.name.replaceAll('_','') + pn.id/].conf:/mosquitto/config/mosquitto.conf
    networks:
      - simulateiot
    #environment:
      #- "constraint:node==[pn.name.replaceAll('_','') + pn.id/]"

  [if(pn.component->selectByKind(CEP)->size()>0)]
  esper-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]:
    image: localhost:5000/esper-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    container_name: esper-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    networks:
      - simulateiot
    #environment:
      #- "constraint:node==[pn.name.replaceAll('_','') + pn.id/]"
	[/if]

	[if(pn.component->selectByKind(DataBase)->size()>0)]
  mongo-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]:
    image: mongo
    container_name: mongo-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    ports:
      - "[27017+i/]:27017"
    networks:
      - simulateiot
    #environment:
      #- "constraint:node==[pn.name.replaceAll('_','') + pn.id/]"

#  api-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]:
#    image: localhost:5000/api-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
#    container_name: api-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
#   ports:
#      - "[4000+i/]:4000"
#    networks:
#      - simulateiot
    #environment:
      #- "constraint:node==[pn.name.replaceAll('_','') + pn.id/]"
	[/if]

	[for(device: Sensor | pn.edge_node->filter(Sensor))]
  sensor-[device.name.toLowerCase() + device.id/]:
    image: localhost:5000/sensor-[device.name.toLowerCase() + device.id/]
    container_name: sensor-[device.name.toLowerCase() + device.id/]
    networks:
      - simulateiot
    #environment:
      #- "constraint:node==[pn.name.replaceAll('_','') + pn.id/]"
	[/for]

	[for(device: Actuator | pn.edge_node->filter(Actuator))]
  actuator-[device.name.toLowerCase() + device.id/]:
    image: localhost:5000/actuator-[device.name.toLowerCase() + device.id/]
    container_name: actuator-[device.name.toLowerCase() + device.id/]
    networks:
      - simulateiot
    #environment:
      #- "constraint:node==[pn.name.replaceAll('_','') + pn.id/]"
	[/for]
  #END Process Node [pn.name.replaceAll('_','') + pn.id/] environment configuration

	[/for]

  #START Node-RED configuration
  #node-red:
    #image: nodered/node-red:latest
    #container_name: node-red
    #ports:
      #- "1880:1880"
    #restart: unless-stopped
    #networks:
      #- simulateiot
    #volumes:
      #- node-red-data:/data
    #environment:
      #- TZ=Europe/Madrid
  #END Node-RED configuration

#volumes:
  #node-red-data:

networks:
  simulateiot:
    name: simulateiot
    driver: overlay
    attachable: true
[/file]
[/template]


[template public generateCompile_dockerize_upToRegistry_components(anEnvironment : Environment)]
[comment @main/]
[file ('compile-dockerize-registry-components.py', false, 'UTF-8')]
import os, shutil, socket, getpass, subprocess

PATH = os.path.dirname(os.path.abspath(__file__))
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect(("8.8.8.8", 80))
ip = s.getsockname()['['/]0[']'/]
s.close()

def replace_line(file_name, line_num, text):
    lines = open(file_name, 'r').readlines()
    lines['['/]line_num[']'/] = text
    out = open(file_name, 'w')
    out.writelines(lines)
    out.close()

def execute(cmd):
	popen = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
	for stdout_line in iter(popen.stdout.readline, ""):
		yield stdout_line 
	popen.stdout.close()
	return_code = popen.wait()
	if return_code:
		raise subprocess.CalledProcessError(return_code, cmd)

print ('----------------------------------------------------------------------------------------------------\n')
print ("Starting to dockerize registry components ('compile-dockerize-registry-components.py')\n")
print ('----------------------------------------------------------------------------------------------------\n')
	[for(sensor : Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
		[if sensor.data.datasource.oclIsTypeOf(CSVload)]
if os.path.exists(PATH+'/[sensor.data.datasource->filter(LoadFromFile).FileName/]'):
	shutil.copy2(PATH+'/[sensor.data.datasource->filter(LoadFromFile).FileName/]', PATH+'/[sensor.name + sensor.id/]/src/main/resources')
	#print ('----------------------------------------------------------------------------------------------------\n')
#elif os.path.exists(PATH+'/gencode/[sensor.data.datasource->filter(LoadFromFile).FileName/]'):
	#shutil.copy2(PATH+'/gencode/[sensor.data.datasource->filter(LoadFromFile).FileName/]' +PATH+'/gencode/MobilityArchitecture/MobileNodes/[sensor.name + sensor.id/]/src/main/resources')
	#print ('----------------------------------------------------------------------------------------------------\n')
		[/if]
	[/for]
print('Dockerizing generated sensor components:\n')
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
with open(PATH+'/[device.name + device.id/]/pom.xml', 'r') as file:
    lines = ['['/]line.rstrip() for line in file[']'/]
count = 0    
for line in lines:
	if (line.find('<imageName>') != -1):
		replace_line(PATH+'/[device.name + device.id/]/pom.xml', count, line['['/]0:line.find('<imageName>')+len('<imageName>')[']'/]+ip+line['['/]line.find(':5000'):999[']'/]+'\n')
	count += 1
for path in execute("mvn -f "+PATH+"/[device.name + device.id/] clean package docker:build &"):
	print(path, end="")
#for path in execute(['['/]"mvn -f "+PATH+"/MobilityArchitecture/MobileNodes/[device.name + device.id/] clean package docker:build &"[']'/]):
	#print(path, end="")
print()
	[/for]
print ('----------------------------------------------------------------------------------------------------\n')
print('Dockerizing generated actuator components:\n')
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
with open(PATH+'/[actuator.name + actuator.id/]/pom.xml', 'r') as file:
    lines = ['['/]line.rstrip() for line in file[']'/]
count = 0    
for line in lines:
	if (line.find('<imageName>') != -1):
		replace_line(PATH+'/[actuator.name + actuator.id/]/pom.xml', count, line['['/]0:line.find('<imageName>')+len('<imageName>')[']'/]+ip+line['['/]line.find(':5000'):999[']'/]+'\n')
	count += 1
for path in execute("mvn -f "+PATH+"/[actuator.name + actuator.id/] clean package docker:build &"):
	print(path, end="")
print()
	[/for]
print ('----------------------------------------------------------------------------------------------------\n')
print('Dockerizing generated fog and cloud components:\n')
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
with open(PATH+'/[fog.name + fog.id/]/pom.xml', 'r') as file:
    lines = ['['/]line.rstrip() for line in file[']'/]
count = 0    
for line in lines:
	if (line.find('<imageName>') != -1):
		replace_line(PATH+'/[fog.name + fog.id/]/pom.xml', count, line['['/]0:line.find('<imageName>')+len('<imageName>')[']'/]+ip+line['['/]line.find(':5000'):999[']'/]+'\n')
	count += 1
for path in execute("mvn -f "+PATH+"/[fog.name.replaceAll('_','') + fog.id/] clean package docker:build &"):
	print(path, end="")
print()
	[/for]
print ('----------------------------------------------------------------------------------------------------\n')
print('Dockerizing generated database and process engine components:\n')
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
with open(PATH+'/EsperComponent[fog.name + fog.id/]/pom.xml', 'r') as file:
    lines = ['['/]line.rstrip() for line in file[']'/]
count = 0    
for line in lines:
	if (line.find('<imageName>') != -1):
		replace_line(PATH+'/EsperComponent[fog.name.replaceAll('_','') + fog.id/]/pom.xml', count, line['['/]0:line.find('<imageName>')+len('<imageName>')[']'/]+ip+line['['/]line.find(':5000'):999[']'/]+'\n')
	count += 1
for path in execute("mvn -f "+PATH+"/EsperComponent[fog.name.replaceAll('_','') + fog.id/] clean compile assembly:single"):
	print(path, end="")
for path in execute("mvn -f "+PATH+"/EsperComponent[fog.name.replaceAll('_','') + fog.id/] docker:build &"):
	print(path, end="")
print()
		[/if]
	[/for]
print ('----------------------------------------------------------------------------------------------------\n')
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(DataBase)->size()>0)]
#for path in execute("docker build "+PATH+"/apis/api[fog.name.replaceAll('_','') + fog.id/] -t "+ip+":5000/api-[fog.name.replaceAll('_','').toLowerCase() + fog.id/] . &"):
#	print(path, end="")
#print()
		[/if]
	[/for]
#for path in execute("mvn -f "+PATH+"/dashboard/dashboard2 clean install"):
#	print(path, end="")
#for path in execute("docker build "+PATH+"/dashboard -t "+ip+":5000/dashboard  &"):
	#print(path, end="")
print ('\n----------------------------------------------------------------------------------------------------\n')
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
for path in execute("docker build "+PATH+"/MobilityArchitecture/TSS/[fog.name.replaceAll('_','')/] -t "+ip+":5000/tss-[fog.name.replaceAll('_','').toLower()/]"):
	print(path, end="")
print()
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
for path in execute("docker build "+PATH+"/MobilityArchitecture/TDS/[fog.name.replaceAll('_','')/] -t "+ip+":5000/tds-[fog.name.replaceAll('_','').toLower()/]"):
	print(path, end="")
print()
	[/for]
print ('----------------------------------------------------------------------------------------------------\n')
print('Uploading dockers to registry:\n')
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
for path in execute("docker push "+ip+":5000/[fog.name.replaceAll('_','').toLowerCase() + fog.id/] &"):
	print(path, end="")
print()
		[if(fog.component->selectByKind(DataBase)->size()>0)]
#for path in execute("docker push "+ip+":5000/api-[fog.name.replaceAll('_','').toLowerCase() + fog.id/] &"):
#	print(path, end="")
#print()
		[/if]
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
		[if(fog.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
for path in execute("docker push "+ip+":5000/esper-[fog.name.replaceAll('_','').toLowerCase() + fog.id/] &"):
	print(path, end="")
print()
		[/if]
	[/for]
	[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
for path in execute("docker push "+ip+":5000/actuator-[actuator.name.toLowerCase() + actuator.id/] &"):
	print(path, end="")
print()
	[/for]
	[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
for path in execute("docker push "+ip+":5000/sensor-[device.name.toLowerCase() + device.id/] &"):
	print(path, end="")
print()
	[/for]
#for path in execute("docker push "+ip+":5000/dashboard &"):
	#print(path, end="")
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
for path in execute("docker push "+ip+":5000/tss-[fog.name.replaceAll('_','').toLower()/] &"):
	print(path, end="")
print()
	[/for]
	[for(fog: ProcessNode | anEnvironment.node->filter(ProcessNode))]
for path in execute("docker push "+ip+":5000/tds-[fog.name.replaceAll('_','').toLower()/] &"):
	print(path, end="")
print()
	[/for]
print ('----------------------------------------------------------------------------------------------------\n')
print ("End of registry components dockerisation ('compile-dockerize-registry-components.py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
[/file]
[/template]

[template public selectArduinoModelBatch(model : ArduinoModel, ip : String)]
if "[model/]"=="AdafruitCircuitPlayground": modelo="arduino:avr:circuitplay32u4cat"
elif "[model/]"=="BT": modelo="arduino:avr:bt"
elif "[model/]"=="DuemilanoveOrDiecimila": modelo="arduino:avr:diecimila"
elif "[model/]"=="Esplora": modelo="arduino:avr:esplora"
elif "[model/]"=="Ethernet": modelo="arduino:avr:ethernet"
elif "[model/]"=="Fio": modelo="arduino:avr:fio"
elif "[model/]"=="Gemma": modelo="arduino:avr:gemma"
elif "[model/]"=="Industrial101": modelo="arduino:avr:chiwawa"
elif "[model/]"=="Leonardo": modelo="arduino:avr:leonardo"
elif "[model/]"=="LeonardoETH": modelo="arduino:avr:leonardoeth"
elif "[model/]"=="MegaADK": modelo="arduino:avr:megaADK"
elif "[model/]"=="MegaOrMega2560": modelo="arduino:avr:mega"
elif "[model/]"=="Micro": modelo="arduino:avr:micro"
elif "[model/]"=="Mini": modelo="arduino:avr:mini"
elif "[model/]"=="NGOrOlder": modelo="arduino:avr:atmegang"
elif "[model/]"=="Nano": modelo="arduino:avr:nano"
elif "[model/]"=="ProOrPro Mini": modelo="arduino:avr:pro"
elif "[model/]"=="RobotControl": modelo="arduino:avr:robotControl"
elif "[model/]"=="RobotMotor": modelo="arduino:avr:robotMotor"
elif "[model/]"=="Uno": modelo="arduino:avr:uno"
elif "[model/]"=="UnoMini": modelo="arduino:avr:unomini"
elif "[model/]"=="UnoWiFi": modelo="arduino:avr:unowifi"
elif "[model/]"=="Yun": modelo="arduino:avr:yun"
elif "[model/]"=="YunMini": modelo="arduino:avr:yunmini"
elif "[model/]"=="LilyPadArduino": modelo="arduino:avr:lilypad"
elif "[model/]"=="LilyPadArduinoUSB": modelo="arduino:avr:LilyPadUSB"
elif "[model/]"=="LininoOne": modelo="arduino:avr:one"
elif "[model/]"=="LolinWemosD1Mini": modelo="esp8266:esp8266:d1_mini"
os.system('arduino-cli compile '+PATH+'/arduino/arduino.ino --fqbn '+modelo)
os.system('arduino-cli upload '+PATH+'/arduino/arduino.ino --port [ip/] --fqbn '+modelo)
[/template]

[template public changeIPArduinoFile(node : Node)]
nodePath = PATH
if nodePath.endswith('[node.name.replaceAll('_','')/][node.id/]'):
	nodePath = os.path.dirname(nodePath)
def replace_line(file_name, line_num, text):
    lines = open(file_name, 'r').readlines()
    lines['['/]line_num[']'/] = text
    out = open(file_name, 'w')
    out.writelines(lines)
    out.close()
with open(PATH+'/arduino/arduino.ino', 'r') as file:
    lines = ['['/]line.rstrip() for line in file[']'/]
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect(("8.8.8.8", 80))
ip = s.getsockname()['['/]0[']'/]
s.close()
count = 0    
for line in lines:
    if (line.find('IPv4_WiFi_PC') != -1):
        #ip = input("Enter the IP address of device '"+line['['/]18:line.find('IPv4_WiFi_PC')-2[']'/]+"': ")
        replace_line(PATH+'/arduino/arduino.ino', count, line['['/]0:line.find('IPv4_WiFi_PC')[']'/]+ip+'"\n')
    count += 1
count = 0    
for line in lines:
    if (line.find('Mosquitto_PORT') != -1):
        fog_name = line.split(' ')['['/]1[']'/]['['/]5:999[']'/]
        port = 1884
        with open(nodePath+'/DeployV2/mosquitto-'+fog_name+'.conf', 'r') as file:
	        port = ['['/]line.rstrip() for line in file[']'/]['['/]1[']'/]['['/]9:999[']'/]
        replace_line(PATH+'/arduino/arduino.ino', count, line['['/]0:line.find('Mosquitto_PORT')[']'/]+port+'"\n')
    count += 1
print ('\n----------------------------------------------------------------------------------------------------')
	[if (node->filter(Sensor)->size()>0)]
		[for (fogNode : FogNode | node.publish_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
print()
if os.path.exists(nodePath+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt') and os.path.exists(nodePath+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/key-[fogNode.name.replaceAll('_','')/][fogNode.id/].key'):
	with open(nodePath+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/key-[fogNode.name.replaceAll('_','')/][fogNode.id/].key', 'rb') as file:
		key = file.read()
	with open(nodePath+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'rb') as encrypted_file:
		encrypted_credentials = encrypted_file.read()
	decrypted_credentials = fernet = Fernet(key).decrypt(encrypted_credentials)
	print("Does your '[fogNode.name/]' device have a password? (yes/no): "+decrypted_credentials.decode().split('\n')['['/]0[']'/])
	if decrypted_credentials.decode().split('\n')['['/]0[']'/] == 'yes':
		print("Enter the username of device '[fogNode.name/]': "+decrypted_credentials.decode().split('\n')['['/]1[']'/])
		username = decrypted_credentials.decode().split('\n')['['/]1[']'/]
		print("Enter the password of device '[fogNode.name/]': ")
		password = decrypted_credentials.decode().split('\n')['['/]2[']'/]
	count = 0
	if decrypted_credentials.decode().split('\n')['['/]0[']'/] == 'yes':
	    with open(PATH+'/arduino/arduino.ino', 'r') as file:
	        lines = ['['/]line.rstrip() for line in file[']'/]
	    for line in lines:
	        if (line.find('_[fogNode.name.replaceAll('_','')/]")') != -1):
	            replace_line(PATH+'/arduino/arduino.ino', count, line['['/]0:line.find('_[fogNode.name.replaceAll('_','')/]")')+len('_[fogNode.name.replaceAll('_','')/]")')-1[']'/]+', "'+username+'", "'+password+'"'+line['['/]line.find('_[fogNode.name.replaceAll('_','')/]")')+len('_[fogNode.name.replaceAll('_','')/]")')-1:999[']'/]+'\n')
	        count += 1
	configuration_loaded = True
else:
	print("You must load the raspberry configuration ('load-swarm-worker-[fogNode.name.replaceAll('_','')/][fogNode.id/].py') first")
	configuration_loaded = False
		[/for]
	[/if]
	[if (node->filter(Actuator)->size()>0)]
		[for (fogNode : FogNode | node.suscribe_on_topic.ancestors(FogNode)->asSet()->sortedBy(name))]
print()
if os.path.exists(nodePath+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt') and os.path.exists(nodePath+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/key-[fogNode.name.replaceAll('_','')/][fogNode.id/].key'):
	with open(nodePath+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/key-[fogNode.name.replaceAll('_','')/][fogNode.id/].key', 'rb') as file:
		key = file.read()
	with open(nodePath+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'rb') as encrypted_file:
		encrypted_credentials = encrypted_file.read()
	decrypted_credentials = fernet = Fernet(key).decrypt(encrypted_credentials)
	print("Does your '[fogNode.name/]' device have a password? (yes/no): "+decrypted_credentials.decode().split('\n')['['/]0[']'/])
	if decrypted_credentials.decode().split('\n')['['/]0[']'/] == 'yes':
		print("Enter the username of device '[fogNode.name/]': "+decrypted_credentials.decode().split('\n')['['/]1[']'/])
		username = decrypted_credentials.decode().split('\n')['['/]1[']'/]
		print("Enter the password of device '[fogNode.name/]': ")
		password = decrypted_credentials.decode().split('\n')['['/]2[']'/]
	count = 0
	if decrypted_credentials.decode().split('\n')['['/]0[']'/] == 'yes':
	    with open(PATH+'/arduino/arduino.ino', 'r') as file:
	        lines = ['['/]line.rstrip() for line in file[']'/]
	    for line in lines:
	        if (line.find('_[fogNode.name.replaceAll('_','')/]")') != -1):
	            replace_line(PATH+'/arduino/arduino.ino', count, line['['/]0:line.find('_[fogNode.name.replaceAll('_','')/]")')+len('_[fogNode.name.replaceAll('_','')/]")')-1[']'/]+', "'+username+'", "'+password+'"'+line['['/]line.find('_[fogNode.name.replaceAll('_','')/]")')+len('_[fogNode.name.replaceAll('_','')/]")')-1:999[']'/]+'\n')
	        count += 1
	configuration_loaded = True
else:
	print("You must load the raspberry configuration ('load-swarm-worker-[fogNode.name.replaceAll('_','')/][fogNode.id/].py') first")
	configuration_loaded = False
		[/for]
	[/if]
[/template]

[template public generateArduinoLoadPython(anEnvironment : Environment)]
[comment @main/]
[if (anEnvironment.node.hil_node_configuration->filter(Arduino)->size()>0)]
	[file ('load-config-all-arduino.py', false, 'UTF-8')]
print ('----------------------------------------------------------------------------------------------------\n')
import os, shutil, socket, getpass, sys, subprocess, importlib.util

print('Checking if all necessary libraries are installed:\n')
subprocess.check_call(['['/]sys.executable, "-m", "pip", "install", "cryptography"[']'/])
cryptography_found = importlib.util.find_spec('cryptography') is not None
PATH = os.path.dirname(os.path.abspath(__file__))

if cryptography_found:
	from cryptography.fernet import Fernet

	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("Starting to run Arduino-CLI ('load-config-all-arduino.py')\n")
	print ('----------------------------------------------------------------------------------------------------\n')
	if os.path.exists(os.path.dirname(PATH)+'/arduino-cli/libraries'):
		print ('List of Arduino boards connected to the computer:')
		os.system('arduino-cli board list')
			[for(device: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
				[if device.hil_node_configuration->filter(Arduino) -> size () > 0]
		print ('\n----------------------------------------------------------------------------------------------------\n')
		print ('Sketch generation and code import:')
		print ('Sensor: [device.name/] ([device.hil_node_configuration->filter(Arduino).arduinoModel/]: [device.hil_node_configuration.IP/])')
		os.system('arduino-cli sketch new '+PATH+'/arduino')
		shutil.copy2(PATH+'/[device.name.replaceAll('_','')/][device.id/]/[device.name.replaceAll('_','')/][device.id/].ino', PATH+'/arduino/arduino.ino')
		configuration_loaded = False
		[device.changeIPArduinoFile()/]
		if configuration_loaded:
			print ('\n----------------------------------------------------------------------------------------------------')
			print ("\nCompiling the sketch and loading it on the Arduino '[device.name/]' ([device.hil_node_configuration->filter(Arduino).arduinoModel/]: [device.hil_node_configuration.IP/])")
			[device.hil_node_configuration->filter(Arduino).arduinoModel.selectArduinoModelBatch(device.hil_node_configuration.IP)/]
					[file ('/' + device.name + device.id +'/' + 'load-config-arduino-' + device.name + device.id +'.py', false, 'UTF-8')]
print ('----------------------------------------------------------------------------------------------------\n')
import os, shutil, socket, getpass, sys, subprocess, importlib.util

print('Checking if all necessary libraries are installed:\n')
subprocess.check_call(['['/]sys.executable, "-m", "pip", "install", "cryptography"[']'/])
cryptography_found = importlib.util.find_spec('cryptography') is not None	
PATH = os.path.dirname(os.path.abspath(__file__))

if cryptography_found:
	from cryptography.fernet import Fernet
	
	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("Starting to run Arduino-CLI ('load-config-arduino-[device.name.replaceAll('_','')/][device.id/].py')\n")
	print ('----------------------------------------------------------------------------------------------------\n')
	if os.path.exists(os.path.dirname(os.path.dirname(PATH))+'/arduino-cli/libraries'):
		print ('List of Arduino boards connected to the computer:')
		os.system('arduino-cli board list')
		print ('\n----------------------------------------------------------------------------------------------------\n')
		print ('Sketch generation and code import:')
		print ('Sensor: [device.name/] ([device.hil_node_configuration->filter(Arduino).arduinoModel/]: [device.hil_node_configuration.IP/])')
		os.system('arduino-cli sketch new '+PATH+'/arduino')
		shutil.copy2(PATH+'/[device.name.replaceAll('_','')/][device.id/].ino', PATH+'/arduino/arduino.ino')
		configuration_loaded = False
		[device.changeIPArduinoFile()/]
		if configuration_loaded:
			print ('\n----------------------------------------------------------------------------------------------------')
			print ("\nCompiling the sketch and loading it on the Arduino '[device.name/]' ([device.hil_node_configuration->filter(Arduino).arduinoModel/]: [device.hil_node_configuration.IP/])")
			[device.hil_node_configuration->filter(Arduino).arduinoModel.selectArduinoModelBatch(device.hil_node_configuration.IP)/]
		print ('\n----------------------------------------------------------------------------------------------------\n')
		shutil.rmtree(PATH+'/arduino')
		print ("End of Arduino-CLI run ('load-config-arduino-[device.name.replaceAll('_','')/][device.id/].py')")
	else:
		print("Arduino Command Line is not installed. Please, run the installer script ('install-arduino.py')")
else:
	print ("\nThe required libraries are not installed. Please, rerun the script again ('load-config-arduino-[device.name.replaceAll('_','')/][device.id/].py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
				[/file]
			[/if]
		[/for]
		[for(actuator: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
			[if actuator.hil_node_configuration->filter(Arduino) -> size () > 0]
		print ('\n----------------------------------------------------------------------------------------------------\n')
		print ('Sketch generation and code import:')
		print ('Actuator: [actuator.name/] ([actuator.hil_node_configuration->filter(Arduino).arduinoModel/]: [actuator.hil_node_configuration.IP/])')
		os.system('arduino-cli sketch new '+PATH+'/arduino')
		shutil.copy2(PATH+'/[actuator.name.replaceAll('_','')/][actuator.id/]/[actuator.name.replaceAll('_','')/][actuator.id/].ino', PATH+'/arduino/arduino.ino')
		configuration_loaded = False
		[actuator.changeIPArduinoFile()/]
		if configuration_loaded:
			print ('\n----------------------------------------------------------------------------------------------------')
			print ("\nCompiling the sketch and loading it on the Arduino '[actuator.name/]' ([actuator.hil_node_configuration->filter(Arduino).arduinoModel/]: [actuator.hil_node_configuration.IP/])")
			[actuator.hil_node_configuration->filter(Arduino).arduinoModel.selectArduinoModelBatch(actuator.hil_node_configuration.IP)/]
				[file ('/' + actuator.name + actuator.id +'/' + 'load-config-arduino-' + actuator.name + actuator.id +'.py', false, 'UTF-8')]
print ('----------------------------------------------------------------------------------------------------\n')
import os, shutil, socket, getpass, sys, subprocess, importlib.util

print('Checking if all necessary libraries are installed:\n')
subprocess.check_call(['['/]sys.executable, "-m", "pip", "install", "cryptography"[']'/])
cryptography_found = importlib.util.find_spec('cryptography') is not None
PATH = os.path.dirname(os.path.abspath(__file__))

if cryptography_found:
	from cryptography.fernet import Fernet

	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("Starting to run Arduino-CLI ('load-config-arduino-[actuator.name.replaceAll('_','')/][actuator.id/].py')\n")
	print ('----------------------------------------------------------------------------------------------------\n')
	if os.path.exists(os.path.dirname(os.path.dirname(PATH))+'/arduino-cli/libraries'):
		print ('List of Arduino boards connected to the computer:')
		os.system('arduino-cli board list')
		print ('\n----------------------------------------------------------------------------------------------------\n')
		print ('Sketch generation and code import:')
		print ('Actuator: [actuator.name/] ([actuator.hil_node_configuration->filter(Arduino).arduinoModel/]: [actuator.hil_node_configuration.IP/])')
		os.system('arduino-cli sketch new '+PATH+'/arduino')
		shutil.copy2(PATH+'/[actuator.name.replaceAll('_','')/][actuator.id/].ino', PATH+'/arduino/arduino.ino')
		configuration_loaded = False
		[actuator.changeIPArduinoFile()/]
		if configuration_loaded:
			print ('\n----------------------------------------------------------------------------------------------------')
			print ("\nCompiling the sketch and loading it on the Arduino '[actuator.name/]' ([actuator.hil_node_configuration->filter(Arduino).arduinoModel/]: [actuator.hil_node_configuration.IP/])")
			[actuator.hil_node_configuration->filter(Arduino).arduinoModel.selectArduinoModelBatch(actuator.hil_node_configuration.IP)/]
		print ('\n----------------------------------------------------------------------------------------------------\n')
		shutil.rmtree(PATH+'/arduino')
	else:
		print("Arduino Command Line is not installed. Please, run the installer script ('install-arduino.py')")
	print ("End of Arduino-CLI run ('load-config-arduino-[actuator.name.replaceAll('_','')/][actuator.id/].py')")
else:
	print ("\nThe required libraries are not installed. Please, rerun the script again ('load-config-arduino-[actuator.name.replaceAll('_','')/][actuator.id/].py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
				[/file]
			[/if]
		[/for]
		print ('\n----------------------------------------------------------------------------------------------------\n')
		shutil.rmtree(PATH+'/arduino')
		print ("End of Arduino-CLI run ('load-config-all-arduino.py')")
	else:
		print("Arduino Command Line is not installed. Please, run the installer script ('install-arduino.py')")
else:
	print ("\nThe required libraries are not installed. Please, rerun the script again ('load-config-all-arduino.py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
	[/file]
[/if]
[/template]

[template public generateSwarmLinuxLoadPython(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployV2/Swarm/load-swarm-manager-linux.py', false, 'UTF-8')]
print ('----------------------------------------------------------------------------------------------------\n')
import os, socket, subprocess, platform, getpass, shutil, sys, importlib.util

print('Checking if all necessary libraries are installed:\n')
subprocess.check_call(['['/]sys.executable, "-m", "pip", "install", "scp", "paramiko", "cryptography"[']'/])
PATH = os.path.dirname(os.path.abspath(__file__))
cryptography_found = importlib.util.find_spec('cryptography') is not None

if cryptography_found:
	from cryptography.fernet import Fernet

	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("Starting to build a Docker Swarm deployment ('load-swarm-manager-linux.py')\n")
	print ('----------------------------------------------------------------------------------------------------\n')
	print ('Obtaining the required IP address for UNIX/Linux OS:')
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.connect(("8.8.8.8", 80))
	ip=s.getsockname()['['/]0[']'/]
	s.close()
	print ('Current computer: '+ip)
	def replace_line(file_name, line_num, text):
	    lines = open(file_name, 'r').readlines()
	    lines['['/]line_num[']'/] = text
	    out = open(file_name, 'w')
	    out.writelines(lines)
	    out.close()
	print ('\nForcing the current machine to leave the Swarm that it is connected to:')
	os.system('docker swarm leave --force')
	print ('\n----------------------------------------------------------------------------------------------------\n')
	with open(PATH+'/daemon.json', 'w') as file:
		file.write('{\n\t"builder": { "gc": { "defaultKeepStorage": "20GB", "enabled": true } },\n\t"experimental": true,\n\t"features": { "buildkit": true },\n\t"insecure-registries": ['['/]"'+ip+':5000"[']'/]\n}')
	with open(os.path.dirname(PATH)+'/docker-compose.yaml', 'r') as file:
	    lines = ['['/]line.rstrip() for line in file[']'/]
	shutil.copy2(os.path.dirname(PATH)+'/docker-compose.yaml', os.path.dirname(PATH)+'/docker-run.yaml')
	count = 0
	usr = input("Enter the Docker Hub username (e.g. 'admin'): ")  
	psw = getpass.getpass("Enter the Docker Hub password (e.g. '12345'): ")
	print()
	os.system('docker login --username '+usr+' --password '+psw)
	with open(PATH+'/credentials-docker.txt', 'w') as file:
		file.write(usr+'\n'+psw)
	key = Fernet.generate_key()
	with open(PATH+'/key-docker.key', 'wb') as file:
		file.write(key)
	with open(PATH+'/credentials-docker.txt', 'rb') as file:
		decrypted_credentials = file.read()
	encrypted_credentials = Fernet(key).encrypt(decrypted_credentials)
	with open(PATH+'/credentials-docker.txt', 'wb') as encrypted_file:
		encrypted_file.write(encrypted_credentials)
	print('\n----------------------------------------------------------------------------------------------------\n')
	print('Select where you want to save the multi-arc image:\n')
	print('  - 0) Local registry')
	print('  - 1) Docker Hub repository')
	print()
	inp_build = 'error'
	while inp_build != '0' and inp_build != '1':
		inp_build = input("Enter the number of the selected option (0-1): ")
	print ('\n----------------------------------------------------------------------------------------------------\n')
	for line in lines:
		if (line.find('localhost:5000/') != -1):
			if inp_build == '0':
				replace_line(os.path.dirname(PATH)+'/docker-run.yaml', count, line['['/]0:line.find('localhost:5000/')[']'/]+ip+':5000/hil:'+line['['/]line.find('localhost')+15:999[']'/]+'\n')
			else:
				replace_line(os.path.dirname(PATH)+'/docker-run.yaml', count, line['['/]0:line.find('localhost:5000/')[']'/]+usr+'/hil:'+line['['/]line.find('localhost')+15:999[']'/]+'\n')
		count += 1
	if platform.system() == 'Linux':
		print('Creating a cluster in swarm mode and generating the command for workers to join it:')
		ADD_WORKER_CMD = subprocess.getoutput('docker swarm init --advertise-addr '+ip+' --listen-addr 0.0.0.0:2377')
		if len(ADD_WORKER_CMD.split('\n')) >= 5:
			print(ADD_WORKER_CMD.split('\n')['['/]4[']'/]['['/]4:999[']'/])
			ADD_WORKER_CMD = ADD_WORKER_CMD.split('\n')['['/]4[']'/]['['/]4:999[']'/]
			with open(PATH+'/join-manager-cmd.txt', 'w') as file:
				file.write(ADD_WORKER_CMD)
		else:
			print('Error responde: the cluster in swarm mode has not been created correctly\n')
	else:
		print('Error responde: This script should only be run if your operating system is UNIX/Linux')
	print('\n----------------------------------------------------------------------------------------------------\n')
	print("End of Docker Swarm deployment ('load-swarm-manager-linux.py')")
else:
	print("\nThe required libraries are not installed. Please, rerun the script again ('load-swarm-manager-linux.py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
[/file]
[/template]

[template public generateRaspberryLoadPython(anEnvironment : Environment)]
[comment @main/]
[if (anEnvironment.node.hil_node_configuration->filter(Raspberry)->size()>0)]
	[file ('load-config-all-raspberry.py', false, 'UTF-8')]
print ('----------------------------------------------------------------------------------------------------\n')
import os, socket, subprocess, getpass, sys, platform, shutil, importlib.util

print('Checking if all necessary libraries are installed:\n')
subprocess.check_call(['['/]sys.executable, "-m", "pip", "install", "scp", "paramiko", "cryptography"[']'/])
PATH = os.path.dirname(os.path.abspath(__file__))
paramiko_found = importlib.util.find_spec('paramiko') is not None
scp_found = importlib.util.find_spec('scp') is not None
cryptography_found = importlib.util.find_spec('cryptography') is not None

if paramiko_found and scp_found and cryptography_found:
	import paramiko, scp
	from cryptography.fernet import Fernet
	if os.path.exists(PATH+'/DeployV2/Swarm/join-manager-cmd.txt'):
		os.remove(PATH+'/DeployV2/Swarm/join-manager-cmd.txt')
	
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.connect(("8.8.8.8", 80))
	ip=s.getsockname()['['/]0[']'/]
	s.close()
	
	def replace_line(file_name, line_num, text):
	    lines = open(file_name, 'r').readlines()
	    lines['['/]line_num[']'/] = text
	    out = open(file_name, 'w')
	    out.writelines(lines)
	    out.close()
	with open(PATH+'/DeployV2/docker-compose.yaml', 'r') as file:
	    lines = ['['/]line.rstrip() for line in file[']'/]
	shutil.copy2(PATH+'/DeployV2/docker-compose.yaml', PATH+'/DeployV2/docker-run.yaml')
	count = 0
	usr = input("\nEnter the Docker Hub username (e.g. 'admin'): ")
	psw = getpass.getpass("Enter the Docker Hub password (e.g. '12345'): ")
	print()
	os.system('docker login --username '+usr+' --password '+psw)
	with open(PATH+'/DeployV2/Swarm/credentials-docker.txt', 'w') as file:
		file.write(usr+'\n'+psw)
	key = Fernet.generate_key()
	with open(PATH+'/DeployV2/Swarm/key-docker.key', 'wb') as file:
		file.write(key)
	with open(PATH+'/DeployV2/Swarm/credentials-docker.txt', 'rb') as file:
		decrypted_credentials = file.read()
	encrypted_credentials = Fernet(key).encrypt(decrypted_credentials)
	with open(PATH+'/DeployV2/Swarm/credentials-docker.txt', 'wb') as encrypted_file:
		encrypted_file.write(encrypted_credentials)
	print('\n----------------------------------------------------------------------------------------------------\n')
	print('Select where you want to save the multi-arc image:\n')
	print('  - 0) Local registry')
	print('  - 1) Docker Hub repository')
	print()
	inp_build = 'error'
	while inp_build != '0' and inp_build != '1':
		inp_build = input("Enter the number of the selected option (0-1): ")
	for line in lines:
		if (line.find('localhost:5000/') != -1):
			if inp_build == '0':
				replace_line(PATH+'/DeployV2/docker-run.yaml', count, line['['/]0:line.find('localhost:5000/')[']'/]+ip+':5000/hil:'+line['['/]line.find('localhost')+15:999[']'/]+'\n')
			else:
				replace_line(PATH+'/DeployV2/docker-run.yaml', count, line['['/]0:line.find('localhost:5000/')[']'/]+usr+'/hil:'+line['['/]line.find('localhost')+15:999[']'/]+'\n')
		count += 1
	
	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("Starting to build a Docker Swarm deployment ('load-config-all-raspberry.py')")
	print ('\n----------------------------------------------------------------------------------------------------\n')
	if platform.system() == 'Linux':
		print ('Obtaining the required IP address for UNIX/Linux OS:')
		print ('Current computer: '+ip)
		print ('\nForcing the current machine to leave the Swarm that it is connected to:')
		os.system('docker swarm leave --force')
		print('\nCreating a cluster in swarm mode and generating the command for workers to join it:')
		with open(PATH+'/DeployV2/Swarm/daemon.json', 'w') as file:
			file.write('{\n\t"builder": { "gc": { "defaultKeepStorage": "20GB", "enabled": true } },\n\t"experimental": true,\n\t"features": { "buildkit": true },\n\t"insecure-registries": ['['/]"'+ip+':5000"[']'/]\n}')
		ADD_WORKER_CMD = subprocess.getoutput('docker swarm init --advertise-addr '+ip+' --listen-addr 0.0.0.0:2377')
		if len(ADD_WORKER_CMD.split('\n')) >= 5:
			print(ADD_WORKER_CMD.split('\n')['['/]4[']'/]['['/]4:999[']'/])
			ADD_WORKER_CMD = ADD_WORKER_CMD.split('\n')['['/]4[']'/]['['/]4:999[']'/]
			with open(PATH+'/DeployV2/Swarm/join-manager-cmd.txt', 'w') as file:
				file.write(ADD_WORKER_CMD)
			[for (fogNode : FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode)->select(fogNode : FogNode | fogNode.hil_node_configuration->filter(Raspberry)->size()>0)->sortedBy(name))]
			print ('\n----------------------------------------------------------------------------------------------------\n')
			print ("Obtaining the required IP address for '[fogNode.name/]':")
			print ('Raspberry Pi: [fogNode.hil_node_configuration.IP/]\n')
			inp = 'error'
			while inp != 'yes' and inp != 'no':
			    inp = input("Does your '[fogNode.name/]' device have a password? (yes/no): ").lower()
			username = input("Enter the username of device '[fogNode.name/]': ")
			if inp == 'yes':
				password = getpass.getpass("Enter the password of device '[fogNode.name/]': ")
			with open(PATH+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'w') as file:
				if inp == 'yes':
					file.write(inp+'\n'+username+'\n'+password)
				else:
					file.write(inp+'\n'+username)
			key = Fernet.generate_key()
			with open(PATH+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/key-[fogNode.name.replaceAll('_','')/][fogNode.id/].key', 'wb') as file:
				file.write(key)
			with open(PATH+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'rb') as file:
				decrypted_credentials = file.read()
			encrypted_credentials = Fernet(key).encrypt(decrypted_credentials)
			with open(PATH+'/[fogNode.name.replaceAll('_','')/][fogNode.id/]/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'wb') as encrypted_file:
				encrypted_file.write(encrypted_credentials)
			print ('\n----------------------------------------------------------------------------------------------------\n')
			print("Joining a cluster in swarm mode as a worker ('[fogNode.name/]'):")
			if inp == 'yes':
				ssh = paramiko.SSHClient()
				ssh.load_system_host_keys()
				ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
				ssh.connect(hostname='[fogNode.hil_node_configuration.IP/]', username=username, password=password, port='22', look_for_keys=False)
				scp = scp.SCPClient(ssh.get_transport())
				scp.put(PATH+'/DeployV2/Swarm/daemon.json', '/home/pi')
				scp.put(PATH+'/DeployV2/docker-run.yaml', '/home/pi')
				stdin, stdout, stderr = ssh.exec_command("sudo apt-get install ufw; sudo ufw allow 2377/tcp; sudo ufw allow 7946/tcp; sudo ufw allow 7946/udp; sudo ufw allow 4789/udp; sudo ufw enable; sudo ufw disable; sudo /sbin/iptables --flush")
				stdin, stdout, stderr = ssh.exec_command("sudo mv /home/pi/daemon.json /etc/docker; sudo systemctl daemon-reload; sudo systemctl restart docker")
				stdin, stdout, stderr = ssh.exec_command("docker swarm leave --force")
				stdout = stdout.read().decode().split('\n')
				if len(stdout) >= 1:
					if stdout['['/]0[']'/]:
						print(stdout['['/]0[']'/])
					else:
						print('Error response from daemon: This node is not part of a swarm')
				else:
					print('Error responde: the node has not been able to leave the swarm cluster which it is connected to')
				stdin, stdout, stderr = ssh.exec_command(ADD_WORKER_CMD)
				stdout = stdout.read().decode().split('\n')
				if len(stdout) >= 1:
					if stdout['['/]0[']'/]:
						print(stdout['['/]0[']'/])
					else:
						print('Error responde: the node has not been able to join as a worker')
				else:
					print('Error responde: the node has not been able to join as a worker')
				stdin.close()
				ssh.close()
				scp.close()
			else:
				scp = subprocess.Popen(f"scp '"+PATH+"/DeployV2/Swarm/daemon.json' "+username+"@[fogNode.hil_node_configuration.IP/]:/home/pi", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				scp.wait()
				scp = subprocess.Popen(f"scp '"+PATH+"/DeployV2/docker-run.yaml' "+username+"@[fogNode.hil_node_configuration.IP/]:/home/pi", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				scp.wait()
				ssh = subprocess.Popen(f'ssh '+username+'@[fogNode.hil_node_configuration.IP/] "sudo apt-get install ufw; sudo ufw allow 2377/tcp; sudo ufw allow 7946/tcp; sudo ufw allow 7946/udp; sudo ufw allow 4789/udp; sudo ufw enable; sudo ufw disable; sudo /sbin/iptables --flush"', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				ssh.wait()
				ssh = subprocess.Popen(f'ssh '+username+'@[fogNode.hil_node_configuration.IP/] "sudo mv /home/pi/daemon.json /etc/docker; sudo systemctl daemon-reload; sudo systemctl restart docker; docker swarm leave --force; '+ADD_WORKER_CMD+'"', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				ssh.wait()
				for line in ssh.communicate():
					if line.decode():
						if line['['/]-1:[']'/].decode() == '\n':
							print(line['['/]0:len(line)-1[']'/].decode()) #print(line.decode().replace('\n', ''))
						else:
							print(line.decode())
			[/for]
		else:
			print('Error responde: the cluster in swarm mode has not been created correctly')
	else:
		print('Error responde: This script should only be run if your operating system is UNIX/Linux')
	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("End of Docker Swarm deployment ('load-config-all-raspberry.py')")
else:
	print ("\nThe required libraries are not installed. Please, rerun the script again ('load-config-all-raspberry.py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
		[for (fogNode : FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode)->select(fogNode : FogNode | fogNode.hil_node_configuration->filter(Raspberry)->size()>0)->sortedBy(name))]
			[if (fogNode.hil_node_configuration->filter(Raspberry)->size()>0)]
				[file ('/' + fogNode.name + fogNode.id +'/' + 'load-swarm-worker-' + fogNode.name + fogNode.id +'.py', false, 'UTF-8')]
print ('----------------------------------------------------------------------------------------------------\n')
import os, socket, subprocess, getpass, sys, platform, importlib.util

print('Checking if all necessary libraries are installed:\n')
subprocess.check_call(['['/]sys.executable, "-m", "pip", "install", "scp", "paramiko", "cryptography"[']'/])
PATH = os.path.dirname(os.path.abspath(__file__))
paramiko_found = importlib.util.find_spec('paramiko') is not None
scp_found = importlib.util.find_spec('scp') is not None
cryptography_found = importlib.util.find_spec('cryptography') is not None

if paramiko_found and scp_found and cryptography_found:
	import paramiko, scp
	from cryptography.fernet import Fernet
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.connect(("8.8.8.8", 80))
	ip=s.getsockname()['['/]0[']'/]
	s.close()
	
	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("Starting to build a Docker Swarm deployment ('load-swarm-worker-[fogNode.name.replaceAll('_','')/][fogNode.id/].py')")
	print ('\n----------------------------------------------------------------------------------------------------\n')
	if platform.system() == 'Linux':
		print ('Obtaining the required IP address for UNIX/Linux OS:')
		print ('Current computer: '+ip)
		print ('\n----------------------------------------------------------------------------------------------------\n')
		if os.path.exists(os.path.dirname(PATH)+'/DeployV2/Swarm/join-manager-cmd.txt'):
			inp = 'error'
			while inp != 'yes' and inp != 'no':
			    inp = input("Does your '[fogNode.name/]' device have a password? (yes/no): ").lower()
			username = input("Enter the username of device '[fogNode.name/]': ")
			if inp == 'yes':
				password = getpass.getpass("Enter the password of device '[fogNode.name/]': ")
			with open(PATH+'/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'w') as file:
				if inp == 'yes':
					file.write(inp+'\n'+username+'\n'+password)
				else:
					file.write(inp+'\n'+username)
			key = Fernet.generate_key()
			with open(PATH+'/key-[fogNode.name.replaceAll('_','')/][fogNode.id/].key', 'wb') as file:
				file.write(key)
			with open(PATH+'/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'rb') as file:
				decrypted_credentials = file.read()
			encrypted_credentials = Fernet(key).encrypt(decrypted_credentials)
			with open(PATH+'/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'wb') as encrypted_file:
				encrypted_file.write(encrypted_credentials)
			print ('\n----------------------------------------------------------------------------------------------------\n')
			print("Joining a cluster in swarm mode as a worker ('[fogNode.name/]'):")
			with open(os.path.dirname(PATH)+'/DeployV2/Swarm/join-manager-cmd.txt', 'r') as file:
				ADD_WORKER_CMD = file.readlines()['['/]0[']'/]
			if inp == 'yes':
				ssh = paramiko.SSHClient()
				ssh.load_system_host_keys()
				ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
				ssh.connect(hostname='[fogNode.hil_node_configuration.IP/]', username=username, password=password, port='22', look_for_keys=False)
				scp = scp.SCPClient(ssh.get_transport())
				scp.put(os.path.dirname(PATH)+'/DeployV2/Swarm/daemon.json', '/home/pi')
				scp.put(os.path.dirname(PATH)+'/DeployV2/docker-run.yaml', '/home/pi')
				stdin, stdout, stderr = ssh.exec_command("sudo apt-get install ufw; sudo ufw allow 2377/tcp; sudo ufw allow 7946/tcp; sudo ufw allow 7946/udp; sudo ufw allow 4789/udp; sudo ufw enable; sudo ufw disable; sudo /sbin/iptables --flush")
				stdin, stdout, stderr = ssh.exec_command("sudo mv /home/pi/daemon.json /etc/docker; sudo systemctl daemon-reload; sudo systemctl restart docker")
				stdin, stdout, stderr = ssh.exec_command("docker swarm leave --force")
				stdout = stdout.read().decode().split('\n')
				if len(stdout) >= 1:
					if stdout['['/]0[']'/]:
						print(stdout['['/]0[']'/])
					else:
						print('Error response from daemon: This node is not part of a swarm')
				else:
					print('Error responde: the node has not been able to leave the swarm cluster which it is connected to')
				stdin, stdout, stderr = ssh.exec_command(ADD_WORKER_CMD)
				stdout = stdout.read().decode().split('\n')
				if len(stdout) >= 1:
					if stdout['['/]0[']'/]:
						print(stdout['['/]0[']'/])
					else:
						print('Error responde: the node has not been able to join as a worker')
				else:
					print('Error responde: the node has not been able to join as a worker')
				stdin.close()
				ssh.close()
				scp.close()
			else:
				scp = subprocess.Popen(f"scp '"+os.path.dirname(PATH)+"/DeployV2/Swarm/daemon.json' "+username+"@[fogNode.hil_node_configuration.IP/]:/home/pi", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				scp.wait()
				scp = subprocess.Popen(f"scp '"+os.path.dirname(PATH)+"/DeployV2/docker-run.yaml' "+username+"@[fogNode.hil_node_configuration.IP/]:/home/pi", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				scp.wait()
				ssh = subprocess.Popen(f'ssh '+username+'@[fogNode.hil_node_configuration.IP/] "sudo apt-get install ufw; sudo ufw allow 2377/tcp; sudo ufw allow 7946/tcp; sudo ufw allow 7946/udp; sudo ufw allow 4789/udp; sudo ufw enable; sudo ufw disable; sudo /sbin/iptables --flush"', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				ssh.wait()
				ssh = subprocess.Popen(f'ssh '+username+'@[fogNode.hil_node_configuration.IP/] "sudo mv /home/pi/daemon.json /etc/docker; sudo systemctl daemon-reload; sudo systemctl restart docker; docker swarm leave --force; '+ADD_WORKER_CMD+'"', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				ssh.wait()
				for line in ssh.communicate():
					if line.decode():
						if line['['/]-1:[']'/].decode() == '\n':
							print(line['['/]0:len(line)-1[']'/].decode()) #print(line.decode().replace('\n', ''))
						else:
							print(line.decode())
		else:
			print("You must run the manager node script ('load-swarm-manager-linux.py') first")
	else:
		print('Error responde: This script should only be run if your operating system is UNIX/Linux')
	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("End of Docker Swarm deployment ('load-swarm-worker-[fogNode.name.replaceAll('_','')/][fogNode.id/].py')")
else:
	print ("\nThe required libraries are not installed. Please, rerun the script again ('load-swarm-worker-[fogNode.name.replaceAll('_','')/][fogNode.id/].py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
				[/file]
			[/if]
		[/for]
	[/file]
[/if]
[/template]

[template public generateNodeREDLoadPython(anEnvironment : Environment)]
[comment @main/]
[comment]
[file ('load-node-red-flow.py', false, 'UTF-8')]
import os, time

PATH = os.path.dirname(os.path.abspath(__file__))

print ('----------------------------------------------------------------------------------------------------\n')
print ('Starting to run NodeRED\n')
print ('----------------------------------------------------------------------------------------------------\n')
os.system('docker stop deployv2-node-red-1')
os.system('docker cp "'+PATH+'/flows.json" "deployv2-node-red-1:/data"')
os.system('docker start deployv2-node-red-1')
[comment]
echo npm install dashboard-evi
docker exec -it 0ed212cab0f29d6686e1ec55d50dee342a1815fccafc898759fbc5e43786e326 sh
exit
[/comment]
os.system('start chrome http://127.0.0.1:1880/')
print ('\n----------------------------------------------------------------------------------------------------')
print ('\nEnd of NodeRED run')
print ('\n----------------------------------------------------------------------------------------------------')
time.sleep(5)
[/file]
[/comment]
[/template]

[template public generateFlowJSONBatch(anEnvironment : Environment)]
[comment @main/]
[comment]
[file ('flows.json', false, 'UTF-8')]
['['/]
    {
        "id": "46db1cc249440deb",
        "type": "tab",
        "label": "NodeRED Flow",
        "disabled": false,
        "info": "",
        "env": ['['/][']'/]
    },
	{
        "id": "tab",
        "type": "ui_tab",
        "name": "Topics's tab",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
	[for (topic: Topic | anEnvironment.node->filter(EdgeNode)->filter(Sensor).publish_on_topic->asSet()->sortedBy(name))]
	{
		"id": "mqtt[topic.name/]", 
        "type": "mqtt in",
        "z": "46db1cc249440deb",
        "name": "MQTT Topic [topic.name/]",
        "topic": "[topic.name/]",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5591976f0626fe5a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 60,
        "wires": ['['/]
            ['['/]"gauge[topic.name/]","salida","chart[topic.name/]"[']'/]
		[']'/]
	},
	{
        "id": "gauge[topic.name/]",
        "type": "ui_gauge",
        "z": "46db1cc249440deb",
        "name": "Medidor (Topic [topic.name/])",
        "group": "grupo[topic.name/]",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "MediciÃ³n",
        "label": "valor",
        "format": "{{value}}",
        "min": 0,
        "max": "99",
        "colors": ['['/]
            "#00b500",
            "#e6e600",
            "#ca3838"
        [']'/],
        "seg1": "",
        "seg2": "",
        "x": 410,
        "y": 60,
        "wires": ['['/][']'/]
    },
	{
        "id": "chart[topic.name/]",
        "type": "ui_chart",
        "z": "46db1cc249440deb",
        "name": "GrÃ¡fica (Topic [topic.name/])",
        "group": "grupo[topic.name/]",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "EvoluciÃ³n",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "99",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": ['['/]
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        [']'/],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 720,
        "y": 60,
        "wires": ['['/]
            ['['/][']'/]
        [']'/]
    },
	{
        "id": "grupo[topic.name/]",
        "type": "ui_group",
        "name": "Topic: [topic.name/]",
        "tab": "tab",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
	[/for]
 	{
        "id": "salida",
        "type": "debug",
        "z": "46db1cc249440deb",
        "name": "Salida",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 120,
        "wires": ['['/][']'/]
    },
	{
        "id": "5591976f0626fe5a",
        "type": "mqtt-broker",
        "name": "mosquitto-foga0",
        "broker": "mosquitto-foga0",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
[']'/]
[/file]
[/comment]
[/template]

[template public generateDockerComposePython(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployV2/start-docker-simulation-linux.py', false, 'UTF-8')]
import os, getpass

PATH = os.path.dirname(os.path.abspath(__file__))

print ('----------------------------------------------------------------------------------------------------\n')
print ("Starting Docker container ('start-docker-simulation-linux.py')\n")
print ('----------------------------------------------------------------------------------------------------\n')
if os.path.exists(PATH+'/docker-run.yaml'):
	os.system("docker compose -f "+PATH+"/docker-run.yaml up --remove-orphans --force-recreate")
else:
	print("You must run the fog nodes script ('load-swarm-manager-linux.py') first")
print ('\n----------------------------------------------------------------------------------------------------\n')
print ("End of Docker run ('start-docker-simulation-linux.py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
[/file]
[/template]


[template public raspberryLoadDockerComposeFileRaspberry(anEnvironment : Environment)]
[comment @main/]
[file ('/DeployV2/start-docker-simulation-raspberry.py', false, 'UTF-8')]
import os, getpass, subprocess, platform

PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if platform.system() == 'Linux':
	[for (fogNode : FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode)->select(fogNode : FogNode | fogNode.hil_node_configuration->filter(Raspberry)->size()>0)->sortedBy(name))]
	subprocess.call("gnome-terminal -- python3 "+PATH+"/[fogNode.name.replaceAll('_','')/][fogNode.id/]/start-docker-simulation-[fogNode.name.replaceAll('_','')/][fogNode.id/].py", shell=True)
	[/for]
else:
	print('Error responde: This script should only be run if your operating system is UNIX/Linux')
	[for (fogNode : FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode)->select(fogNode : FogNode | fogNode.hil_node_configuration->filter(Raspberry)->size()>0)->sortedBy(name))]
		[file ('/' + fogNode.name + fogNode.id +'/' + 'start-docker-simulation-' + fogNode.name + fogNode.id +'.py', false, 'UTF-8')]
print ('----------------------------------------------------------------------------------------------------\n')
import os, subprocess, getpass, sys, importlib.util, platform

print('Checking if all necessary libraries are installed:\n')
subprocess.check_call(['['/]sys.executable, "-m", "pip", "install", "scp", "paramiko", "cryptography"[']'/])
PATH = os.path.dirname(os.path.abspath(__file__))
paramiko_found = importlib.util.find_spec('paramiko') is not None
scp_found = importlib.util.find_spec('scp') is not None
cryptography_found = importlib.util.find_spec('cryptography') is not None

if paramiko_found and scp_found and cryptography_found:
	import paramiko, scp
	from cryptography.fernet import Fernet
	
	def execute(cmd):
		popen = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
		for stdout_line in iter(popen.stdout.readline, ""):
			yield stdout_line 
		popen.stdout.close()
		return_code = popen.wait()
		if return_code:
			raise subprocess.CalledProcessError(return_code, cmd)
	
	print ('\n----------------------------------------------------------------------------------------------------\n')
	print ("Starting Docker container ('start-docker-simulation-[fogNode.name.replaceAll('_','')/][fogNode.id/].py')")
	print ('\n----------------------------------------------------------------------------------------------------\n')
	if platform.system() == 'Linux':
		if os.path.exists(PATH+'/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt') and os.path.exists(PATH+'/key-[fogNode.name.replaceAll('_','')/][fogNode.id/].key'):
			print ("Obtaining the required IP address for '[fogNode.name/]':")
			print ('Raspberry Pi: [fogNode.hil_node_configuration.IP/]\n')
			with open(PATH+'/key-[fogNode.name.replaceAll('_','')/][fogNode.id/].key', 'rb') as file:
				key = file.read()
			with open(PATH+'/credentials-[fogNode.name.replaceAll('_','')/][fogNode.id/].txt', 'rb') as encrypted_file:
				encrypted_credentials = encrypted_file.read()
			decrypted_credentials = fernet = Fernet(key).decrypt(encrypted_credentials)
			print("Does your '[fogNode.name/]' device have a password? (yes/no): "+decrypted_credentials.decode().split('\n')['['/]0[']'/])
			print("Enter the username of device '[fogNode.name/]': "+decrypted_credentials.decode().split('\n')['['/]1[']'/])
			username = decrypted_credentials.decode().split('\n')['['/]1[']'/]
			if decrypted_credentials.decode().split('\n')['['/]0[']'/] == 'yes':
				print("Enter the password of device '[fogNode.name/]': ")
				password = decrypted_credentials.decode().split('\n')['['/]2[']'/]
			print ('\n----------------------------------------------------------------------------------------------------\n')
			print("Running the docker-composer file ('[fogNode.name/]'):\n")
			if decrypted_credentials.decode().split('\n')['['/]0[']'/] == 'yes':
				ssh = paramiko.SSHClient()
				ssh.load_system_host_keys()
				ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
				ssh.connect(hostname='[fogNode.hil_node_configuration.IP/]', username=username, password=password, port='22', look_for_keys=False)
				stdin, stdout, stderr = ssh.exec_command("docker compose -f '/home/pi/docker-run.yaml' up --remove-orphans --force-recreate", get_pty=True)
				for line in iter(stdout.readline, ""):
					print(line, end="")
				stdin.close()
				ssh.close()
			else:
				for path in execute("ssh "+username+"@[fogNode.hil_node_configuration.IP/] 'docker compose -f /home/pi/docker-run.yaml up --remove-orphans --force-recreate'"):
					print(path, end="")
				#ssh = subprocess.Popen(f'ssh '+username+'@[fogNode.hil_node_configuration.IP/] "docker compose -f /home/pi/docker-run.yaml up --remove-orphans --force-recreate"', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				#ssh.wait()
				#print(ine.decode())
				#for line in ssh.communicate():
					#print(line.decode())
			print ('\n----------------------------------------------------------------------------------------------------\n')
			print("End of Docker runs ('start-docker-simulation-[fogNode.name.replaceAll('_','')/][fogNode.id/].py')")
		else:
			print("You must load the raspberry configuration ('load-swarm-worker-[fogNode.name.replaceAll('_','')/][fogNode.id/].py') first")
	else:
		print('Error responde: This script should only be run if your operating system is UNIX/Linux')
else:
	print("The required libraries are not installed. Please, rerun the script again ('start-docker-simulation-[fogNode.name.replaceAll('_','')/][fogNode.id/].py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
		[/file]
	[/for]
[/file]
[/template]

[template public loadDockerComposePythonFile(anEnvironment : Environment)]
[comment @main/]
[file ('start-docker-simulation.py', false, 'UTF-8')]
print ('----------------------------------------------------------------------------------------------------\n')
import os, getpass, platform, socket, subprocess, sys, shutil, importlib.util

print('Checking if all necessary libraries are installed:\n')
subprocess.check_call(['['/]sys.executable, "-m", "pip", "install", "cryptography"[']'/])
cryptography_found = importlib.util.find_spec('cryptography') is not None
PATH = os.path.dirname(os.path.abspath(__file__))

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect(("8.8.8.8", 80))
ip = s.getsockname()['['/]0[']'/]
s.close()

if cryptography_found:
	from cryptography.fernet import Fernet

	print('\n----------------------------------------------------------------------------------------------------\n')
	print("Starting to run the SimulateIot-HiL environment ('start-docker-simulation.py')\n")
	print('----------------------------------------------------------------------------------------------------\n')
	if platform.system() == 'Linux':
		print('Select which option you would like to run:\n')
		print('  - 0) Build a multi-arch image and start the docker containers')
		print('  - 1) Start the docker containers')
		print('  - 2) Build a multi-arch image')
		print()
		inp = 'error'
		while inp != '0' and inp != '1' and inp != '2':
			inp = input("Enter the number of the selected option (0-2): ")
		print ('\n----------------------------------------------------------------------------------------------------')
		if inp == '0' or inp == '2':
			print("\nStarting to build a multi-arch image with Docker BuildKit\n")
			print('----------------------------------------------------------------------------------------------------\n')
			print("Updating 'daemon.json' configuration:")
			if os.path.exists(PATH+'/DeployV2/Swarm/daemon.json'):
				shutil.copy2(PATH+'/DeployV2/Swarm/daemon.json', PATH+'/DeployV2/Swarm/daemon2.json')
				os.system('sudo mv '+PATH+'/DeployV2/Swarm/daemon.json /etc/docker; sudo systemctl daemon-reload; sudo systemctl restart docker')
				os.rename(PATH+'/DeployV2/Swarm/daemon2.json', PATH+'/DeployV2/Swarm/daemon.json')
				print("The new configuration has been applied and Docker has been restarted\n")
			else:
				print("\nThe new configuration has not been applied. File 'daemon.json' has not been found")
			if os.path.exists(PATH+'/DeployV2/Swarm/credentials-docker.txt') and os.path.exists(PATH+'/DeployV2/Swarm/key-docker.key'):
				with open(PATH+'/DeployV2/Swarm/key-docker.key', 'rb') as file:
					key = file.read()
				with open(PATH+'/DeployV2/Swarm/credentials-docker.txt', 'rb') as encrypted_file:
					encrypted_credentials = encrypted_file.read()
				decrypted_credentials = fernet = Fernet(key).decrypt(encrypted_credentials)
				print("Enter the Docker Hub username (e.g. 'admin'): "+decrypted_credentials.decode().split('\n')['['/]0[']'/])
				usr = decrypted_credentials.decode().split('\n')['['/]0[']'/]
				print("Enter the Docker Hub password (e.g. '12345'): \n")
				psw = decrypted_credentials.decode().split('\n')['['/]1[']'/]
				os.system('docker login --username '+usr+' --password '+psw)
				print('\n----------------------------------------------------------------------------------------------------\n')
				os.system('docker buildx create --name builder --driver=docker-container --driver-opt image=moby/buildkit:master --platform linux/amd64,linux/arm64 --bootstrap --use')
				print()
				os.system('docker buildx ls')
				with open(PATH+'/DeployV2/docker-run.yaml', 'r') as file:
					lines = ['['/]line.rstrip() for line in file[']'/]
				local_registry = False
				for line in lines:
					if (line.find(ip+':5000/') != -1):
						local_registry = True
	[for (node : Node | anEnvironment.node)]
				print('\n----------------------------------------------------------------------------------------------------\n')
				print("Building the image for node '[node.name/]' (linux/ard64, linux/arm64):\n")
				if os.path.exists(PATH+'/[node.name.replaceAll('_','')/][node.id/]/target/docker/Dockerfile') and os.path.exists(PATH+'/[node.name.replaceAll('_','')/][node.id/]/target/docker/[node.name.replaceAll('_','')/][node.id/]-1.0-SNAPSHOT-thorntail.jar'):
					if local_registry == True:
						os.system('cd "'+PATH+'/[node.name.replaceAll('_','')/][node.id/]/target/docker"; docker buildx build --builder=builder --platform linux/amd64,linux/arm64 -t '+ip+':5000/hil:[if (node.eClass().name = 'Sensor')]sensor-[/if][if (node.eClass().name = 'Actuator')]actuator-[/if][node.name.replaceAll('_','').toLowerCase() + node.id/] . --push')
					else:
						os.system('cd "'+PATH+'/[node.name.replaceAll('_','')/][node.id/]/target/docker"; docker buildx build --builder=builder --platform linux/amd64,linux/arm64 -t '+usr+'/hil:[if (node.eClass().name = 'Sensor')]sensor-[/if][if (node.eClass().name = 'Actuator')]actuator-[/if][node.name.replaceAll('_','').toLowerCase() + node.id/] . --push')
				else:
					print("Component '[node.name/]' has not been dockerised properly. Run 'compile-dockerize-registry-components.py' script")
	[/for]
			else:
				print("You must load the raspberry configuration ('load-swarm-manager-linux.py') first")
		if inp == '0':
			print('\n----------------------------------------------------------------------------------------------------')
		if inp == '0' or inp == '1':
			#print ("\nUpdating Ubuntu Uncomplicated Firewall configuration:\n")
			#os.system('sudo ufw allow 2377/tcp; sudo ufw allow 7946/tcp; sudo ufw allow 7946/udp; sudo ufw allow 4789/udp')
			#print()
			#os.system('sudo ufw enable; sudo ufw disable')
			print("\nStarting the Docker containers in the current UNIX/Linux system...")
			subprocess.call("gnome-terminal -- python3 "+PATH+"/DeployV2/start-docker-simulation-linux.py", shell=True)
			print("Starting the Docker containers in Raspberry Pi devices...")
	[for (fogNode : FogNode | anEnvironment.node->filter(ProcessNode)->filter(FogNode)->select(fogNode : FogNode | fogNode.hil_node_configuration->filter(Raspberry)->size()>0)->sortedBy(name))]
			subprocess.call("gnome-terminal -- python3 "+PATH+"/[fogNode.name.replaceAll('_','')/][fogNode.id/]/start-docker-simulation-[fogNode.name.replaceAll('_','')/][fogNode.id/].py", shell=True)
	[/for]
	else:
		print('Error responde: This script should only be run if your operating system is UNIX/Linux')
else:
	print ("\nThe required libraries are not installed. Please, rerun the script again ('start-docker-simulation.py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
print ("End of the SimulateIot-HiL environment run ('start-docker-simulation.py')")
print ('\n----------------------------------------------------------------------------------------------------\n')
getpass.getpass("Press 'Enter' to continue... ")
print ('\n----------------------------------------------------------------------------------------------------')
[/file]
[/template]

[template public generateKubernetesFiles(anEnvironment : Environment)]
[comment @main/]
[for(pn: ProcessNode | anEnvironment.node->filter(ProcessNode))]
  [file ('/DeployV2/kubernetes/' + pn.name.replaceAll('_','').toLowerCase() + pn.id + '-deployment.yaml', false, 'UTF-8')]
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    io.kompose.service: [pn.name.replaceAll('_','').toLowerCase() + pn.id/]
  name: [pn.name.replaceAll('_','').toLowerCase() + pn.id/]
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: [pn.name.replaceAll('_','').toLowerCase() + pn.id/]
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/simulateiot: "true"
        io.kompose.service: [pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    spec:
      containers:
        - image: raaulcs/tfg:[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
          name: [pn.name.replaceAll('_','').toLowerCase() + pn.id/]
          resources: {}
      restartPolicy: Always
status: {}
  [/file]

  [file('/DeployV2/kubernetes/mosquitto-' + pn.name.replaceAll('_','').toLowerCase() + pn.id + '-deployment.yaml', false, 'UTF-8')]
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
  name: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/simulateiot: "true"
        io.kompose.service: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    spec:
      containers:
        - image: raaulcs/tfg:eclipse-mosquitto-configured
          name: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
          ports:
            - containerPort: 1883
          resources: {}
      restartPolicy: Always
status: {}

  [/file]
  [file ('/DeployV2/kubernetes/mosquitto-' + pn.name.replaceAll('_','').toLowerCase() + pn.id + '-service.yaml', false, 'UTF-8')]
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
  name: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
spec:
  type: NodePort
  ports:
    - protocol: TCP
      name: "[1883+i/]"
      port: [1883+i/]
      targetPort: 1883
  selector:
    io.kompose.service: mosquitto-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
status:
  loadBalancer: {}

  [/file]

  [if(pn.component->selectByKind(ProcessEngine)->selectByKind(CEP)->size()>0)]
  [file ('/DeployV2/kubernetes/cep-' + pn.name.replaceAll('_','').toLowerCase() + pn.id + '-deployment.yaml', false, 'UTF-8')]
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    io.kompose.service: cep-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
  name: cep-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: cep-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/simulateiot: "true"
        io.kompose.service: cep-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
    spec:
      containers:
        - image: raaulcs/tfg:esper-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
          name: cep-[pn.name.replaceAll('_','').toLowerCase() + pn.id/]
          resources: {}
      restartPolicy: Always
status: {}
  [/file]
  [/if]
[/for]

[for(ac: Actuator | anEnvironment.node->filter(EdgeNode)->filter(Actuator))]
  [file ('/DeployV2/kubernetes/actuator-' + ac.name.replaceAll('_','').toLowerCase() + ac.id + '-deployment.yaml', false, 'UTF-8')]
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: actuator-[ac.name.replaceAll('_','').toLowerCase() + ac.id/]
  name: actuator-[ac.name.replaceAll('_','').toLowerCase() + ac.id/]
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: actuator-[ac.name.replaceAll('_','').toLowerCase() + ac.id/]
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/simulateiot: "true"
        io.kompose.service: actuator-[ac.name.replaceAll('_','').toLowerCase() + ac.id/]
    spec:
      containers:
        - image: raaulcs/tfg:actuator-[ac.name.replaceAll('_','').toLowerCase() + ac.id/]
          name: actuator-[ac.name.replaceAll('_','').toLowerCase() + ac.id/]
          resources: {}
      restartPolicy: Always
status: {}

  [/file]
[/for]

[for(sn: Sensor | anEnvironment.node->filter(EdgeNode)->filter(Sensor))]
  [file ('/DeployV2/kubernetes/sensor-' + sn.name.replaceAll('_','').toLowerCase() + sn.id + '-deployment.yaml', false, 'UTF-8')]
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: sensor-[sn.name.replaceAll('_','').toLowerCase() + sn.id/]
  name: sensor-[sn.name.replaceAll('_','').toLowerCase() + sn.id/]
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: sensor-[sn.name.replaceAll('_','').toLowerCase() + sn.id/]
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/simulateiot: "true"
        io.kompose.service: sensor-[sn.name.replaceAll('_','').toLowerCase() + sn.id/]
    spec:
      containers:
        - image: raaulcs/tfg:sensor-[sn.name.replaceAll('_','').toLowerCase() + sn.id/]
          name: sensor-[sn.name.replaceAll('_','').toLowerCase() + sn.id/]
          resources: {}
      restartPolicy: Always
status: {}
  [/file]
[/for]

[/template]

[template public generateAutoPushDockerImagesScript(anEnvironment : Environment)]
[comment @main/]
[file ('auto-push-docker-images.sh', false, 'UTF-8')]
#!/bin/bash

# Get the directory path of the script
SCRIPT_DIR=$(dirname "$0")

# Configuration variables
#DOCKER_USERNAME="${DOCKER_USERNAME:-$(grep -Po '(?<="username": ")['['/]^"[']'/]*' ~/.docker/config.json)}"
#DOCKER_PASSWORD="${DOCKER_PASSWORD:-$(grep -Po '(?<="password": ")['['/]^"[']'/]*' ~/.docker/config.json)}"
#DOCKER_REPO="$DOCKER_USERNAME/tfg"

DOCKER_USERNAME="your_dockerhub_username"
DOCKER_PASSWORD="your_dockerhub_password"
DOCKER_REPO="your_dockerhub_username/your_repository_name"

# Reference date (in YYYY-MM-DD format)
REFERENCE_DATE="2023-01-01"

# Log in to Docker Hub
echo "Logging in to Docker Hub..."
docker login --username "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"

# Push new images (created after the reference date)
for IMAGE in $(docker image ls --format "{{.ID}}:{{.Repository}}:{{.Tag}}:{{.CreatedAt}}" | cut -d' ' -f1); do
    IMAGE_ID=$(echo "$IMAGE" | cut -d':' -f1)
    IMAGE_INFO=$(echo "$IMAGE" | cut -d':' -f2-)
    IMAGE_NAME=$(echo "$IMAGE_INFO" | cut -d':' -f2 | cut -d'/' -f2)
    CREATED_AT=$(echo "$IMAGE_INFO" | cut -d':' -f4)
    if ['['/]['['/] $CREATED_AT > $REFERENCE_DATE [']'/][']'/]; then
        echo "Tagging and pushing the image: $IMAGE_ID"
        docker tag "$IMAGE_ID" "$DOCKER_REPO:$IMAGE_NAME"
        docker push "$DOCKER_REPO:$IMAGE_NAME"
		#docker image rm -f "$IMAGE_ID"
    fi
done

# Log out from Docker Hub
#docker logout
echo "Push of new images completed."

# Make the other script executable
chmod +x "$SCRIPT_DIR"/kubernetes-script.sh

# Prompt the user with a yes/no question
read -p "Do you want to deploy to Kubernetes? (y/n): " choice

# Convert the choice to lowercase for case-insensitive comparison
choice=${choice,,}

# Check the user's response
if ['['/]['['/] "$choice" == "y" || "$choice" == "yes" [']'/][']'/]; then
    echo "Proceeding to deploy..."
	"$SCRIPT_DIR"/kubernetes-script.sh
elif ['['/]['['/] "$choice" == "n" || "$choice" == "no" [']'/][']'/]; then
    echo "You can execute kubernetes-script.sh at anytime."
else
    echo "Invalid choice. Please enter 'y' or 'n'."
fi
[/file]
[/template]

[template public generateKubernetesScript(anEnvironment : Environment)]
[comment @main/]
[file ('kubernetes-script.sh', false, 'UTF-8')]
#!/bin/bash

# Define color variables
BLACK='\033['['/]0;30m'
RED='\033['['/]0;31m'
GREEN='\033['['/]0;32m'
YELLOW='\033['['/]0;33m'
BLUE='\033['['/]0;34m'
MAGENTA='\033['['/]0;35m'
CYAN='\033['['/]0;36m'
WHITE='\033['['/]0;37m'
NC='\033['['/]0m' # No Color

# Get the directory path of the script
SCRIPT_DIR=$(dirname "$0")

# Set the desired namespace (by default is default)
NAMESPACE="default"

# Cluster context (minikube by default, kubectl config view for more)
CONTEXT="minikube"

# Google Cloud parameters
# Set the desired project and cluster details
PROJECT_ID="tfgsimulateiot"
CLUSTER_NAME="test-cluster"
LOCATION="europe-north1"


echo "Where do you want to execute your files?"
echo "['['/]1[']'/] Local"
echo "['['/]2[']'/] Google Cloud"
read -p "" choice

# Check if Minikube is running
if minikube status >/dev/null 2>&1; then
    echo "Minikube is running."
else
    echo "Minikube is not running."
	minikube start
fi

while true; do
	# Google Cloud option
	if ['['/]['['/] "$choice" == 2 [']'/][']'/]; then
		# Change context
		kubectl config use-context "$CONTEXT"

		# Authenticate with Google Cloud
		gcloud auth login

		# Set the project
		gcloud config set project "$PROJECT_ID"

		# Set the cluster context
		gcloud container clusters get-credentials "$CLUSTER_NAME" \
    		--location "$LOCATION"
		break
	# Local option
	elif ['['/]['['/] "$choice" == 1 [']'/][']'/];then
		# Change context
		kubectl config use-context "$CONTEXT"
		break
	else
		echo "Please select a valid option"
	fi
done

echo "=================================="

kubectl apply -f "$SCRIPT_DIR"/DeployV2/kubernetes

echo "The files are being deployed, please wait..."
sleep 10

kubectl get all


# Get the list of pods in the namespace
PODS=$(kubectl get pods -n "$NAMESPACE" --output=jsonpath='{range .items['['/]*[']'/]}{.metadata.name}{"\n"}{end}')
DEPLOYMENTS=$(kubectl get deployments -n "$NAMESPACE" --output=jsonpath='{range .items['['/]*[']'/]}{.metadata.name}{"\n"}{end}')
SVC=$(kubectl get services -n "$NAMESPACE" --output=jsonpath='{range .items['['/]*[']'/]}{.metadata.name}{"\n"}{end}')

# Directory where the logs will be stored
LOG_DIR="$SCRIPT_DIR/DeployV2/kubernetes/logs/"

# Check if the directory exists
if ['['/] ! -d "$LOG_DIR" [']'/]; then
    mkdir -p "$LOG_DIR"
fi

sleep 30

# Loop through each pod and save its logs to a separate file
for pod in $PODS; do
    echo "Getting logs for pod: $pod"
    kubectl logs -n "$NAMESPACE" "$pod" > "$SCRIPT_DIR"/DeployV2/kubernetes/logs/"$pod".log
    echo -e "${GREEN}Logs saved to: $SCRIPT_DIR/DeployV2/kubernetes/logs/$pod.log${NC}"
done

# Wait for 5 seconds between log updates
sleep 5

echo -e "${CYAN}Every 5 seconds the logs will be updated.${NC}"

# Continuously update the logs every 5 seconds until a key is pressed
while true; do

    # Loop through each pod and update its log file
    for pod in $PODS; do
        echo -e "${GREEN}Updating logs for pod: $pod${NC}"
        kubectl logs -n "$NAMESPACE" "$pod" > "$SCRIPT_DIR"/DeployV2/kubernetes/logs/"$pod".log
    done

    # Display the updated log files
    echo "Press any key to stop updating."

    # Wait for 5 seconds or user input
    read -t 5 -N 1 key

    # If a key is pressed, exit the loop
    if ['['/]['['/] -n "$key" [']'/][']'/]; then
		echo -e "${RED}Exiting. All logs are saved in "$SCRIPT_DIR"/DeployV2/kubernetes/logs/${NC}"
        break
    fi
done


# Loop through each service and delete it, except for the Kubernetes service
for service in $SVC; do
    if ['['/]['['/] $service != "kubernetes" [']'/][']'/]; then
        echo "Deleting service: $service"
        kubectl delete service "$service" -n "$NAMESPACE"
    fi
done

# Loop through each deployment and delete it
for deployment in $DEPLOYMENTS; do
    echo "Deleting deployment: $deployment"
    kubectl delete deployment "$deployment" -n "$NAMESPACE"
done

# Delete container
#gcloud container clusters delete "$CLUSTER_NAME" \
#    --location "$LOCATION"

echo "Graphs are being generated..."
python3 "$SCRIPT_DIR"/create_graphs.py

[/file]
[/template]

[template public generateGraphsScript(anEnvironment : Environment)]
[comment @main/]
[file ('create_graphs.py', false, 'UTF-8')]
import os, glob, re
import matplotlib.pyplot as plt

logs_path = os.path.dirname(os.path.realpath(__file__)) + "/DeployV2/kubernetes/logs"

# Función para buscar y extraer valores en los archivos de registro
def extraer_valores(archivo):
    valores_individuales = ['['/][']'/]  # Lista para almacenar valores individuales de un archivo
    count = ['['/][']'/]
    with open(archivo, "r") as file:
        for linea in file:
            if linea.startswith("DEVICE "):
                # Utilizar expresión regular para extraer el valor de "value"
                match = re.search(r'"value"\s*:\s*"(['['/]^"[']'/]+)"\s*,?', linea)
                if match:
                    valor = match.group(1)
                    if "." in valor:
                        valores_individuales.append(
                            float(valor)
                        )  # Convertir a flotante si tiene punto decimal
                    elif valor.isnumeric():
                        valores_individuales.append(
                            int(valor)
                        )  # Convertir a entero si es un número entero
                    else:
                        if(len(valores_individuales) == 0):
                            valores_individuales.append(str(valor))
                            count.append(int(1))
                        else:
                            found = 'false'
                            for elem in valores_individuales:
                                if(elem == valor):
                                    count['['/]valores_individuales.index(valor)[']'/] = count['['/]valores_individuales.index(valor)[']'/] + 1
                                    found = 'true'
                            if(found == 'false'):
                                valores_individuales.append(str(valor))
                                count.append(int(1))
    return valores_individuales,count
    


# Recorrer archivos en el directorio de logs
for archivo in os.listdir(logs_path):
    if archivo.startswith("sensor-") and archivo.endswith(".log"):  
        ruta_logs = os.path.join(logs_path, archivo)
        valores_archivo,count = extraer_valores(ruta_logs)

        ruta_graphs = logs_path+'/graphs'

        # Crea el directorio si no existe
        if not os.path.exists(ruta_graphs):
        	os.makedirs(ruta_graphs)

        ruta_completa = os.path.join(ruta_graphs, archivo)

        # Borrar los datos de plt
        plt.clf()

        # Personalizar la gráfica (opcional)
        plt.xlabel("Índice")
        plt.ylabel("Valor")
        plt.title("Gráfico de "+ archivo)

        if type(valores_archivo['['/]0[']'/]) != str:
            # Crear una gráfica lineal
            plt.plot(valores_archivo)
        else:
            # Crear una gráfica de barras
            plt.bar(valores_archivo,count)
        
        # Mostrar la gráfica
        plt.savefig(ruta_completa + ".png")
[/file]
[/template]


